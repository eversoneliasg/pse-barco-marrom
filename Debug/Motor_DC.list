
Motor_DC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f6c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003130  08003130  00004130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003148  08003148  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003150  08003150  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00004150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003154  08003154  00004154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003158  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003164  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003164  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ed  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0d  00000000  00000000  00011429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00012e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096f  00000000  00000000  00013a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fc3  00000000  00000000  000143a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1a7  00000000  00000000  0003536a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd199  00000000  00000000  00043511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001106aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  001106f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001139c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003118 	.word	0x08003118

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003118 	.word	0x08003118

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb0a 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f91a 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f8ee 	bl	80006e4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000508:	f000 f876 	bl	80005f8 <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Motor_Control(true, true, 500); // Enable motor, forward direction, 50% speed
 800050c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000510:	2101      	movs	r1, #1
 8000512:	2001      	movs	r0, #1
 8000514:	f000 f996 	bl	8000844 <Motor_Control>
    HAL_Delay(2000); // Wait for 2 seconds
 8000518:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800051c:	f000 fb6a 	bl	8000bf4 <HAL_Delay>
    Motor_Control(false, true, 0); // Disable motor
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f98d 	bl	8000844 <Motor_Control>
    HAL_Delay(2000); // Wait for 2 seconds
 800052a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800052e:	f000 fb61 	bl	8000bf4 <HAL_Delay>
    Motor_Control(true, true, 500); // Enable motor, forward direction, 50% speed
 8000532:	bf00      	nop
 8000534:	e7ea      	b.n	800050c <main+0x18>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	@ 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fdba 	bl	80030c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <SystemClock_Config+0xb8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a22      	ldr	r2, [pc, #136]	@ (80005f0 <SystemClock_Config+0xb8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
 800056c:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <SystemClock_Config+0xb8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <SystemClock_Config+0xbc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000584:	4a1b      	ldr	r2, [pc, #108]	@ (80005f4 <SystemClock_Config+0xbc>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <SystemClock_Config+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f923 	bl	80017f8 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b8:	f000 f96c 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005c4:	2380      	movs	r3, #128	@ 0x80
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80005c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fdc3 	bl	8001164 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005e4:	f000 f956 	bl	8000894 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08e      	sub	sp, #56	@ 0x38
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000628:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <MX_TIM3_Init+0xe4>)
 800062a:	4a2d      	ldr	r2, [pc, #180]	@ (80006e0 <MX_TIM3_Init+0xe8>)
 800062c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <MX_TIM3_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <MX_TIM3_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800063a:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <MX_TIM3_Init+0xe4>)
 800063c:	2264      	movs	r2, #100	@ 0x64
 800063e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <MX_TIM3_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <MX_TIM3_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800064c:	4823      	ldr	r0, [pc, #140]	@ (80006dc <MX_TIM3_Init+0xe4>)
 800064e:	f001 fb71 	bl	8001d34 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000658:	f000 f91c 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000666:	4619      	mov	r1, r3
 8000668:	481c      	ldr	r0, [pc, #112]	@ (80006dc <MX_TIM3_Init+0xe4>)
 800066a:	f001 fe05 	bl	8002278 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000674:	f000 f90e 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000678:	4818      	ldr	r0, [pc, #96]	@ (80006dc <MX_TIM3_Init+0xe4>)
 800067a:	f001 fbaa 	bl	8001dd2 <HAL_TIM_PWM_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000684:	f000 f906 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	@ (80006dc <MX_TIM3_Init+0xe4>)
 8000698:	f002 f9d2 	bl	8002a40 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80006a2:	f000 f8f7 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a6:	2360      	movs	r3, #96	@ 0x60
 80006a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2204      	movs	r2, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4807      	ldr	r0, [pc, #28]	@ (80006dc <MX_TIM3_Init+0xe4>)
 80006be:	f001 fd19 	bl	80020f4 <HAL_TIM_PWM_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80006c8:	f000 f8e4 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006cc:	4803      	ldr	r0, [pc, #12]	@ (80006dc <MX_TIM3_Init+0xe4>)
 80006ce:	f000 f931 	bl	8000934 <HAL_TIM_MspPostInit>

}
 80006d2:	bf00      	nop
 80006d4:	3738      	adds	r7, #56	@ 0x38
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	40000400 	.word	0x40000400

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f002 fa0c 	bl	8002b38 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8b5 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000070 	.word	0x20000070
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b38      	ldr	r3, [pc, #224]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a37      	ldr	r2, [pc, #220]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b35      	ldr	r3, [pc, #212]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b31      	ldr	r3, [pc, #196]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a30      	ldr	r2, [pc, #192]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b2e      	ldr	r3, [pc, #184]	@ (8000834 <MX_GPIO_Init+0xfc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <MX_GPIO_Init+0xfc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a29      	ldr	r2, [pc, #164]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MX_GPIO_Init+0xfc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_GPIO_Init+0xfc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <MX_GPIO_Init+0xfc>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_GPIO_Init+0xfc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80007c4:	481c      	ldr	r0, [pc, #112]	@ (8000838 <MX_GPIO_Init+0x100>)
 80007c6:	f000 fcb3 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_C_LK_GPIO_Port, L293D_C_LK_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	481b      	ldr	r0, [pc, #108]	@ (800083c <MX_GPIO_Init+0x104>)
 80007d0:	f000 fcae 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4815      	ldr	r0, [pc, #84]	@ (8000840 <MX_GPIO_Init+0x108>)
 80007ec:	f000 fb0c 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 80007f0:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <MX_GPIO_Init+0x100>)
 800080a:	f000 fafd 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_C_LK_Pin */
  GPIO_InitStruct.Pin = L293D_C_LK_Pin;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L293D_C_LK_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_GPIO_Init+0x104>)
 8000826:	f000 faef 	bl	8000e08 <HAL_GPIO_Init>

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	@ 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	40020800 	.word	0x40020800

08000844 <Motor_Control>:

/* USER CODE BEGIN 4 */

/* Motor control function to manage motor state */
void Motor_Control(bool enable, bool direction, uint16_t speed) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
 800084e:	460b      	mov	r3, r1
 8000850:	71bb      	strb	r3, [r7, #6]
 8000852:	4613      	mov	r3, r2
 8000854:	80bb      	strh	r3, [r7, #4]
  if (enable) {
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00e      	beq.n	800087a <Motor_Control+0x36>
    // Set motor direction
    HAL_GPIO_WritePin(L293D_C_LK_GPIO_Port, L293D_C_LK_Pin, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	461a      	mov	r2, r3
 8000860:	2120      	movs	r1, #32
 8000862:	480a      	ldr	r0, [pc, #40]	@ (800088c <Motor_Control+0x48>)
 8000864:	f000 fc64 	bl	8001130 <HAL_GPIO_WritePin>
    // Set PWM duty cycle for speed control (PA7)
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <Motor_Control+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	88ba      	ldrh	r2, [r7, #4]
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
    // Start PWM
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000870:	2104      	movs	r1, #4
 8000872:	4807      	ldr	r0, [pc, #28]	@ (8000890 <Motor_Control+0x4c>)
 8000874:	f001 fb06 	bl	8001e84 <HAL_TIM_PWM_Start>
  } else {
    // Stop motor by disabling PWM
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
  }
}
 8000878:	e003      	b.n	8000882 <Motor_Control+0x3e>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800087a:	2104      	movs	r1, #4
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <Motor_Control+0x4c>)
 800087e:	f001 fbc9 	bl	8002014 <HAL_TIM_PWM_Stop>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40020400 	.word	0x40020400
 8000890:	20000028 	.word	0x20000028

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 fa5e 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_TIM_Base_MspInit+0x3c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d10d      	bne.n	800091e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_TIM_Base_MspInit+0x40>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <HAL_TIM_Base_MspInit+0x40>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <HAL_TIM_Base_MspInit+0x40>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40000400 	.word	0x40000400
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <HAL_TIM_MspPostInit+0x68>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d11d      	bne.n	8000992 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_TIM_MspPostInit+0x6c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <HAL_TIM_MspPostInit+0x6c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_TIM_MspPostInit+0x6c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000982:	2302      	movs	r3, #2
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <HAL_TIM_MspPostInit+0x70>)
 800098e:	f000 fa3b 	bl	8000e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40000400 	.word	0x40000400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a1e:	f000 f9f3 	bl	8000e08 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	@ 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f891 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ac0:	f7ff ffea 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	@ (8000afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	@ (8000b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 faf1 	bl	80030d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd01 	bl	80004f4 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b00:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b08:	200000bc 	.word	0x200000bc

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f931 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff feac 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f93b 	bl	8000dee <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f911 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	@ (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200000b8 	.word	0x200000b8

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200000b8 	.word	0x200000b8

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff ffee 	bl	8000bdc <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffde 	bl	8000bdc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff47 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff5c 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb0 	bl	8000d5c <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e165      	b.n	80010f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 8154 	bne.w	80010ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d130      	bne.n	8000ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80ae 	beq.w	80010ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b5d      	ldr	r3, [pc, #372]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a5c      	ldr	r2, [pc, #368]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a58      	ldr	r2, [pc, #352]	@ (800110c <HAL_GPIO_Init+0x304>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001110 <HAL_GPIO_Init+0x308>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d025      	beq.n	8001022 <HAL_GPIO_Init+0x21a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	@ (8001114 <HAL_GPIO_Init+0x30c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d01f      	beq.n	800101e <HAL_GPIO_Init+0x216>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8001118 <HAL_GPIO_Init+0x310>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0x212>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	@ (800111c <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x20e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8001120 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x20a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8001124 <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x206>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a49      	ldr	r2, [pc, #292]	@ (8001128 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x202>
 8001006:	2306      	movs	r3, #6
 8001008:	e00c      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800100a:	2307      	movs	r3, #7
 800100c:	e00a      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800100e:	2305      	movs	r3, #5
 8001010:	e008      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 8001012:	2304      	movs	r3, #4
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 8001016:	2303      	movs	r3, #3
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x21c>
 8001022:	2300      	movs	r3, #0
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001034:	4935      	ldr	r1, [pc, #212]	@ (800110c <HAL_GPIO_Init+0x304>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001042:	4b3a      	ldr	r3, [pc, #232]	@ (800112c <HAL_GPIO_Init+0x324>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001066:	4a31      	ldr	r2, [pc, #196]	@ (800112c <HAL_GPIO_Init+0x324>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106c:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <HAL_GPIO_Init+0x324>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001090:	4a26      	ldr	r2, [pc, #152]	@ (800112c <HAL_GPIO_Init+0x324>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001096:	4b25      	ldr	r3, [pc, #148]	@ (800112c <HAL_GPIO_Init+0x324>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <HAL_GPIO_Init+0x324>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <HAL_GPIO_Init+0x324>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e4:	4a11      	ldr	r2, [pc, #68]	@ (800112c <HAL_GPIO_Init+0x324>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	f67f ae96 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0cc      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001178:	4b68      	ldr	r3, [pc, #416]	@ (800131c <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d90c      	bls.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b65      	ldr	r3, [pc, #404]	@ (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b63      	ldr	r3, [pc, #396]	@ (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0b8      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b8:	4b59      	ldr	r3, [pc, #356]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4a58      	ldr	r2, [pc, #352]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d0:	4b53      	ldr	r3, [pc, #332]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a52      	ldr	r2, [pc, #328]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	4b50      	ldr	r3, [pc, #320]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	494d      	ldr	r1, [pc, #308]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d044      	beq.n	8001284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d119      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e07f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d003      	beq.n	8001222 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121e:	2b03      	cmp	r3, #3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001222:	4b3f      	ldr	r3, [pc, #252]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e067      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001242:	4b37      	ldr	r3, [pc, #220]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f023 0203 	bic.w	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4934      	ldr	r1, [pc, #208]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	4313      	orrs	r3, r2
 8001252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001254:	f7ff fcc2 	bl	8000bdc <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	e00a      	b.n	8001272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125c:	f7ff fcbe 	bl	8000bdc <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e04f      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 020c 	and.w	r2, r3, #12
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d1eb      	bne.n	800125c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001284:	4b25      	ldr	r3, [pc, #148]	@ (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d20c      	bcs.n	80012ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b22      	ldr	r3, [pc, #136]	@ (800131c <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e032      	b.n	8001312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4916      	ldr	r1, [pc, #88]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012d6:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	490e      	ldr	r1, [pc, #56]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ea:	f000 f855 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	490a      	ldr	r1, [pc, #40]	@ (8001324 <HAL_RCC_ClockConfig+0x1c0>)
 80012fc:	5ccb      	ldrb	r3, [r1, r3]
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_RCC_ClockConfig+0x1c8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc22 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00
 8001320:	40023800 	.word	0x40023800
 8001324:	08003130 	.word	0x08003130
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_RCC_GetHCLKFreq+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800134c:	f7ff fff0 	bl	8001330 <HAL_RCC_GetHCLKFreq>
 8001350:	4602      	mov	r2, r0
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	0a9b      	lsrs	r3, r3, #10
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	4903      	ldr	r1, [pc, #12]	@ (800136c <HAL_RCC_GetPCLK1Freq+0x24>)
 800135e:	5ccb      	ldrb	r3, [r1, r3]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	08003140 	.word	0x08003140

08001370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001374:	f7ff ffdc 	bl	8001330 <HAL_RCC_GetHCLKFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0b5b      	lsrs	r3, r3, #13
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4903      	ldr	r1, [pc, #12]	@ (8001394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	08003140 	.word	0x08003140

08001398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800139c:	b0ae      	sub	sp, #184	@ 0xb8
 800139e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013be:	4bcb      	ldr	r3, [pc, #812]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	f200 8206 	bhi.w	80017d8 <HAL_RCC_GetSysClockFreq+0x440>
 80013cc:	a201      	add	r2, pc, #4	@ (adr r2, 80013d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	08001409 	.word	0x08001409
 80013d8:	080017d9 	.word	0x080017d9
 80013dc:	080017d9 	.word	0x080017d9
 80013e0:	080017d9 	.word	0x080017d9
 80013e4:	08001411 	.word	0x08001411
 80013e8:	080017d9 	.word	0x080017d9
 80013ec:	080017d9 	.word	0x080017d9
 80013f0:	080017d9 	.word	0x080017d9
 80013f4:	08001419 	.word	0x08001419
 80013f8:	080017d9 	.word	0x080017d9
 80013fc:	080017d9 	.word	0x080017d9
 8001400:	080017d9 	.word	0x080017d9
 8001404:	08001609 	.word	0x08001609
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001408:	4bb9      	ldr	r3, [pc, #740]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800140e:	e1e7      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4bb8      	ldr	r3, [pc, #736]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001416:	e1e3      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001418:	4bb4      	ldr	r3, [pc, #720]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	4bb1      	ldr	r3, [pc, #708]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d071      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	4bae      	ldr	r3, [pc, #696]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	2200      	movs	r2, #0
 8001438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800143c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001456:	4622      	mov	r2, r4
 8001458:	462b      	mov	r3, r5
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	0159      	lsls	r1, r3, #5
 8001464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001468:	0150      	lsls	r0, r2, #5
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4621      	mov	r1, r4
 8001470:	1a51      	subs	r1, r2, r1
 8001472:	6439      	str	r1, [r7, #64]	@ 0x40
 8001474:	4629      	mov	r1, r5
 8001476:	eb63 0301 	sbc.w	r3, r3, r1
 800147a:	647b      	str	r3, [r7, #68]	@ 0x44
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001488:	4649      	mov	r1, r9
 800148a:	018b      	lsls	r3, r1, #6
 800148c:	4641      	mov	r1, r8
 800148e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001492:	4641      	mov	r1, r8
 8001494:	018a      	lsls	r2, r1, #6
 8001496:	4641      	mov	r1, r8
 8001498:	1a51      	subs	r1, r2, r1
 800149a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800149c:	4649      	mov	r1, r9
 800149e:	eb63 0301 	sbc.w	r3, r3, r1
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014b0:	4649      	mov	r1, r9
 80014b2:	00cb      	lsls	r3, r1, #3
 80014b4:	4641      	mov	r1, r8
 80014b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ba:	4641      	mov	r1, r8
 80014bc:	00ca      	lsls	r2, r1, #3
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	4622      	mov	r2, r4
 80014c6:	189b      	adds	r3, r3, r2
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80014ca:	462b      	mov	r3, r5
 80014cc:	460a      	mov	r2, r1
 80014ce:	eb42 0303 	adc.w	r3, r2, r3
 80014d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014e0:	4629      	mov	r1, r5
 80014e2:	024b      	lsls	r3, r1, #9
 80014e4:	4621      	mov	r1, r4
 80014e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014ea:	4621      	mov	r1, r4
 80014ec:	024a      	lsls	r2, r1, #9
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001504:	f7fe fe7e 	bl	8000204 <__aeabi_uldivmod>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4613      	mov	r3, r2
 800150e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001512:	e067      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4b75      	ldr	r3, [pc, #468]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	2200      	movs	r2, #0
 800151c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001520:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001524:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800152e:	2300      	movs	r3, #0
 8001530:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001532:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001536:	4622      	mov	r2, r4
 8001538:	462b      	mov	r3, r5
 800153a:	f04f 0000 	mov.w	r0, #0
 800153e:	f04f 0100 	mov.w	r1, #0
 8001542:	0159      	lsls	r1, r3, #5
 8001544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001548:	0150      	lsls	r0, r2, #5
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4621      	mov	r1, r4
 8001550:	1a51      	subs	r1, r2, r1
 8001552:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001554:	4629      	mov	r1, r5
 8001556:	eb63 0301 	sbc.w	r3, r3, r1
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001568:	4649      	mov	r1, r9
 800156a:	018b      	lsls	r3, r1, #6
 800156c:	4641      	mov	r1, r8
 800156e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001572:	4641      	mov	r1, r8
 8001574:	018a      	lsls	r2, r1, #6
 8001576:	4641      	mov	r1, r8
 8001578:	ebb2 0a01 	subs.w	sl, r2, r1
 800157c:	4649      	mov	r1, r9
 800157e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800158e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001596:	4692      	mov	sl, r2
 8001598:	469b      	mov	fp, r3
 800159a:	4623      	mov	r3, r4
 800159c:	eb1a 0303 	adds.w	r3, sl, r3
 80015a0:	623b      	str	r3, [r7, #32]
 80015a2:	462b      	mov	r3, r5
 80015a4:	eb4b 0303 	adc.w	r3, fp, r3
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015b6:	4629      	mov	r1, r5
 80015b8:	028b      	lsls	r3, r1, #10
 80015ba:	4621      	mov	r1, r4
 80015bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c0:	4621      	mov	r1, r4
 80015c2:	028a      	lsls	r2, r1, #10
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015cc:	2200      	movs	r2, #0
 80015ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80015d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015d6:	f7fe fe15 	bl	8000204 <__aeabi_uldivmod>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4613      	mov	r3, r2
 80015e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015e4:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	3301      	adds	r3, #1
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001606:	e0eb      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001608:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001614:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d06b      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	2200      	movs	r2, #0
 8001628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800162a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800162c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800162e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001632:	663b      	str	r3, [r7, #96]	@ 0x60
 8001634:	2300      	movs	r3, #0
 8001636:	667b      	str	r3, [r7, #100]	@ 0x64
 8001638:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800163c:	4622      	mov	r2, r4
 800163e:	462b      	mov	r3, r5
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	0159      	lsls	r1, r3, #5
 800164a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800164e:	0150      	lsls	r0, r2, #5
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4621      	mov	r1, r4
 8001656:	1a51      	subs	r1, r2, r1
 8001658:	61b9      	str	r1, [r7, #24]
 800165a:	4629      	mov	r1, r5
 800165c:	eb63 0301 	sbc.w	r3, r3, r1
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800166e:	4659      	mov	r1, fp
 8001670:	018b      	lsls	r3, r1, #6
 8001672:	4651      	mov	r1, sl
 8001674:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001678:	4651      	mov	r1, sl
 800167a:	018a      	lsls	r2, r1, #6
 800167c:	4651      	mov	r1, sl
 800167e:	ebb2 0801 	subs.w	r8, r2, r1
 8001682:	4659      	mov	r1, fp
 8001684:	eb63 0901 	sbc.w	r9, r3, r1
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001694:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001698:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169c:	4690      	mov	r8, r2
 800169e:	4699      	mov	r9, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	eb18 0303 	adds.w	r3, r8, r3
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	462b      	mov	r3, r5
 80016aa:	eb49 0303 	adc.w	r3, r9, r3
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016bc:	4629      	mov	r1, r5
 80016be:	024b      	lsls	r3, r1, #9
 80016c0:	4621      	mov	r1, r4
 80016c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c6:	4621      	mov	r1, r4
 80016c8:	024a      	lsls	r2, r1, #9
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016d2:	2200      	movs	r2, #0
 80016d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016dc:	f7fe fd92 	bl	8000204 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4613      	mov	r3, r2
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016ea:	e065      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x420>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f8:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	2200      	movs	r2, #0
 8001700:	4618      	mov	r0, r3
 8001702:	4611      	mov	r1, r2
 8001704:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001708:	653b      	str	r3, [r7, #80]	@ 0x50
 800170a:	2300      	movs	r3, #0
 800170c:	657b      	str	r3, [r7, #84]	@ 0x54
 800170e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001712:	4642      	mov	r2, r8
 8001714:	464b      	mov	r3, r9
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4641      	mov	r1, r8
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001744:	4659      	mov	r1, fp
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4651      	mov	r1, sl
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4651      	mov	r1, sl
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4651      	mov	r1, sl
 8001754:	1a54      	subs	r4, r2, r1
 8001756:	4659      	mov	r1, fp
 8001758:	eb63 0501 	sbc.w	r5, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	00eb      	lsls	r3, r5, #3
 8001766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800176a:	00e2      	lsls	r2, r4, #3
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	4643      	mov	r3, r8
 8001772:	18e3      	adds	r3, r4, r3
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	464b      	mov	r3, r9
 8001778:	eb45 0303 	adc.w	r3, r5, r3
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800178a:	4629      	mov	r1, r5
 800178c:	028b      	lsls	r3, r1, #10
 800178e:	4621      	mov	r1, r4
 8001790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001794:	4621      	mov	r1, r4
 8001796:	028a      	lsls	r2, r1, #10
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a0:	2200      	movs	r2, #0
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017aa:	f7fe fd2b 	bl	8000204 <__aeabi_uldivmod>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4613      	mov	r3, r2
 80017b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0f1b      	lsrs	r3, r3, #28
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d6:	e003      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	37b8      	adds	r7, #184	@ 0xb8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	00f42400 	.word	0x00f42400

080017f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e28d      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8083 	beq.w	800191e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001818:	4b94      	ldr	r3, [pc, #592]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d019      	beq.n	8001858 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001824:	4b91      	ldr	r3, [pc, #580]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
        || \
 800182c:	2b08      	cmp	r3, #8
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001830:	4b8e      	ldr	r3, [pc, #568]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001838:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b88      	ldr	r3, [pc, #544]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b84      	ldr	r3, [pc, #528]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05b      	beq.n	800191c <HAL_RCC_OscConfig+0x124>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d157      	bne.n	800191c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e25a      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x90>
 800187a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7b      	ldr	r2, [pc, #492]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xcc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xb4>
 8001892:	4b76      	ldr	r3, [pc, #472]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a75      	ldr	r2, [pc, #468]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a72      	ldr	r2, [pc, #456]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xcc>
 80018ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6e      	ldr	r2, [pc, #440]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6b      	ldr	r2, [pc, #428]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff f986 	bl	8000bdc <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff f982 	bl	8000bdc <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	@ 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e21f      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xdc>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff f972 	bl	8000bdc <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f96e 	bl	8000bdc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e20b      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b57      	ldr	r3, [pc, #348]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x104>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d06f      	beq.n	8001a0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800192a:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d017      	beq.n	8001966 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001936:	4b4d      	ldr	r3, [pc, #308]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
        || \
 800193e:	2b08      	cmp	r3, #8
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001942:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x186>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1d3      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_RCC_OscConfig+0x278>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f91b 	bl	8000bdc <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff f917 	bl	8000bdc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1b4      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4925      	ldr	r1, [pc, #148]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_RCC_OscConfig+0x278>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f8fa 	bl	8000bdc <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff f8f6 	bl	8000bdc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e193      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d036      	beq.n	8001a84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f8da 	bl	8000bdc <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8d6 	bl	8000bdc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e173      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x234>
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_RCC_OscConfig+0x27c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff f8c3 	bl	8000bdc <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	e00e      	b.n	8001a78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f8bf 	bl	8000bdc <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d907      	bls.n	8001a78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e15c      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470000 	.word	0x42470000
 8001a74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b8a      	ldr	r3, [pc, #552]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ea      	bne.n	8001a5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8097 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b83      	ldr	r3, [pc, #524]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b79      	ldr	r3, [pc, #484]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f87f 	bl	8000bdc <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff f87b 	bl	8000bdc <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e118      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_RCC_OscConfig+0x4b0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x31e>
 8001b08:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0c:	4a65      	ldr	r2, [pc, #404]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x358>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x340>
 8001b1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	4a60      	ldr	r2, [pc, #384]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x358>
 8001b38:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	4a59      	ldr	r2, [pc, #356]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b44:	4b57      	ldr	r3, [pc, #348]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b48:	4a56      	ldr	r2, [pc, #344]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f840 	bl	8000bdc <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f83c 	bl	8000bdc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0d7      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ee      	beq.n	8001b60 <HAL_RCC_OscConfig+0x368>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f82a 	bl	8000bdc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f826 	bl	8000bdc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0c1      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	4b40      	ldr	r3, [pc, #256]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ee      	bne.n	8001b8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80ad 	beq.w	8001d24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d060      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d145      	bne.n	8001c6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <HAL_RCC_OscConfig+0x4b4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe fffa 	bl	8000bdc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fff6 	bl	8000bdc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e093      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	071b      	lsls	r3, r3, #28
 8001c36:	491b      	ldr	r1, [pc, #108]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4b4>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe ffcb 	bl	8000bdc <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe ffc7 	bl	8000bdc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e064      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x452>
 8001c68:	e05c      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_OscConfig+0x4b4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe ffb4 	bl	8000bdc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe ffb0 	bl	8000bdc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e04d      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x480>
 8001c96:	e045      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e040      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <HAL_RCC_OscConfig+0x538>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d030      	beq.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d129      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d122      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d119      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10f      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e041      	b.n	8001dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fdc8 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f000 fb48 	bl	8002408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e041      	b.n	8001e68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f839 	bl	8001e70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f000 faf9 	bl	8002408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_TIM_PWM_Start+0x24>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e022      	b.n	8001eee <HAL_TIM_PWM_Start+0x6a>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d109      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0x3e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	e015      	b.n	8001eee <HAL_TIM_PWM_Start+0x6a>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d109      	bne.n	8001edc <HAL_TIM_PWM_Start+0x58>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e008      	b.n	8001eee <HAL_TIM_PWM_Start+0x6a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e07c      	b.n	8001ff0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d104      	bne.n	8001f06 <HAL_TIM_PWM_Start+0x82>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f04:	e013      	b.n	8001f2e <HAL_TIM_PWM_Start+0xaa>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d104      	bne.n	8001f16 <HAL_TIM_PWM_Start+0x92>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f14:	e00b      	b.n	8001f2e <HAL_TIM_PWM_Start+0xaa>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d104      	bne.n	8001f26 <HAL_TIM_PWM_Start+0xa2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f24:	e003      	b.n	8001f2e <HAL_TIM_PWM_Start+0xaa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fd5c 	bl	80029f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff8 <HAL_TIM_PWM_Start+0x174>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIM_PWM_Start+0xcc>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ffc <HAL_TIM_PWM_Start+0x178>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_TIM_PWM_Start+0xd0>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_TIM_PWM_Start+0xd2>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ff8 <HAL_TIM_PWM_Start+0x174>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d022      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d01d      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <HAL_TIM_PWM_Start+0x17c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d018      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002004 <HAL_TIM_PWM_Start+0x180>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_TIM_PWM_Start+0x184>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_TIM_PWM_Start+0x178>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_TIM_PWM_Start+0x188>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_TIM_PWM_Start+0x136>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a16      	ldr	r2, [pc, #88]	@ (8002010 <HAL_TIM_PWM_Start+0x18c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d111      	bne.n	8001fde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d010      	beq.n	8001fee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	e007      	b.n	8001fee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40000400 	.word	0x40000400
 8002004:	40000800 	.word	0x40000800
 8002008:	40000c00 	.word	0x40000c00
 800200c:	40014000 	.word	0x40014000
 8002010:	40001800 	.word	0x40001800

08002014 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fce4 	bl	80029f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <HAL_TIM_PWM_Stop+0xd8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_TIM_PWM_Stop+0x2c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <HAL_TIM_PWM_Stop+0xdc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_TIM_PWM_Stop+0x30>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_TIM_PWM_Stop+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d017      	beq.n	800207a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_TIM_PWM_Stop+0x66>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a1a      	ldr	r2, [r3, #32]
 8002060:	f240 4344 	movw	r3, #1092	@ 0x444
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <HAL_TIM_PWM_Stop+0x66>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_TIM_PWM_Stop+0x96>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	f240 4344 	movw	r3, #1092	@ 0x444
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_TIM_PWM_Stop+0x96>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <HAL_TIM_PWM_Stop+0xa6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b8:	e013      	b.n	80020e2 <HAL_TIM_PWM_Stop+0xce>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d104      	bne.n	80020ca <HAL_TIM_PWM_Stop+0xb6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c8:	e00b      	b.n	80020e2 <HAL_TIM_PWM_Stop+0xce>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d104      	bne.n	80020da <HAL_TIM_PWM_Stop+0xc6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d8:	e003      	b.n	80020e2 <HAL_TIM_PWM_Stop+0xce>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800210e:	2302      	movs	r3, #2
 8002110:	e0ae      	b.n	8002270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	f200 809f 	bhi.w	8002260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002122:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	0800215d 	.word	0x0800215d
 800212c:	08002261 	.word	0x08002261
 8002130:	08002261 	.word	0x08002261
 8002134:	08002261 	.word	0x08002261
 8002138:	0800219d 	.word	0x0800219d
 800213c:	08002261 	.word	0x08002261
 8002140:	08002261 	.word	0x08002261
 8002144:	08002261 	.word	0x08002261
 8002148:	080021df 	.word	0x080021df
 800214c:	08002261 	.word	0x08002261
 8002150:	08002261 	.word	0x08002261
 8002154:	08002261 	.word	0x08002261
 8002158:	0800221f 	.word	0x0800221f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f9fc 	bl	8002560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0208 	orr.w	r2, r2, #8
 8002176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6999      	ldr	r1, [r3, #24]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	619a      	str	r2, [r3, #24]
      break;
 800219a:	e064      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa4c 	bl	8002640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6999      	ldr	r1, [r3, #24]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	021a      	lsls	r2, r3, #8
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	619a      	str	r2, [r3, #24]
      break;
 80021dc:	e043      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 faa1 	bl	800272c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0208 	orr.w	r2, r2, #8
 80021f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0204 	bic.w	r2, r2, #4
 8002208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69d9      	ldr	r1, [r3, #28]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	61da      	str	r2, [r3, #28]
      break;
 800221c:	e023      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 faf5 	bl	8002814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	021a      	lsls	r2, r3, #8
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	61da      	str	r2, [r3, #28]
      break;
 800225e:	e002      	b.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	75fb      	strb	r3, [r7, #23]
      break;
 8002264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_TIM_ConfigClockSource+0x1c>
 8002290:	2302      	movs	r3, #2
 8002292:	e0b4      	b.n	80023fe <HAL_TIM_ConfigClockSource+0x186>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022cc:	d03e      	beq.n	800234c <HAL_TIM_ConfigClockSource+0xd4>
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022d2:	f200 8087 	bhi.w	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022da:	f000 8086 	beq.w	80023ea <HAL_TIM_ConfigClockSource+0x172>
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e2:	d87f      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022e4:	2b70      	cmp	r3, #112	@ 0x70
 80022e6:	d01a      	beq.n	800231e <HAL_TIM_ConfigClockSource+0xa6>
 80022e8:	2b70      	cmp	r3, #112	@ 0x70
 80022ea:	d87b      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b60      	cmp	r3, #96	@ 0x60
 80022ee:	d050      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x11a>
 80022f0:	2b60      	cmp	r3, #96	@ 0x60
 80022f2:	d877      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b50      	cmp	r3, #80	@ 0x50
 80022f6:	d03c      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0xfa>
 80022f8:	2b50      	cmp	r3, #80	@ 0x50
 80022fa:	d873      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b40      	cmp	r3, #64	@ 0x40
 80022fe:	d058      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002300:	2b40      	cmp	r3, #64	@ 0x40
 8002302:	d86f      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b30      	cmp	r3, #48	@ 0x30
 8002306:	d064      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002308:	2b30      	cmp	r3, #48	@ 0x30
 800230a:	d86b      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b20      	cmp	r3, #32
 800230e:	d060      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002310:	2b20      	cmp	r3, #32
 8002312:	d867      	bhi.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	2b10      	cmp	r3, #16
 800231a:	d05a      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x15a>
 800231c:	e062      	b.n	80023e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800232e:	f000 fb41 	bl	80029b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	609a      	str	r2, [r3, #8]
      break;
 800234a:	e04f      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800235c:	f000 fb2a 	bl	80029b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800236e:	609a      	str	r2, [r3, #8]
      break;
 8002370:	e03c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	461a      	mov	r2, r3
 8002380:	f000 fa9e 	bl	80028c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2150      	movs	r1, #80	@ 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f000 faf7 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002390:	e02c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 fabd 	bl	800291e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2160      	movs	r1, #96	@ 0x60
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fae7 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 80023b0:	e01c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 fa7e 	bl	80028c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2140      	movs	r1, #64	@ 0x40
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fad7 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 80023d0:	e00c      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f000 face 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 80023e2:	e003      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e000      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a46      	ldr	r2, [pc, #280]	@ (8002534 <TIM_Base_SetConfig+0x12c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <TIM_Base_SetConfig+0x40>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002426:	d00f      	beq.n	8002448 <TIM_Base_SetConfig+0x40>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a43      	ldr	r2, [pc, #268]	@ (8002538 <TIM_Base_SetConfig+0x130>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00b      	beq.n	8002448 <TIM_Base_SetConfig+0x40>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a42      	ldr	r2, [pc, #264]	@ (800253c <TIM_Base_SetConfig+0x134>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <TIM_Base_SetConfig+0x40>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a41      	ldr	r2, [pc, #260]	@ (8002540 <TIM_Base_SetConfig+0x138>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d003      	beq.n	8002448 <TIM_Base_SetConfig+0x40>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	@ (8002544 <TIM_Base_SetConfig+0x13c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d108      	bne.n	800245a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <TIM_Base_SetConfig+0x12c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02b      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002468:	d027      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a32      	ldr	r2, [pc, #200]	@ (8002538 <TIM_Base_SetConfig+0x130>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d023      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a31      	ldr	r2, [pc, #196]	@ (800253c <TIM_Base_SetConfig+0x134>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01f      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a30      	ldr	r2, [pc, #192]	@ (8002540 <TIM_Base_SetConfig+0x138>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01b      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2f      	ldr	r2, [pc, #188]	@ (8002544 <TIM_Base_SetConfig+0x13c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d017      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2e      	ldr	r2, [pc, #184]	@ (8002548 <TIM_Base_SetConfig+0x140>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2d      	ldr	r2, [pc, #180]	@ (800254c <TIM_Base_SetConfig+0x144>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00f      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2c      	ldr	r2, [pc, #176]	@ (8002550 <TIM_Base_SetConfig+0x148>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00b      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002554 <TIM_Base_SetConfig+0x14c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <TIM_Base_SetConfig+0x150>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a29      	ldr	r2, [pc, #164]	@ (800255c <TIM_Base_SetConfig+0x154>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d108      	bne.n	80024cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <TIM_Base_SetConfig+0x12c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0xf8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a12      	ldr	r2, [pc, #72]	@ (8002544 <TIM_Base_SetConfig+0x13c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d103      	bne.n	8002508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f023 0201 	bic.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]
  }
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40010000 	.word	0x40010000
 8002538:	40000400 	.word	0x40000400
 800253c:	40000800 	.word	0x40000800
 8002540:	40000c00 	.word	0x40000c00
 8002544:	40010400 	.word	0x40010400
 8002548:	40014000 	.word	0x40014000
 800254c:	40014400 	.word	0x40014400
 8002550:	40014800 	.word	0x40014800
 8002554:	40001800 	.word	0x40001800
 8002558:	40001c00 	.word	0x40001c00
 800255c:	40002000 	.word	0x40002000

08002560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f023 0201 	bic.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f023 0302 	bic.w	r3, r3, #2
 80025a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a20      	ldr	r2, [pc, #128]	@ (8002638 <TIM_OC1_SetConfig+0xd8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_OC1_SetConfig+0x64>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1f      	ldr	r2, [pc, #124]	@ (800263c <TIM_OC1_SetConfig+0xdc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10c      	bne.n	80025de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0308 	bic.w	r3, r3, #8
 80025ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <TIM_OC1_SetConfig+0xd8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d003      	beq.n	80025ee <TIM_OC1_SetConfig+0x8e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a14      	ldr	r2, [pc, #80]	@ (800263c <TIM_OC1_SetConfig+0xdc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d111      	bne.n	8002612 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40010000 	.word	0x40010000
 800263c:	40010400 	.word	0x40010400

08002640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f023 0210 	bic.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800266e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0320 	bic.w	r3, r3, #32
 800268a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a22      	ldr	r2, [pc, #136]	@ (8002724 <TIM_OC2_SetConfig+0xe4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_OC2_SetConfig+0x68>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <TIM_OC2_SetConfig+0xe8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10d      	bne.n	80026c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <TIM_OC2_SetConfig+0xe4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_OC2_SetConfig+0x94>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <TIM_OC2_SetConfig+0xe8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d113      	bne.n	80026fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000
 8002728:	40010400 	.word	0x40010400

0800272c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a21      	ldr	r2, [pc, #132]	@ (800280c <TIM_OC3_SetConfig+0xe0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d003      	beq.n	8002792 <TIM_OC3_SetConfig+0x66>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a20      	ldr	r2, [pc, #128]	@ (8002810 <TIM_OC3_SetConfig+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10d      	bne.n	80027ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a16      	ldr	r2, [pc, #88]	@ (800280c <TIM_OC3_SetConfig+0xe0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <TIM_OC3_SetConfig+0x92>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a15      	ldr	r2, [pc, #84]	@ (8002810 <TIM_OC3_SetConfig+0xe4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d113      	bne.n	80027e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	621a      	str	r2, [r3, #32]
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40010000 	.word	0x40010000
 8002810:	40010400 	.word	0x40010400

08002814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800284a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800285e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	031b      	lsls	r3, r3, #12
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <TIM_OC4_SetConfig+0xa4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <TIM_OC4_SetConfig+0x68>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <TIM_OC4_SetConfig+0xa8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d109      	bne.n	8002890 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40010400 	.word	0x40010400

080028c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0201 	bic.w	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 030a 	bic.w	r3, r3, #10
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291e:	b480      	push	{r7}
 8002920:	b087      	sub	sp, #28
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f023 0210 	bic.w	r2, r3, #16
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	031b      	lsls	r3, r3, #12
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800295a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	621a      	str	r2, [r3, #32]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	f043 0307 	orr.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	021a      	lsls	r2, r3, #8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	609a      	str	r2, [r3, #8]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2201      	movs	r2, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e05a      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a15      	ldr	r2, [pc, #84]	@ (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	40010400 	.word	0x40010400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40001800 	.word	0x40001800

08002b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e042      	b.n	8002bd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd ff22 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	@ 0x24
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f82b 	bl	8002bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b0c0      	sub	sp, #256	@ 0x100
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	ea40 0301 	orr.w	r3, r0, r1
 8002c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c30:	f021 010c 	bic.w	r1, r1, #12
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c52:	6999      	ldr	r1, [r3, #24]
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	ea40 0301 	orr.w	r3, r0, r1
 8002c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea4 <UART_SetConfig+0x2cc>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d005      	beq.n	8002c78 <UART_SetConfig+0xa0>
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea8 <UART_SetConfig+0x2d0>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d104      	bne.n	8002c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7fe fb7a 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c80:	e003      	b.n	8002c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7fe fb61 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 8002c86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c94:	f040 810c 	bne.w	8002eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cba:	4621      	mov	r1, r4
 8002cbc:	eb12 0801 	adds.w	r8, r2, r1
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	eb43 0901 	adc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	462b      	mov	r3, r5
 8002cea:	eb49 0303 	adc.w	r3, r9, r3
 8002cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d06:	460b      	mov	r3, r1
 8002d08:	18db      	adds	r3, r3, r3
 8002d0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	eb42 0303 	adc.w	r3, r2, r3
 8002d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d1c:	f7fd fa72 	bl	8000204 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4b61      	ldr	r3, [pc, #388]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011c      	lsls	r4, r3, #4
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d50:	4641      	mov	r1, r8
 8002d52:	eb12 0a01 	adds.w	sl, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb43 0b01 	adc.w	fp, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d70:	4692      	mov	sl, r2
 8002d72:	469b      	mov	fp, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb4b 0303 	adc.w	r3, fp, r3
 8002d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	18db      	adds	r3, r3, r3
 8002da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002db2:	f7fd fa27 	bl	8000204 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2264      	movs	r2, #100	@ 0x64
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	1acb      	subs	r3, r1, r3
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dd2:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002de0:	441c      	add	r4, r3
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e04:	4641      	mov	r1, r8
 8002e06:	1851      	adds	r1, r2, r1
 8002e08:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	414b      	adcs	r3, r1
 8002e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	00cb      	lsls	r3, r1, #3
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e26:	4651      	mov	r1, sl
 8002e28:	00ca      	lsls	r2, r1, #3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4642      	mov	r2, r8
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e6e:	f7fd f9c9 	bl	8000204 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	@ 0x32
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <UART_SetConfig+0x2d4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4422      	add	r2, r4
 8002e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea0:	e106      	b.n	80030b0 <UART_SetConfig+0x4d8>
 8002ea2:	bf00      	nop
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	1891      	adds	r1, r2, r2
 8002ec8:	6239      	str	r1, [r7, #32]
 8002eca:	415b      	adcs	r3, r3
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	1854      	adds	r4, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb43 0501 	adc.w	r5, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	00eb      	lsls	r3, r5, #3
 8002ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eea:	00e2      	lsls	r2, r4, #3
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ef8:	464b      	mov	r3, r9
 8002efa:	eb45 0303 	adc.w	r3, r5, r3
 8002efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f1e:	4629      	mov	r1, r5
 8002f20:	008b      	lsls	r3, r1, #2
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f28:	4621      	mov	r1, r4
 8002f2a:	008a      	lsls	r2, r1, #2
 8002f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f30:	f7fd f968 	bl	8000204 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4b60      	ldr	r3, [pc, #384]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011c      	lsls	r4, r3, #4
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	61b9      	str	r1, [r7, #24]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	4641      	mov	r1, r8
 8002f66:	1851      	adds	r1, r2, r1
 8002f68:	6139      	str	r1, [r7, #16]
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	414b      	adcs	r3, r1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	00cb      	lsls	r3, r1, #3
 8002f80:	4651      	mov	r1, sl
 8002f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f86:	4651      	mov	r1, sl
 8002f88:	00ca      	lsls	r2, r1, #3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4642      	mov	r2, r8
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f98:	464b      	mov	r3, r9
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	eb42 0303 	adc.w	r3, r2, r3
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	008b      	lsls	r3, r1, #2
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	008a      	lsls	r2, r1, #2
 8002fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fce:	f7fd f919 	bl	8000204 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4b38      	ldr	r3, [pc, #224]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002fda:	fba3 2301 	umull	r2, r3, r3, r1
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2264      	movs	r2, #100	@ 0x64
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	1acb      	subs	r3, r1, r3
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	3332      	adds	r3, #50	@ 0x32
 8002fec:	4a33      	ldr	r2, [pc, #204]	@ (80030bc <UART_SetConfig+0x4e4>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff8:	441c      	add	r4, r3
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	673b      	str	r3, [r7, #112]	@ 0x70
 8003002:	677a      	str	r2, [r7, #116]	@ 0x74
 8003004:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003008:	4642      	mov	r2, r8
 800300a:	464b      	mov	r3, r9
 800300c:	1891      	adds	r1, r2, r2
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	415b      	adcs	r3, r3
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003018:	4641      	mov	r1, r8
 800301a:	1851      	adds	r1, r2, r1
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	4649      	mov	r1, r9
 8003020:	414b      	adcs	r3, r1
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003030:	4659      	mov	r1, fp
 8003032:	00cb      	lsls	r3, r1, #3
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303a:	4651      	mov	r1, sl
 800303c:	00ca      	lsls	r2, r1, #3
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	4603      	mov	r3, r0
 8003044:	4642      	mov	r2, r8
 8003046:	189b      	adds	r3, r3, r2
 8003048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304a:	464b      	mov	r3, r9
 800304c:	460a      	mov	r2, r1
 800304e:	eb42 0303 	adc.w	r3, r2, r3
 8003052:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	663b      	str	r3, [r7, #96]	@ 0x60
 800305e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800306c:	4649      	mov	r1, r9
 800306e:	008b      	lsls	r3, r1, #2
 8003070:	4641      	mov	r1, r8
 8003072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003076:	4641      	mov	r1, r8
 8003078:	008a      	lsls	r2, r1, #2
 800307a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800307e:	f7fd f8c1 	bl	8000204 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <UART_SetConfig+0x4e4>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	@ 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	3332      	adds	r3, #50	@ 0x32
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <UART_SetConfig+0x4e4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4422      	add	r2, r4
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030b6:	46bd      	mov	sp, r7
 80030b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030bc:	51eb851f 	.word	0x51eb851f

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <__libc_init_array>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003108 <__libc_init_array+0x38>)
 80030d4:	4c0d      	ldr	r4, [pc, #52]	@ (800310c <__libc_init_array+0x3c>)
 80030d6:	1b64      	subs	r4, r4, r5
 80030d8:	10a4      	asrs	r4, r4, #2
 80030da:	2600      	movs	r6, #0
 80030dc:	42a6      	cmp	r6, r4
 80030de:	d109      	bne.n	80030f4 <__libc_init_array+0x24>
 80030e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003110 <__libc_init_array+0x40>)
 80030e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003114 <__libc_init_array+0x44>)
 80030e4:	f000 f818 	bl	8003118 <_init>
 80030e8:	1b64      	subs	r4, r4, r5
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	2600      	movs	r6, #0
 80030ee:	42a6      	cmp	r6, r4
 80030f0:	d105      	bne.n	80030fe <__libc_init_array+0x2e>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f8:	4798      	blx	r3
 80030fa:	3601      	adds	r6, #1
 80030fc:	e7ee      	b.n	80030dc <__libc_init_array+0xc>
 80030fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003102:	4798      	blx	r3
 8003104:	3601      	adds	r6, #1
 8003106:	e7f2      	b.n	80030ee <__libc_init_array+0x1e>
 8003108:	08003150 	.word	0x08003150
 800310c:	08003150 	.word	0x08003150
 8003110:	08003150 	.word	0x08003150
 8003114:	08003154 	.word	0x08003154

08003118 <_init>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr

08003124 <_fini>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	bf00      	nop
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr
