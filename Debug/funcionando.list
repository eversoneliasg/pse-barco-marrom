
funcionando.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006378  08006378  00007378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d8  080064d8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d8  080064d8  000074d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064dc  080064dc  000074dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080064e0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08006550  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006550  0000835c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b907  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c29  00000000  00000000  000139a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  000155d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c6  00000000  00000000  00015fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000275d  00000000  00000000  0001678e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5fc  00000000  00000000  00018eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb8e  00000000  00000000  000274e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  000f30b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f647c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006360 	.word	0x08006360

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006360 	.word	0x08006360

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HMC5883L_Init>:
#define HMC5883L_MODE_CONTINUOUS    0x00
#define HMC5883L_MODE_SINGLE        0x01
#define HMC5883L_MODE_IDLE          0x02
uint8_t mode = HMC5883L_MODE_CONTINUOUS;                                  // Modo contínuo

void HMC5883L_Init(I2C_HandleTypeDef *hi2c){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	6078      	str	r0, [r7, #4]
	uint8_t configA = (HMC5883L_SAMPLE_AVERAGE_8 << HMC5883L_CRA_SA_POS) |   // 8 amostras por leitura
 8000f80:	23c0      	movs	r3, #192	@ 0xc0
 8000f82:	73fb      	strb	r3, [r7, #15]
	                      (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DATARATE_POS) | // Taxa de 15Hz
	                      (HMC5883L_MEAS_MODE_NORMAL << HMC5883L_CRA_MM_POS);     // Modo de medição normal
	uint8_t configB = (HMC5883L_RANGE_1_3GA << HMC5883L_CRB_RANGE_POS);       // Ganho de ±1.3 Gauss
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	73bb      	strb	r3, [r7, #14]



    // Write to Configuration Register A
    HAL_I2C_Mem_Write(hi2c, HMC5883L_ADDRESS, REG_CONFIG_A, 23, &configA, 1, HAL_MAX_DELAY);
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	f107 030f 	add.w	r3, r7, #15
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2317      	movs	r3, #23
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	213c      	movs	r1, #60	@ 0x3c
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 f9d4 	bl	800234c <HAL_I2C_Mem_Write>

    // Write to Configuration Register B
    HAL_I2C_Mem_Write(hi2c, HMC5883L_ADDRESS, REG_CONFIG_B, 1, &configB, 1, HAL_MAX_DELAY);
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 030e 	add.w	r3, r7, #14
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	213c      	movs	r1, #60	@ 0x3c
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 f9c6 	bl	800234c <HAL_I2C_Mem_Write>

    // Write to Mode Register
    HAL_I2C_Mem_Write(hi2c, HMC5883L_ADDRESS, REG_MODE, 1, &mode, 1, HAL_MAX_DELAY);
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HMC5883L_Init+0x6c>)
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	213c      	movs	r1, #60	@ 0x3c
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 f9b9 	bl	800234c <HAL_I2C_Mem_Write>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000008c 	.word	0x2000008c

08000fe8 <HMC5883L_ReadData>:

void HMC5883L_ReadData(I2C_HandleTypeDef *hi2c, XYCoordinates reading[8]){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	uint8_t rawData[6];
    for (int i = 0; i < 8; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e028      	b.n	800104a <HMC5883L_ReadData+0x62>
        // Lê 6 bytes a partir do registrador REG_DATA_OUT_X_MSB
        HAL_I2C_Mem_Read(hi2c, HMC5883L_ADDRESS, REG_DATA_OUT_X_MSB, 1, rawData, 6, HAL_MAX_DELAY);
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2306      	movs	r3, #6
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	213c      	movs	r1, #60	@ 0x3c
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 fa96 	bl	8002540 <HAL_I2C_Mem_Read>

        // Converte os dados brutos para inteiros
        reading[i].x = (int16_t)((rawData[0] << 8) | rawData[1]);  // X MSB e LSB
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b219      	sxth	r1, r3
 800101a:	7b7b      	ldrb	r3, [r7, #13]
 800101c:	b21a      	sxth	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	4403      	add	r3, r0
 8001026:	430a      	orrs	r2, r1
 8001028:	b212      	sxth	r2, r2
 800102a:	801a      	strh	r2, [r3, #0]
        reading[i].y = (int16_t)((rawData[4] << 8) | rawData[5]);  // Y MSB e LSB
 800102c:	7c3b      	ldrb	r3, [r7, #16]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b219      	sxth	r1, r3
 8001032:	7c7b      	ldrb	r3, [r7, #17]
 8001034:	b21a      	sxth	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	4403      	add	r3, r0
 800103e:	430a      	orrs	r2, r1
 8001040:	b212      	sxth	r2, r2
 8001042:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < 8; i++) {
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2b07      	cmp	r3, #7
 800104e:	ddd3      	ble.n	8000ff8 <HMC5883L_ReadData+0x10>

    }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <Filter_Data>:

// *********************************** FUNCTIONS FOR FILTERING THE DATA ****************************

uint8_t Filter_Data(XYCoordinates reading[8]){
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	const float MIN_DISTANCE = 2;
 8001062:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001066:	613b      	str	r3, [r7, #16]
	XYCoordinates centroid = Data_Means(reading, 8);
 8001068:	2108      	movs	r1, #8
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f880 	bl	8001170 <Data_Means>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
	uint8_t resultSize=8;
 8001074:	2308      	movs	r3, #8
 8001076:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<8; i++){
 8001078:	2300      	movs	r3, #0
 800107a:	75bb      	strb	r3, [r7, #22]
 800107c:	e024      	b.n	80010c8 <Filter_Data+0x6e>
		if(Measure_Distance(reading[i], centroid) > MIN_DISTANCE){
 800107e:	7dbb      	ldrb	r3, [r7, #22]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f823 	bl	80010d8 <Measure_Distance>
 8001092:	eeb0 7a40 	vmov.f32	s14, s0
 8001096:	edd7 7a04 	vldr	s15, [r7, #16]
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d50e      	bpl.n	80010c2 <Filter_Data+0x68>
			reading[i].x = 0;
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	2200      	movs	r2, #0
 80010ae:	801a      	strh	r2, [r3, #0]
			reading[i].y = 0;
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	2200      	movs	r2, #0
 80010ba:	805a      	strh	r2, [r3, #2]
			resultSize--;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	3b01      	subs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<8; i++){
 80010c2:	7dbb      	ldrb	r3, [r7, #22]
 80010c4:	3301      	adds	r3, #1
 80010c6:	75bb      	strb	r3, [r7, #22]
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d9d7      	bls.n	800107e <Filter_Data+0x24>
		}
	}

	return resultSize;
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Measure_Distance>:

float Measure_Distance(XYCoordinates a, XYCoordinates b){
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	return sqrt(pow((a.x-b.x),2)+pow((a.y-b.y),2));
 80010e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010e6:	461a      	mov	r2, r3
 80010e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa38 	bl	8000564 <__aeabi_i2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8001168 <Measure_Distance+0x90>
 80010fc:	ec43 2b10 	vmov	d0, r2, r3
 8001100:	f003 ff44 	bl	8004f8c <pow>
 8001104:	ec55 4b10 	vmov	r4, r5, d0
 8001108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110c:	461a      	mov	r2, r3
 800110e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa25 	bl	8000564 <__aeabi_i2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001168 <Measure_Distance+0x90>
 8001122:	ec43 2b10 	vmov	d0, r2, r3
 8001126:	f003 ff31 	bl	8004f8c <pow>
 800112a:	ec53 2b10 	vmov	r2, r3, d0
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff f8cb 	bl	80002cc <__adddf3>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	ec43 2b17 	vmov	d7, r2, r3
 800113e:	eeb0 0a47 	vmov.f32	s0, s14
 8001142:	eef0 0a67 	vmov.f32	s1, s15
 8001146:	f003 ff91 	bl	800506c <sqrt>
 800114a:	ec53 2b10 	vmov	r2, r3, d0
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd49 	bl	8000be8 <__aeabi_d2f>
 8001156:	4603      	mov	r3, r0
 8001158:	ee07 3a90 	vmov	s15, r3
}
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	bf00      	nop
 8001168:	00000000 	.word	0x00000000
 800116c:	40000000 	.word	0x40000000

08001170 <Data_Means>:

XYCoordinates Data_Means(XYCoordinates reading[8], uint8_t n){
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	int16_t meansX = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	82fb      	strh	r3, [r7, #22]
	int16_t meansY = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0; i<8; i++){
 8001184:	2300      	movs	r3, #0
 8001186:	74fb      	strb	r3, [r7, #19]
 8001188:	e018      	b.n	80011bc <Data_Means+0x4c>
		meansX += reading[i].x;
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	b29a      	uxth	r2, r3
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	4413      	add	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	82fb      	strh	r3, [r7, #22]
		meansY += reading[i].y;
 80011a0:	7cfb      	ldrb	r3, [r7, #19]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	8abb      	ldrh	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0; i<8; i++){
 80011b6:	7cfb      	ldrb	r3, [r7, #19]
 80011b8:	3301      	adds	r3, #1
 80011ba:	74fb      	strb	r3, [r7, #19]
 80011bc:	7cfb      	ldrb	r3, [r7, #19]
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d9e3      	bls.n	800118a <Data_Means+0x1a>
	}
	XYCoordinates coordinateMeans = {meansX/n, meansY/n};
 80011c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	813b      	strh	r3, [r7, #8]
 80011d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011da:	b21b      	sxth	r3, r3
 80011dc:	817b      	strh	r3, [r7, #10]
	return coordinateMeans;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	89ba      	ldrh	r2, [r7, #12]
 80011e6:	f362 030f 	bfi	r3, r2, #0, #16
 80011ea:	89fa      	ldrh	r2, [r7, #14]
 80011ec:	f362 431f 	bfi	r3, r2, #16, #16
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	0000      	movs	r0, r0
	...

08001200 <XY_to_Degrees>:
//	XYCoordinates calibrated = {(reading.x + Delta.x), (reading.y + Delta.y)};
//	return calibrated;
//}


int16_t XY_to_Degrees(XYCoordinates coordinate){
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	 int16_t angle = atan2(coordinate.y, coordinate.x)*(180.0/M_PI);
 8001208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9a9 	bl	8000564 <__aeabi_i2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f9a2 	bl	8000564 <__aeabi_i2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ec43 2b11 	vmov	d1, r2, r3
 8001228:	ec45 4b10 	vmov	d0, r4, r5
 800122c:	f003 feac 	bl	8004f88 <atan2>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	a30e      	add	r3, pc, #56	@ (adr r3, 8001270 <XY_to_Degrees+0x70>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f9fd 	bl	8000638 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fca7 	bl	8000b98 <__aeabi_d2iz>
 800124a:	4603      	mov	r3, r0
 800124c:	81fb      	strh	r3, [r7, #14]
	if(angle < 0) angle += 360;
 800124e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001252:	2b00      	cmp	r3, #0
 8001254:	da04      	bge.n	8001260 <XY_to_Degrees+0x60>
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800125c:	b29b      	uxth	r3, r3
 800125e:	81fb      	strh	r3, [r7, #14]
	return (angle - 75);
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	3b4b      	subs	r3, #75	@ 0x4b
 8001264:	b29b      	uxth	r3, r3
 8001266:	b21b      	sxth	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bdb0      	pop	{r4, r5, r7, pc}
 8001270:	1a63c1f8 	.word	0x1a63c1f8
 8001274:	404ca5dc 	.word	0x404ca5dc

08001278 <RudderDegree>:

int16_t RudderDegree(uint16_t boatAngle, int16_t arrivalAngle){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	80fb      	strh	r3, [r7, #6]
 8001284:	4613      	mov	r3, r2
 8001286:	80bb      	strh	r3, [r7, #4]
	int16_t rudderAngleShift = boatAngle - arrivalAngle;
 8001288:	88bb      	ldrh	r3, [r7, #4]
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	81fb      	strh	r3, [r7, #14]
	return (int16_t) (-(5.0/18.0)*rudderAngleShift + 94);
 8001292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f964 	bl	8000564 <__aeabi_i2d>
 800129c:	a30d      	add	r3, pc, #52	@ (adr r3, 80012d4 <RudderDegree+0x5c>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9c9 	bl	8000638 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <RudderDegree+0x58>)
 80012b4:	f7ff f80a 	bl	80002cc <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc6a 	bl	8000b98 <__aeabi_d2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b21b      	sxth	r3, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40578000 	.word	0x40578000
 80012d4:	71c71c72 	.word	0x71c71c72
 80012d8:	bfd1c71c 	.word	0xbfd1c71c

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	b093      	sub	sp, #76	@ 0x4c
 80012e0:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f000 fbc5 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e6:	f000 f88f 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 f981 	bl	80015f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ee:	f000 f955 	bl	800159c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80012f2:	f000 f925 	bl	8001540 <MX_I2C2_Init>
  MX_I2C1_Init();
 80012f6:	f000 f8f5 	bl	80014e4 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HMC5883L_Init(&hi2c1);
 80012fa:	483a      	ldr	r0, [pc, #232]	@ (80013e4 <main+0x108>)
 80012fc:	f7ff fe3c 	bl	8000f78 <HMC5883L_Init>
//	  snprintf(message, sizeof(message), "Reading %d \r\n",  hi2c1);
//	  UART_TransmitMessage(message,huart2);
	  //HMC5883L_testConnection();

  /* USER CODE BEGIN 3 */
 	  HMC5883L_ReadData(&hi2c1, reading);
 8001300:	4939      	ldr	r1, [pc, #228]	@ (80013e8 <main+0x10c>)
 8001302:	4838      	ldr	r0, [pc, #224]	@ (80013e4 <main+0x108>)
 8001304:	f7ff fe70 	bl	8000fe8 <HMC5883L_ReadData>

 	 resultsize = Filter_Data(reading);
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <main+0x10c>)
 800130a:	f7ff fea6 	bl	800105a <Filter_Data>
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
 	 final_coordinates   = Data_Means(reading, resultsize);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4619      	mov	r1, r3
 8001316:	4834      	ldr	r0, [pc, #208]	@ (80013e8 <main+0x10c>)
 8001318:	f7ff ff2a 	bl	8001170 <Data_Means>
 800131c:	4603      	mov	r3, r0
 800131e:	603b      	str	r3, [r7, #0]

 	 Angle = XY_to_Degrees(final_coordinates);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7ff ff6d 	bl	8001200 <XY_to_Degrees>
 8001326:	4603      	mov	r3, r0
 8001328:	80bb      	strh	r3, [r7, #4]

 	 arrivalAngle = XY_to_Degrees(PosBeaconChegada);
 800132a:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <main+0x110>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f7ff ff67 	bl	8001200 <XY_to_Degrees>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <main+0x114>)
 8001338:	801a      	strh	r2, [r3, #0]



		snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
				final_coordinates.x,final_coordinates.y,Angle, RudderDegree(Angle,arrivalAngle));
 800133a:	f9b7 3000 	ldrsh.w	r3, [r7]
		snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
 800133e:	461e      	mov	r6, r3
				final_coordinates.x,final_coordinates.y,Angle, RudderDegree(Angle,arrivalAngle));
 8001340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
		snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
 8001344:	461d      	mov	r5, r3
 8001346:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
				final_coordinates.x,final_coordinates.y,Angle, RudderDegree(Angle,arrivalAngle));
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	4a28      	ldr	r2, [pc, #160]	@ (80013f0 <main+0x114>)
 800134e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff8f 	bl	8001278 <RudderDegree>
 800135a:	4603      	mov	r3, r0
		snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	9401      	str	r4, [sp, #4]
 8001360:	9500      	str	r5, [sp, #0]
 8001362:	4633      	mov	r3, r6
 8001364:	4a23      	ldr	r2, [pc, #140]	@ (80013f4 <main+0x118>)
 8001366:	2164      	movs	r1, #100	@ 0x64
 8001368:	4823      	ldr	r0, [pc, #140]	@ (80013f8 <main+0x11c>)
 800136a:	f003 f959 	bl	8004620 <sniprintf>

		UART_TransmitMessage(message,huart2);
 800136e:	4e23      	ldr	r6, [pc, #140]	@ (80013fc <main+0x120>)
 8001370:	466d      	mov	r5, sp
 8001372:	f106 040c 	add.w	r4, r6, #12
 8001376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001382:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001386:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800138a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800138e:	481a      	ldr	r0, [pc, #104]	@ (80013f8 <main+0x11c>)
 8001390:	f000 f9a2 	bl	80016d8 <UART_TransmitMessage>


 	 //
 	  HAL_Delay(10);
 8001394:	200a      	movs	r0, #10
 8001396:	f000 fbdd 	bl	8001b54 <HAL_Delay>
// 	        UART_TransmitMessage(message,huart2);
// 	      }
// 	      HAL_Delay(10);

 	      // Check for UART input
 	      if (HAL_UART_Receive(&huart2, caractere, 1, 1000) == HAL_OK) {
 800139a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139e:	2201      	movs	r2, #1
 80013a0:	4917      	ldr	r1, [pc, #92]	@ (8001400 <main+0x124>)
 80013a2:	4816      	ldr	r0, [pc, #88]	@ (80013fc <main+0x120>)
 80013a4:	f002 fd75 	bl	8003e92 <HAL_UART_Receive>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1a8      	bne.n	8001300 <main+0x24>
 	        snprintf(message, sizeof(message),
 	                 "Received Character: %c\r\n", caractere[0]);
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <main+0x124>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 	        snprintf(message, sizeof(message),
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <main+0x128>)
 80013b4:	2164      	movs	r1, #100	@ 0x64
 80013b6:	4810      	ldr	r0, [pc, #64]	@ (80013f8 <main+0x11c>)
 80013b8:	f003 f932 	bl	8004620 <sniprintf>
 	        UART_TransmitMessage(message,huart2);
 80013bc:	4e0f      	ldr	r6, [pc, #60]	@ (80013fc <main+0x120>)
 80013be:	466d      	mov	r5, sp
 80013c0:	f106 040c 	add.w	r4, r6, #12
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013d8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <main+0x11c>)
 80013de:	f000 f97b 	bl	80016d8 <UART_TransmitMessage>
 	  HMC5883L_ReadData(&hi2c1, reading);
 80013e2:	e78d      	b.n	8001300 <main+0x24>
 80013e4:	20000094 	.word	0x20000094
 80013e8:	20000184 	.word	0x20000184
 80013ec:	20000000 	.word	0x20000000
 80013f0:	200001a4 	.word	0x200001a4
 80013f4:	08006378 	.word	0x08006378
 80013f8:	200001a8 	.word	0x200001a8
 80013fc:	2000013c 	.word	0x2000013c
 8001400:	20000090 	.word	0x20000090
 8001404:	080063c4 	.word	0x080063c4

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	@ 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2234      	movs	r2, #52	@ 0x34
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f003 f936 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SystemClock_Config+0xd4>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a29      	ldr	r2, [pc, #164]	@ (80014dc <SystemClock_Config+0xd4>)
 8001436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <SystemClock_Config+0xd4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001448:	2300      	movs	r3, #0
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <SystemClock_Config+0xd8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001454:	4a22      	ldr	r2, [pc, #136]	@ (80014e0 <SystemClock_Config+0xd8>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <SystemClock_Config+0xd8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2310      	movs	r3, #16
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800147c:	2310      	movs	r3, #16
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001480:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001484:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001486:	2304      	movs	r3, #4
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800148a:	2302      	movs	r3, #2
 800148c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4618      	mov	r0, r3
 8001498:	f002 f982 	bl	80037a0 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014a2:	f000 f913 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2302      	movs	r3, #2
 80014ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 fe22 	bl	800310c <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014ce:	f000 f8fd 	bl	80016cc <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	@ 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f000 fdcf 	bl	80020c4 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f8ce 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000094 	.word	0x20000094
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_I2C2_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <MX_I2C2_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_I2C2_Init+0x50>)
 800154c:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <MX_I2C2_Init+0x58>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_I2C2_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_I2C2_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_I2C2_Init+0x50>)
 800155e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001562:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <MX_I2C2_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_I2C2_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <MX_I2C2_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_I2C2_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <MX_I2C2_Init+0x50>)
 800157e:	f000 fda1 	bl	80020c4 <HAL_I2C_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 f8a0 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000e8 	.word	0x200000e8
 8001594:	40005800 	.word	0x40005800
 8001598:	000186a0 	.word	0x000186a0

0800159c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_USART2_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_USART2_UART_Init+0x4c>)
 80015d4:	f002 fb82 	bl	8003cdc <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f000 f875 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000013c 	.word	0x2000013c
 80015ec:	40004400 	.word	0x40004400

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a2c      	ldr	r2, [pc, #176]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a1e      	ldr	r2, [pc, #120]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_GPIO_Init+0xd0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2120      	movs	r1, #32
 800167a:	4812      	ldr	r0, [pc, #72]	@ (80016c4 <MX_GPIO_Init+0xd4>)
 800167c:	f000 fd08 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001686:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <MX_GPIO_Init+0xd8>)
 8001698:	f000 fb66 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800169c:	2320      	movs	r3, #32
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_GPIO_Init+0xd4>)
 80016b4:	f000 fb58 	bl	8001d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020800 	.word	0x40020800

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Error_Handler+0x8>

080016d8 <UART_TransmitMessage>:
#include "print_readings.h"

// Define the 'message' variable here
char message[100] = "";

void UART_TransmitMessage(char *message, UART_HandleTypeDef huart2) {
 80016d8:	b084      	sub	sp, #16
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	f107 0014 	add.w	r0, r7, #20
 80016e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe fd90 	bl	8000210 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f107 0014 	add.w	r0, r7, #20
 80016f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	f002 fb3d 	bl	8003d7c <HAL_UART_Transmit>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800170c:	b004      	add	sp, #16
 800170e:	4770      	bx	lr

08001710 <HAL_MspInit>:
/* USER CODE END 0 */

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
void HAL_MspInit(void)
{

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	4a0f      	ldr	r2, [pc, #60]	@ (800175c <HAL_MspInit+0x4c>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001724:	6453      	str	r3, [r2, #68]	@ 0x44
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x4c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2007      	movs	r0, #7
 8001750:	f000 fad6 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_I2C_MspInit>:
/**
* @brief I2C MSP Initialization
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
{
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a42      	ldr	r2, [pc, #264]	@ (8001888 <HAL_I2C_MspInit+0x128>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12d      	bne.n	80017de <HAL_I2C_MspInit+0x7e>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a40      	ldr	r2, [pc, #256]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
 800179e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017a2:	61fb      	str	r3, [r7, #28]
    */
 80017a4:	2312      	movs	r3, #18
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ac:	2303      	movs	r3, #3
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2304      	movs	r3, #4
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4835      	ldr	r0, [pc, #212]	@ (8001890 <HAL_I2C_MspInit+0x130>)
 80017bc:	f000 fad4 	bl	8001d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a30      	ldr	r2, [pc, #192]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 80017ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d0:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
 80017dc:	e050      	b.n	8001880 <HAL_I2C_MspInit+0x120>
  /* USER CODE END I2C1_MspInit 1 */
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_I2C_MspInit+0x134>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d14b      	bne.n	8001880 <HAL_I2C_MspInit+0x120>
  /* USER CODE END I2C2_MspInit 0 */
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4a26      	ldr	r2, [pc, #152]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]

 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> I2C2_SDA
 8001820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001824:	61fb      	str	r3, [r7, #28]
    */
 8001826:	2312      	movs	r3, #18
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182e:	2303      	movs	r3, #3
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2304      	movs	r3, #4
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4814      	ldr	r0, [pc, #80]	@ (8001890 <HAL_I2C_MspInit+0x130>)
 800183e:	f000 fa93 	bl	8001d68 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001846:	61fb      	str	r3, [r7, #28]

 8001848:	2312      	movs	r3, #18
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2304      	movs	r3, #4
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	480e      	ldr	r0, [pc, #56]	@ (8001898 <HAL_I2C_MspInit+0x138>)
 8001860:	f000 fa82 	bl	8001d68 <HAL_GPIO_Init>

 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 800186e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_I2C_MspInit+0x12c>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  }
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	@ 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400
 8001894:	40005800 	.word	0x40005800
 8001898:	40020800 	.word	0x40020800

0800189c <HAL_UART_MspInit>:
/**
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
{
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <HAL_UART_MspInit+0x84>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12b      	bne.n	8001916 <HAL_UART_MspInit+0x7a>
  if(htim_base->Instance==TIM4)
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_UART_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_UART_MspInit+0x88>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_UART_MspInit+0x88>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a10      	ldr	r2, [pc, #64]	@ (8001924 <HAL_UART_MspInit+0x88>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_UART_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

 80018f6:	230c      	movs	r3, #12
 80018f8:	617b      	str	r3, [r7, #20]
}
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]

 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
{
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	@ (8001928 <HAL_UART_MspInit+0x8c>)
 8001912:	f000 fa29 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM4 GPIO Configuration
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	@ 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40004400 	.word	0x40004400
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <NMI_Handler+0x4>

08001934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <MemManage_Handler+0x4>

08001944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <UsageFault_Handler+0x4>

08001954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001982:	f000 f8c7 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f002 fe6c 	bl	8004698 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20020000 	.word	0x20020000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	2000020c 	.word	0x2000020c
 80019f4:	20000360 	.word	0x20000360

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <SystemInit+0x20>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <SystemInit+0x20>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a20:	f7ff ffea 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a24:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a26:	490d      	ldr	r1, [pc, #52]	@ (8001a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f002 fe2b 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4e:	f7ff fc45 	bl	80012dc <main>
  bx  lr    
 8001a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a60:	080064e0 	.word	0x080064e0
  ldr r2, =_sbss
 8001a64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a68:	2000035c 	.word	0x2000035c

08001a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <HAL_Init+0x40>)
 8001a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <HAL_Init+0x40>)
 8001a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_Init+0x40>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f931 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fe34 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f93b 	bl	8001d4e <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 f911 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_IncTick+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	20000210 	.word	0x20000210

08001b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b03      	ldr	r3, [pc, #12]	@ (8001b50 <HAL_GetTick+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000210 	.word	0x20000210

08001b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff ffee 	bl	8001b3c <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d005      	beq.n	8001b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_Delay+0x44>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7a:	bf00      	nop
 8001b7c:	f7ff ffde 	bl	8001b3c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8f7      	bhi.n	8001b7c <HAL_Delay+0x28>
  {
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000000c 	.word	0x2000000c

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	@ (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	@ (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	@ 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff47 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff5c 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff8e 	bl	8001c54 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5d 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffb0 	bl	8001cbc <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e165      	b.n	8002050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8154 	bne.w	800204a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d005      	beq.n	8001dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ae 	beq.w	800204a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b5a      	ldr	r3, [pc, #360]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0a:	4a58      	ldr	r2, [pc, #352]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4f      	ldr	r2, [pc, #316]	@ (8002070 <HAL_GPIO_Init+0x308>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x21a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4e      	ldr	r2, [pc, #312]	@ (8002074 <HAL_GPIO_Init+0x30c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x216>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4d      	ldr	r2, [pc, #308]	@ (8002078 <HAL_GPIO_Init+0x310>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x212>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4c      	ldr	r2, [pc, #304]	@ (800207c <HAL_GPIO_Init+0x314>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x20e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4b      	ldr	r2, [pc, #300]	@ (8002080 <HAL_GPIO_Init+0x318>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x20a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4a      	ldr	r2, [pc, #296]	@ (8002084 <HAL_GPIO_Init+0x31c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a49      	ldr	r2, [pc, #292]	@ (8002088 <HAL_GPIO_Init+0x320>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f82:	2300      	movs	r3, #0
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc6:	4a31      	ldr	r2, [pc, #196]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff0:	4a26      	ldr	r2, [pc, #152]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff6:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_GPIO_Init+0x324>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002020:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_GPIO_Init+0x324>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_GPIO_Init+0x324>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	f67f ae96 	bls.w	8001d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e12b      	b.n	800232e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fb38 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	@ 0x24
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002128:	f001 f8e2 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 800212c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a81      	ldr	r2, [pc, #516]	@ (8002338 <HAL_I2C_Init+0x274>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d807      	bhi.n	8002148 <HAL_I2C_Init+0x84>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a80      	ldr	r2, [pc, #512]	@ (800233c <HAL_I2C_Init+0x278>)
 800213c:	4293      	cmp	r3, r2
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e006      	b.n	8002156 <HAL_I2C_Init+0x92>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a7d      	ldr	r2, [pc, #500]	@ (8002340 <HAL_I2C_Init+0x27c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0e7      	b.n	800232e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a78      	ldr	r2, [pc, #480]	@ (8002344 <HAL_I2C_Init+0x280>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9b      	lsrs	r3, r3, #18
 8002168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a6a      	ldr	r2, [pc, #424]	@ (8002338 <HAL_I2C_Init+0x274>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d802      	bhi.n	8002198 <HAL_I2C_Init+0xd4>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	e009      	b.n	80021ac <HAL_I2C_Init+0xe8>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	4a69      	ldr	r2, [pc, #420]	@ (8002348 <HAL_I2C_Init+0x284>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	3301      	adds	r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	495c      	ldr	r1, [pc, #368]	@ (8002338 <HAL_I2C_Init+0x274>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d819      	bhi.n	8002200 <HAL_I2C_Init+0x13c>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e59      	subs	r1, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021e0:	400b      	ands	r3, r1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_I2C_Init+0x138>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e59      	subs	r1, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fa:	e051      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e04f      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_I2C_Init+0x168>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e012      	b.n	8002252 <HAL_I2C_Init+0x18e>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1e58      	subs	r0, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	0099      	lsls	r1, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Init+0x196>
 8002256:	2301      	movs	r3, #1
 8002258:	e022      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10e      	bne.n	8002280 <HAL_I2C_Init+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e58      	subs	r0, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	fbb0 f3f3 	udiv	r3, r0, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800227e:	e00f      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	0099      	lsls	r1, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	6809      	ldr	r1, [r1, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6911      	ldr	r1, [r2, #16]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68d2      	ldr	r2, [r2, #12]
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	000186a0 	.word	0x000186a0
 800233c:	001e847f 	.word	0x001e847f
 8002340:	003d08ff 	.word	0x003d08ff
 8002344:	431bde83 	.word	0x431bde83
 8002348:	10624dd3 	.word	0x10624dd3

0800234c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4603      	mov	r3, r0
 800235c:	817b      	strh	r3, [r7, #10]
 800235e:	460b      	mov	r3, r1
 8002360:	813b      	strh	r3, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002366:	f7ff fbe9 	bl	8001b3c <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b20      	cmp	r3, #32
 8002376:	f040 80d9 	bne.w	800252c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2319      	movs	r3, #25
 8002380:	2201      	movs	r2, #1
 8002382:	496d      	ldr	r1, [pc, #436]	@ (8002538 <HAL_I2C_Mem_Write+0x1ec>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fc8b 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
 8002392:	e0cc      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2C_Mem_Write+0x56>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0c5      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d007      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2221      	movs	r2, #33	@ 0x21
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a4d      	ldr	r2, [pc, #308]	@ (800253c <HAL_I2C_Mem_Write+0x1f0>)
 8002408:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800240a:	88f8      	ldrh	r0, [r7, #6]
 800240c:	893a      	ldrh	r2, [r7, #8]
 800240e:	8979      	ldrh	r1, [r7, #10]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4603      	mov	r3, r0
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fac2 	bl	80029a4 <I2C_RequestMemoryWrite>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d052      	beq.n	80024cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e081      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fd50 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06b      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d11b      	bne.n	80024cc <HAL_I2C_Mem_Write+0x180>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d017      	beq.n	80024cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1aa      	bne.n	800242a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fd43 	bl	8002f64 <I2C_WaitOnBTFFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d107      	bne.n	80024fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e016      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	00100002 	.word	0x00100002
 800253c:	ffff0000 	.word	0xffff0000

08002540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	@ 0x30
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800255a:	f7ff faef 	bl	8001b3c <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b20      	cmp	r3, #32
 800256a:	f040 8214 	bne.w	8002996 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2319      	movs	r3, #25
 8002574:	2201      	movs	r2, #1
 8002576:	497b      	ldr	r1, [pc, #492]	@ (8002764 <HAL_I2C_Mem_Read+0x224>)
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fb91 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
 8002586:	e207      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Mem_Read+0x56>
 8002592:	2302      	movs	r3, #2
 8002594:	e200      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d007      	beq.n	80025bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2222      	movs	r2, #34	@ 0x22
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002768 <HAL_I2C_Mem_Read+0x228>)
 80025fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025fe:	88f8      	ldrh	r0, [r7, #6]
 8002600:	893a      	ldrh	r2, [r7, #8]
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4603      	mov	r3, r0
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa5e 	bl	8002ad0 <I2C_RequestMemoryRead>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1bc      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	2b00      	cmp	r3, #0
 8002624:	d113      	bne.n	800264e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	623b      	str	r3, [r7, #32]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e190      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	2b01      	cmp	r3, #1
 8002654:	d11b      	bne.n	800268e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e170      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	2b02      	cmp	r3, #2
 8002694:	d11b      	bne.n	80026ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	e150      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026e4:	e144      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	f200 80f1 	bhi.w	80028d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d123      	bne.n	8002740 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fc79 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e145      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800273e:	e117      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b02      	cmp	r3, #2
 8002746:	d14e      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274e:	2200      	movs	r2, #0
 8002750:	4906      	ldr	r1, [pc, #24]	@ (800276c <HAL_I2C_Mem_Read+0x22c>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 faa4 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e11a      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
 8002762:	bf00      	nop
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000
 800276c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027e4:	e0c4      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	2200      	movs	r2, #0
 80027ee:	496c      	ldr	r1, [pc, #432]	@ (80029a0 <HAL_I2C_Mem_Read+0x460>)
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa55 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cb      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002848:	2200      	movs	r2, #0
 800284a:	4955      	ldr	r1, [pc, #340]	@ (80029a0 <HAL_I2C_Mem_Read+0x460>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fa27 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e09d      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028d0:	e04e      	b.n	8002970 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fb8c 	bl	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e058      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d124      	bne.n	8002970 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	f47f aeb6 	bne.w	80026e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	00010004 	.word	0x00010004

080029a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	460b      	mov	r3, r1
 80029b8:	813b      	strh	r3, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f960 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f4:	d103      	bne.n	80029fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e05f      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	492d      	ldr	r1, [pc, #180]	@ (8002acc <I2C_RequestMemoryWrite+0x128>)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f9bb 	bl	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e04c      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a40:	6a39      	ldr	r1, [r7, #32]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fa46 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d107      	bne.n	8002a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e02b      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	e021      	b.n	8002ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fa20 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e005      	b.n	8002ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab6:	893b      	ldrh	r3, [r7, #8]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00010002 	.word	0x00010002

08002ad0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	4608      	mov	r0, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	813b      	strh	r3, [r7, #8]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002af8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f8c2 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b30:	d103      	bne.n	8002b3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0aa      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	4952      	ldr	r1, [pc, #328]	@ (8002c9c <I2C_RequestMemoryRead+0x1cc>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f91d 	bl	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e097      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f9a8 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d107      	bne.n	8002ba2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e076      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e021      	b.n	8002bfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	6a39      	ldr	r1, [r7, #32]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f982 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d107      	bne.n	8002bee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e050      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf2:	893b      	ldrh	r3, [r7, #8]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfe:	6a39      	ldr	r1, [r7, #32]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f967 	bl	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d107      	bne.n	8002c24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e035      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f82b 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c5e:	d103      	bne.n	8002c68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e013      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	4906      	ldr	r1, [pc, #24]	@ (8002c9c <I2C_RequestMemoryRead+0x1cc>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f886 	bl	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	00010002 	.word	0x00010002

08002ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb0:	e048      	b.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d044      	beq.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe ff3f 	bl	8001b3c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d139      	bne.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10d      	bne.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	e00c      	b.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4013      	ands	r3, r2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d116      	bne.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e023      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d10d      	bne.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	43da      	mvns	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	e00c      	b.n	8002d84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	43da      	mvns	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4013      	ands	r3, r2
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d093      	beq.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da2:	e071      	b.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db2:	d123      	bne.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e067      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d041      	beq.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7fe fe9a 	bl	8001b3c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d136      	bne.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10c      	bne.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	e00b      	b.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e021      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10c      	bne.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e00b      	b.n	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf14      	ite	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	2300      	moveq	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af6d 	bne.w	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee0:	e034      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8e3 	bl	80030ae <I2C_IsAcknowledgeFailed>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e034      	b.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d028      	beq.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fe fe1f 	bl	8001b3c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11d      	bne.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1a:	2b80      	cmp	r3, #128	@ 0x80
 8002f1c:	d016      	beq.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e007      	b.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f56:	2b80      	cmp	r3, #128	@ 0x80
 8002f58:	d1c3      	bne.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f70:	e034      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f89b 	bl	80030ae <I2C_IsAcknowledgeFailed>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e034      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d028      	beq.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7fe fdd7 	bl	8001b3c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11d      	bne.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d016      	beq.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d1c3      	bne.n	8002f72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003000:	e049      	b.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b10      	cmp	r3, #16
 800300e:	d119      	bne.n	8003044 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0210 	mvn.w	r2, #16
 8003018:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e030      	b.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7fe fd7a 	bl	8001b3c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d016      	beq.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a0:	2b40      	cmp	r3, #64	@ 0x40
 80030a2:	d1ae      	bne.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c4:	d11b      	bne.n	80030fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0cc      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b68      	ldr	r3, [pc, #416]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d90c      	bls.n	8003148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b65      	ldr	r3, [pc, #404]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b63      	ldr	r3, [pc, #396]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b8      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003160:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a58      	ldr	r2, [pc, #352]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800316a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003178:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b50      	ldr	r3, [pc, #320]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	494d      	ldr	r1, [pc, #308]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d044      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d119      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b3f      	ldr	r3, [pc, #252]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e067      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ea:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4934      	ldr	r1, [pc, #208]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fc9e 	bl	8001b3c <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fe fc9a 	bl	8001b3c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e04f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 020c 	and.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1eb      	bne.n	8003204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d20c      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b22      	ldr	r3, [pc, #136]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e032      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4916      	ldr	r1, [pc, #88]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327e:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	490e      	ldr	r1, [pc, #56]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003292:	f000 f855 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 8003296:	4602      	mov	r2, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	490a      	ldr	r1, [pc, #40]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	5ccb      	ldrb	r3, [r1, r3]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fbfe 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00
 80032c8:	40023800 	.word	0x40023800
 80032cc:	080063e0 	.word	0x080063e0
 80032d0:	20000004 	.word	0x20000004
 80032d4:	20000008 	.word	0x20000008

080032d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f4:	f7ff fff0 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0a9b      	lsrs	r3, r3, #10
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	080063f0 	.word	0x080063f0

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff ffdc 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0b5b      	lsrs	r3, r3, #13
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	@ (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	080063f0 	.word	0x080063f0

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b0ae      	sub	sp, #184	@ 0xb8
 8003346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003366:	4bcb      	ldr	r3, [pc, #812]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b0c      	cmp	r3, #12
 8003370:	f200 8206 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x440>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033b1 	.word	0x080033b1
 8003380:	08003781 	.word	0x08003781
 8003384:	08003781 	.word	0x08003781
 8003388:	08003781 	.word	0x08003781
 800338c:	080033b9 	.word	0x080033b9
 8003390:	08003781 	.word	0x08003781
 8003394:	08003781 	.word	0x08003781
 8003398:	08003781 	.word	0x08003781
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	08003781 	.word	0x08003781
 80033a4:	08003781 	.word	0x08003781
 80033a8:	08003781 	.word	0x08003781
 80033ac:	080035b1 	.word	0x080035b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4bb9      	ldr	r3, [pc, #740]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x358>)
 80033b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033b6:	e1e7      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b8:	4bb8      	ldr	r3, [pc, #736]	@ (800369c <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033be:	e1e3      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c0:	4bb4      	ldr	r3, [pc, #720]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033cc:	4bb1      	ldr	r3, [pc, #708]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d071      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d8:	4bae      	ldr	r3, [pc, #696]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033fe:	4622      	mov	r2, r4
 8003400:	462b      	mov	r3, r5
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003410:	0150      	lsls	r0, r2, #5
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4621      	mov	r1, r4
 8003418:	1a51      	subs	r1, r2, r1
 800341a:	6439      	str	r1, [r7, #64]	@ 0x40
 800341c:	4629      	mov	r1, r5
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	647b      	str	r3, [r7, #68]	@ 0x44
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003430:	4649      	mov	r1, r9
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343a:	4641      	mov	r1, r8
 800343c:	018a      	lsls	r2, r1, #6
 800343e:	4641      	mov	r1, r8
 8003440:	1a51      	subs	r1, r2, r1
 8003442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003444:	4649      	mov	r1, r9
 8003446:	eb63 0301 	sbc.w	r3, r3, r1
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003458:	4649      	mov	r1, r9
 800345a:	00cb      	lsls	r3, r1, #3
 800345c:	4641      	mov	r1, r8
 800345e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003462:	4641      	mov	r1, r8
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	4603      	mov	r3, r0
 800346c:	4622      	mov	r2, r4
 800346e:	189b      	adds	r3, r3, r2
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
 8003472:	462b      	mov	r3, r5
 8003474:	460a      	mov	r2, r1
 8003476:	eb42 0303 	adc.w	r3, r2, r3
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003488:	4629      	mov	r1, r5
 800348a:	024b      	lsls	r3, r1, #9
 800348c:	4621      	mov	r1, r4
 800348e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003492:	4621      	mov	r1, r4
 8003494:	024a      	lsls	r2, r1, #9
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034ac:	f7fd fbec 	bl	8000c88 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ba:	e067      	b.n	800358c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4b75      	ldr	r3, [pc, #468]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034d6:	2300      	movs	r3, #0
 80034d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003510:	4649      	mov	r1, r9
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4641      	mov	r1, r8
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4641      	mov	r1, r8
 8003520:	ebb2 0a01 	subs.w	sl, r2, r1
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0b01 	sbc.w	fp, r3, r1
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800353a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353e:	4692      	mov	sl, r2
 8003540:	469b      	mov	fp, r3
 8003542:	4623      	mov	r3, r4
 8003544:	eb1a 0303 	adds.w	r3, sl, r3
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	462b      	mov	r3, r5
 800354c:	eb4b 0303 	adc.w	r3, fp, r3
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003574:	2200      	movs	r2, #0
 8003576:	673b      	str	r3, [r7, #112]	@ 0x70
 8003578:	677a      	str	r2, [r7, #116]	@ 0x74
 800357a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800357e:	f7fd fb83 	bl	8000c88 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4613      	mov	r3, r2
 8003588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800358c:	4b41      	ldr	r3, [pc, #260]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	3301      	adds	r3, #1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800359e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ae:	e0eb      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035bc:	4b35      	ldr	r3, [pc, #212]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d06b      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c8:	4b32      	ldr	r3, [pc, #200]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	2200      	movs	r2, #0
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035da:	663b      	str	r3, [r7, #96]	@ 0x60
 80035dc:	2300      	movs	r3, #0
 80035de:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035e4:	4622      	mov	r2, r4
 80035e6:	462b      	mov	r3, r5
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	0159      	lsls	r1, r3, #5
 80035f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f6:	0150      	lsls	r0, r2, #5
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4621      	mov	r1, r4
 80035fe:	1a51      	subs	r1, r2, r1
 8003600:	61b9      	str	r1, [r7, #24]
 8003602:	4629      	mov	r1, r5
 8003604:	eb63 0301 	sbc.w	r3, r3, r1
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003616:	4659      	mov	r1, fp
 8003618:	018b      	lsls	r3, r1, #6
 800361a:	4651      	mov	r1, sl
 800361c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003620:	4651      	mov	r1, sl
 8003622:	018a      	lsls	r2, r1, #6
 8003624:	4651      	mov	r1, sl
 8003626:	ebb2 0801 	subs.w	r8, r2, r1
 800362a:	4659      	mov	r1, fp
 800362c:	eb63 0901 	sbc.w	r9, r3, r1
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003644:	4690      	mov	r8, r2
 8003646:	4699      	mov	r9, r3
 8003648:	4623      	mov	r3, r4
 800364a:	eb18 0303 	adds.w	r3, r8, r3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	462b      	mov	r3, r5
 8003652:	eb49 0303 	adc.w	r3, r9, r3
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003664:	4629      	mov	r1, r5
 8003666:	024b      	lsls	r3, r1, #9
 8003668:	4621      	mov	r1, r4
 800366a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366e:	4621      	mov	r1, r4
 8003670:	024a      	lsls	r2, r1, #9
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800367a:	2200      	movs	r2, #0
 800367c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800367e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003684:	f7fd fb00 	bl	8000c88 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003692:	e065      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x420>
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x458>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	2200      	movs	r2, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	4611      	mov	r1, r2
 80036ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80036b2:	2300      	movs	r3, #0
 80036b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80036b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036ba:	4642      	mov	r2, r8
 80036bc:	464b      	mov	r3, r9
 80036be:	f04f 0000 	mov.w	r0, #0
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	0159      	lsls	r1, r3, #5
 80036c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036cc:	0150      	lsls	r0, r2, #5
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4641      	mov	r1, r8
 80036d4:	1a51      	subs	r1, r2, r1
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	4649      	mov	r1, r9
 80036da:	eb63 0301 	sbc.w	r3, r3, r1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036ec:	4659      	mov	r1, fp
 80036ee:	018b      	lsls	r3, r1, #6
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f6:	4651      	mov	r1, sl
 80036f8:	018a      	lsls	r2, r1, #6
 80036fa:	4651      	mov	r1, sl
 80036fc:	1a54      	subs	r4, r2, r1
 80036fe:	4659      	mov	r1, fp
 8003700:	eb63 0501 	sbc.w	r5, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	464b      	mov	r3, r9
 8003720:	eb45 0303 	adc.w	r3, r5, r3
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003748:	2200      	movs	r2, #0
 800374a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800374c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800374e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003752:	f7fd fa99 	bl	8000c88 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4613      	mov	r3, r2
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003760:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x458>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	0f1b      	lsrs	r3, r3, #28
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800376e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800377e:	e003      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800378c:	4618      	mov	r0, r3
 800378e:	37b8      	adds	r7, #184	@ 0xb8
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400

080037a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e28d      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8083 	beq.w	80038c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037c0:	4b94      	ldr	r3, [pc, #592]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d019      	beq.n	8003800 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037cc:	4b91      	ldr	r3, [pc, #580]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b88      	ldr	r3, [pc, #544]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b84      	ldr	r3, [pc, #528]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x124>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e25a      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x90>
 8003822:	4b7c      	ldr	r3, [pc, #496]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7b      	ldr	r2, [pc, #492]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xcc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0xb4>
 800383a:	4b76      	ldr	r3, [pc, #472]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b73      	ldr	r3, [pc, #460]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a72      	ldr	r2, [pc, #456]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xcc>
 8003854:	4b6f      	ldr	r3, [pc, #444]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6e      	ldr	r2, [pc, #440]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b6c      	ldr	r3, [pc, #432]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6b      	ldr	r2, [pc, #428]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fe f962 	bl	8001b3c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe f95e 	bl	8001b3c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e21f      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b61      	ldr	r3, [pc, #388]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xdc>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe f94e 	bl	8001b3c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe f94a 	bl	8001b3c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e20b      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	4b57      	ldr	r3, [pc, #348]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x104>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06f      	beq.n	80039b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038d2:	4b50      	ldr	r3, [pc, #320]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038de:	4b4d      	ldr	r3, [pc, #308]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b47      	ldr	r3, [pc, #284]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d11c      	bne.n	800393c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b44      	ldr	r3, [pc, #272]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	4b41      	ldr	r3, [pc, #260]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x186>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1d3      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	e03a      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b34      	ldr	r3, [pc, #208]	@ (8003a18 <HAL_RCC_OscConfig+0x278>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe f8f7 	bl	8001b3c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe f8f3 	bl	8001b3c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1b4      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	4b2b      	ldr	r3, [pc, #172]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4925      	ldr	r1, [pc, #148]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e015      	b.n	80039b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_OscConfig+0x278>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe f8d6 	bl	8001b3c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe f8d2 	bl	8001b3c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e193      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d036      	beq.n	8003a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe f8b6 	bl	8001b3c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe f8b2 	bl	8001b3c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e173      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_OscConfig+0x274>)
 80039e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x234>
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f4:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fe f89f 	bl	8001b3c <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	e00e      	b.n	8003a20 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a02:	f7fe f89b 	bl	8001b3c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d907      	bls.n	8003a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e15c      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470000 	.word	0x42470000
 8003a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b8a      	ldr	r3, [pc, #552]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ea      	bne.n	8003a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b83      	ldr	r3, [pc, #524]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a7e      	ldr	r2, [pc, #504]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b79      	ldr	r3, [pc, #484]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b76      	ldr	r3, [pc, #472]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fe f85b 	bl	8001b3c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fe f857 	bl	8001b3c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e118      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c50 <HAL_RCC_OscConfig+0x4b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x31e>
 8003ab0:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab4:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003abc:	e01c      	b.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x340>
 8003ac6:	4b61      	ldr	r3, [pc, #388]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a60      	ldr	r2, [pc, #384]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a59      	ldr	r2, [pc, #356]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aec:	4b57      	ldr	r3, [pc, #348]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a56      	ldr	r2, [pc, #344]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe f81c 	bl	8001b3c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe f818 	bl	8001b3c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0d7      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCC_OscConfig+0x368>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fe f806 	bl	8001b3c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe f802 	bl	8001b3c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0c1      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ee      	bne.n	8003b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	4a3a      	ldr	r2, [pc, #232]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80ad 	beq.w	8003ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b72:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d060      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d145      	bne.n	8003c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b33      	ldr	r3, [pc, #204]	@ (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd ffd6 	bl	8001b3c <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fd ffd2 	bl	8001b3c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e093      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	491b      	ldr	r1, [pc, #108]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fd ffa7 	bl	8001b3c <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fd ffa3 	bl	8001b3c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e064      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x452>
 8003c10:	e05c      	b.n	8003ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_OscConfig+0x4b4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd ff90 	bl	8001b3c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd ff8c 	bl	8001b3c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e04d      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x480>
 8003c3e:	e045      	b.n	8003ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e040      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000
 8003c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <HAL_RCC_OscConfig+0x538>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d030      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d129      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d122      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d119      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e042      	b.n	8003d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd fdca 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fa09 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d175      	bne.n	8003e88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_UART_Transmit+0x2c>
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e06e      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	@ 0x21
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dba:	f7fd febf 	bl	8001b3c <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd4:	d108      	bne.n	8003de8 <HAL_UART_Transmit+0x6c>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e003      	b.n	8003df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df0:	e02e      	b.n	8003e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	@ 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f8df 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e03a      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e007      	b.n	8003e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1cb      	bne.n	8003df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2140      	movs	r1, #64	@ 0x40
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8ab 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b08a      	sub	sp, #40	@ 0x28
 8003e96:	af02      	add	r7, sp, #8
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	f040 8081 	bne.w	8003fb6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_Receive+0x2e>
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e079      	b.n	8003fb8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2222      	movs	r2, #34	@ 0x22
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fe30 	bl	8001b3c <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	88fa      	ldrh	r2, [r7, #6]
 8003ee8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	d108      	bne.n	8003f06 <HAL_UART_Receive+0x74>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	e003      	b.n	8003f0e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f0e:	e047      	b.n	8003fa0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2120      	movs	r1, #32
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f850 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e042      	b.n	8003fb8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10c      	bne.n	8003f52 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e01f      	b.n	8003f92 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5a:	d007      	beq.n	8003f6c <HAL_UART_Receive+0xda>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <HAL_UART_Receive+0xe8>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e008      	b.n	8003f8c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1b2      	bne.n	8003f10 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd0:	e03b      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d037      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fd fdaf 	bl	8001b3c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e03a      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d023      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b80      	cmp	r3, #128	@ 0x80
 8004006:	d020      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d01d      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d116      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f81d 	bl	8004072 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2208      	movs	r2, #8
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d0b4      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004072:	b480      	push	{r7}
 8004074:	b095      	sub	sp, #84	@ 0x54
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800409a:	643a      	str	r2, [r7, #64]	@ 0x40
 800409c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e5      	bne.n	80040ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d119      	bne.n	800411e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0310 	bic.w	r3, r3, #16
 8004100:	647b      	str	r3, [r7, #68]	@ 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800410a:	61ba      	str	r2, [r7, #24]
 800410c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	613b      	str	r3, [r7, #16]
   return(result);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800412c:	bf00      	nop
 800412e:	3754      	adds	r7, #84	@ 0x54
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b0c0      	sub	sp, #256	@ 0x100
 800413e:	af00      	add	r7, sp, #0
 8004140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	ea40 0301 	orr.w	r3, r0, r1
 8004160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004190:	f021 010c 	bic.w	r1, r1, #12
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800419e:	430b      	orrs	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	ea40 0301 	orr.w	r3, r0, r1
 80041be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004404 <UART_SetConfig+0x2cc>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0xa0>
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004408 <UART_SetConfig+0x2d0>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d104      	bne.n	80041e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7ff f89e 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 80041dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041e0:	e003      	b.n	80041ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7ff f885 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 80041e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f4:	f040 810c 	bne.w	8004410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004212:	415b      	adcs	r3, r3
 8004214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0901 	adc.w	r9, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423a:	4690      	mov	r8, r2
 800423c:	4699      	mov	r9, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb18 0303 	adds.w	r3, r8, r3
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800425e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	653b      	str	r3, [r7, #80]	@ 0x50
 800426c:	4613      	mov	r3, r2
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	657b      	str	r3, [r7, #84]	@ 0x54
 8004274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800427c:	f7fc fd04 	bl	8000c88 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b61      	ldr	r3, [pc, #388]	@ (800440c <UART_SetConfig+0x2d4>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011c      	lsls	r4, r3, #4
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800429c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042a8:	415b      	adcs	r3, r3
 80042aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042b0:	4641      	mov	r1, r8
 80042b2:	eb12 0a01 	adds.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb43 0b01 	adc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	4692      	mov	sl, r2
 80042d2:	469b      	mov	fp, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	eb1a 0303 	adds.w	r3, sl, r3
 80042da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042de:	464b      	mov	r3, r9
 80042e0:	eb4b 0303 	adc.w	r3, fp, r3
 80042e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042fc:	460b      	mov	r3, r1
 80042fe:	18db      	adds	r3, r3, r3
 8004300:	643b      	str	r3, [r7, #64]	@ 0x40
 8004302:	4613      	mov	r3, r2
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	647b      	str	r3, [r7, #68]	@ 0x44
 800430a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800430e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004312:	f7fc fcb9 	bl	8000c88 <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4611      	mov	r1, r2
 800431c:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <UART_SetConfig+0x2d4>)
 800431e:	fba3 2301 	umull	r2, r3, r3, r1
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2264      	movs	r2, #100	@ 0x64
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	1acb      	subs	r3, r1, r3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004332:	4b36      	ldr	r3, [pc, #216]	@ (800440c <UART_SetConfig+0x2d4>)
 8004334:	fba3 2302 	umull	r2, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800434c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800435c:	415b      	adcs	r3, r3
 800435e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6339      	str	r1, [r7, #48]	@ 0x30
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043ce:	f7fc fc5b 	bl	8000c88 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <UART_SetConfig+0x2d4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	@ 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	3332      	adds	r3, #50	@ 0x32
 80043ea:	4a08      	ldr	r2, [pc, #32]	@ (800440c <UART_SetConfig+0x2d4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 0207 	and.w	r2, r3, #7
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4422      	add	r2, r4
 80043fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004400:	e106      	b.n	8004610 <UART_SetConfig+0x4d8>
 8004402:	bf00      	nop
 8004404:	40011000 	.word	0x40011000
 8004408:	40011400 	.word	0x40011400
 800440c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800441a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800441e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004422:	4642      	mov	r2, r8
 8004424:	464b      	mov	r3, r9
 8004426:	1891      	adds	r1, r2, r2
 8004428:	6239      	str	r1, [r7, #32]
 800442a:	415b      	adcs	r3, r3
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
 800442e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004432:	4641      	mov	r1, r8
 8004434:	1854      	adds	r4, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb43 0501 	adc.w	r5, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	00eb      	lsls	r3, r5, #3
 8004446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	4643      	mov	r3, r8
 8004452:	18e3      	adds	r3, r4, r3
 8004454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004458:	464b      	mov	r3, r9
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800446e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800447e:	4629      	mov	r1, r5
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4621      	mov	r1, r4
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004490:	f7fc fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b60      	ldr	r3, [pc, #384]	@ (800461c <UART_SetConfig+0x4e4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	61b9      	str	r1, [r7, #24]
 80044bc:	415b      	adcs	r3, r3
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6139      	str	r1, [r7, #16]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800450e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800451c:	4649      	mov	r1, r9
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004526:	4641      	mov	r1, r8
 8004528:	008a      	lsls	r2, r1, #2
 800452a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800452e:	f7fc fbab 	bl	8000c88 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4611      	mov	r1, r2
 8004538:	4b38      	ldr	r3, [pc, #224]	@ (800461c <UART_SetConfig+0x4e4>)
 800453a:	fba3 2301 	umull	r2, r3, r3, r1
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2264      	movs	r2, #100	@ 0x64
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	1acb      	subs	r3, r1, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	@ 0x32
 800454c:	4a33      	ldr	r2, [pc, #204]	@ (800461c <UART_SetConfig+0x4e4>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004558:	441c      	add	r4, r3
 800455a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455e:	2200      	movs	r2, #0
 8004560:	673b      	str	r3, [r7, #112]	@ 0x70
 8004562:	677a      	str	r2, [r7, #116]	@ 0x74
 8004564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	415b      	adcs	r3, r3
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004578:	4641      	mov	r1, r8
 800457a:	1851      	adds	r1, r2, r1
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	4649      	mov	r1, r9
 8004580:	414b      	adcs	r3, r1
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004590:	4659      	mov	r1, fp
 8004592:	00cb      	lsls	r3, r1, #3
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800459a:	4651      	mov	r1, sl
 800459c:	00ca      	lsls	r2, r1, #3
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	4642      	mov	r2, r8
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045aa:	464b      	mov	r3, r9
 80045ac:	460a      	mov	r2, r1
 80045ae:	eb42 0303 	adc.w	r3, r2, r3
 80045b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80045be:	667a      	str	r2, [r7, #100]	@ 0x64
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045cc:	4649      	mov	r1, r9
 80045ce:	008b      	lsls	r3, r1, #2
 80045d0:	4641      	mov	r1, r8
 80045d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d6:	4641      	mov	r1, r8
 80045d8:	008a      	lsls	r2, r1, #2
 80045da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045de:	f7fc fb53 	bl	8000c88 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <UART_SetConfig+0x4e4>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	@ 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	3332      	adds	r3, #50	@ 0x32
 80045fa:	4a08      	ldr	r2, [pc, #32]	@ (800461c <UART_SetConfig+0x4e4>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4422      	add	r2, r4
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004616:	46bd      	mov	sp, r7
 8004618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461c:	51eb851f 	.word	0x51eb851f

08004620 <sniprintf>:
 8004620:	b40c      	push	{r2, r3}
 8004622:	b530      	push	{r4, r5, lr}
 8004624:	4b17      	ldr	r3, [pc, #92]	@ (8004684 <sniprintf+0x64>)
 8004626:	1e0c      	subs	r4, r1, #0
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	b09d      	sub	sp, #116	@ 0x74
 800462c:	da08      	bge.n	8004640 <sniprintf+0x20>
 800462e:	238b      	movs	r3, #139	@ 0x8b
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	b01d      	add	sp, #116	@ 0x74
 8004638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800463c:	b002      	add	sp, #8
 800463e:	4770      	bx	lr
 8004640:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004644:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004648:	bf14      	ite	ne
 800464a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800464e:	4623      	moveq	r3, r4
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	9307      	str	r3, [sp, #28]
 8004654:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004658:	9002      	str	r0, [sp, #8]
 800465a:	9006      	str	r0, [sp, #24]
 800465c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004660:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004662:	ab21      	add	r3, sp, #132	@ 0x84
 8004664:	a902      	add	r1, sp, #8
 8004666:	4628      	mov	r0, r5
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	f000 f995 	bl	8004998 <_svfiprintf_r>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	bfbc      	itt	lt
 8004672:	238b      	movlt	r3, #139	@ 0x8b
 8004674:	602b      	strlt	r3, [r5, #0]
 8004676:	2c00      	cmp	r4, #0
 8004678:	d0dd      	beq.n	8004636 <sniprintf+0x16>
 800467a:	9b02      	ldr	r3, [sp, #8]
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e7d9      	b.n	8004636 <sniprintf+0x16>
 8004682:	bf00      	nop
 8004684:	20000010 	.word	0x20000010

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	@ (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000010 	.word	0x20000010

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4d0d      	ldr	r5, [pc, #52]	@ (80046dc <__libc_init_array+0x38>)
 80046a8:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2600      	movs	r6, #0
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	4d0b      	ldr	r5, [pc, #44]	@ (80046e4 <__libc_init_array+0x40>)
 80046b6:	4c0c      	ldr	r4, [pc, #48]	@ (80046e8 <__libc_init_array+0x44>)
 80046b8:	f001 fe52 	bl	8006360 <_init>
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	2600      	movs	r6, #0
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	080064d8 	.word	0x080064d8
 80046e0:	080064d8 	.word	0x080064d8
 80046e4:	080064d8 	.word	0x080064d8
 80046e8:	080064dc 	.word	0x080064dc

080046ec <__retarget_lock_acquire_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_release_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <_free_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4605      	mov	r5, r0
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d041      	beq.n	800477c <_free_r+0x8c>
 80046f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fc:	1f0c      	subs	r4, r1, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	18e4      	addlt	r4, r4, r3
 8004704:	f000 f8e0 	bl	80048c8 <__malloc_lock>
 8004708:	4a1d      	ldr	r2, [pc, #116]	@ (8004780 <_free_r+0x90>)
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	b933      	cbnz	r3, 800471c <_free_r+0x2c>
 800470e:	6063      	str	r3, [r4, #4]
 8004710:	6014      	str	r4, [r2, #0]
 8004712:	4628      	mov	r0, r5
 8004714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004718:	f000 b8dc 	b.w	80048d4 <__malloc_unlock>
 800471c:	42a3      	cmp	r3, r4
 800471e:	d908      	bls.n	8004732 <_free_r+0x42>
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	1821      	adds	r1, r4, r0
 8004724:	428b      	cmp	r3, r1
 8004726:	bf01      	itttt	eq
 8004728:	6819      	ldreq	r1, [r3, #0]
 800472a:	685b      	ldreq	r3, [r3, #4]
 800472c:	1809      	addeq	r1, r1, r0
 800472e:	6021      	streq	r1, [r4, #0]
 8004730:	e7ed      	b.n	800470e <_free_r+0x1e>
 8004732:	461a      	mov	r2, r3
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b10b      	cbz	r3, 800473c <_free_r+0x4c>
 8004738:	42a3      	cmp	r3, r4
 800473a:	d9fa      	bls.n	8004732 <_free_r+0x42>
 800473c:	6811      	ldr	r1, [r2, #0]
 800473e:	1850      	adds	r0, r2, r1
 8004740:	42a0      	cmp	r0, r4
 8004742:	d10b      	bne.n	800475c <_free_r+0x6c>
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	4401      	add	r1, r0
 8004748:	1850      	adds	r0, r2, r1
 800474a:	4283      	cmp	r3, r0
 800474c:	6011      	str	r1, [r2, #0]
 800474e:	d1e0      	bne.n	8004712 <_free_r+0x22>
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	6053      	str	r3, [r2, #4]
 8004756:	4408      	add	r0, r1
 8004758:	6010      	str	r0, [r2, #0]
 800475a:	e7da      	b.n	8004712 <_free_r+0x22>
 800475c:	d902      	bls.n	8004764 <_free_r+0x74>
 800475e:	230c      	movs	r3, #12
 8004760:	602b      	str	r3, [r5, #0]
 8004762:	e7d6      	b.n	8004712 <_free_r+0x22>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	1821      	adds	r1, r4, r0
 8004768:	428b      	cmp	r3, r1
 800476a:	bf04      	itt	eq
 800476c:	6819      	ldreq	r1, [r3, #0]
 800476e:	685b      	ldreq	r3, [r3, #4]
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	bf04      	itt	eq
 8004774:	1809      	addeq	r1, r1, r0
 8004776:	6021      	streq	r1, [r4, #0]
 8004778:	6054      	str	r4, [r2, #4]
 800477a:	e7ca      	b.n	8004712 <_free_r+0x22>
 800477c:	bd38      	pop	{r3, r4, r5, pc}
 800477e:	bf00      	nop
 8004780:	20000358 	.word	0x20000358

08004784 <sbrk_aligned>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4e0f      	ldr	r6, [pc, #60]	@ (80047c4 <sbrk_aligned+0x40>)
 8004788:	460c      	mov	r4, r1
 800478a:	6831      	ldr	r1, [r6, #0]
 800478c:	4605      	mov	r5, r0
 800478e:	b911      	cbnz	r1, 8004796 <sbrk_aligned+0x12>
 8004790:	f000 fba6 	bl	8004ee0 <_sbrk_r>
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f000 fba1 	bl	8004ee0 <_sbrk_r>
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	d103      	bne.n	80047aa <sbrk_aligned+0x26>
 80047a2:	f04f 34ff 	mov.w	r4, #4294967295
 80047a6:	4620      	mov	r0, r4
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	1cc4      	adds	r4, r0, #3
 80047ac:	f024 0403 	bic.w	r4, r4, #3
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d0f8      	beq.n	80047a6 <sbrk_aligned+0x22>
 80047b4:	1a21      	subs	r1, r4, r0
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fb92 	bl	8004ee0 <_sbrk_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	d1f2      	bne.n	80047a6 <sbrk_aligned+0x22>
 80047c0:	e7ef      	b.n	80047a2 <sbrk_aligned+0x1e>
 80047c2:	bf00      	nop
 80047c4:	20000354 	.word	0x20000354

080047c8 <_malloc_r>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	1ccd      	adds	r5, r1, #3
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	3508      	adds	r5, #8
 80047d4:	2d0c      	cmp	r5, #12
 80047d6:	bf38      	it	cc
 80047d8:	250c      	movcc	r5, #12
 80047da:	2d00      	cmp	r5, #0
 80047dc:	4606      	mov	r6, r0
 80047de:	db01      	blt.n	80047e4 <_malloc_r+0x1c>
 80047e0:	42a9      	cmp	r1, r5
 80047e2:	d904      	bls.n	80047ee <_malloc_r+0x26>
 80047e4:	230c      	movs	r3, #12
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	2000      	movs	r0, #0
 80047ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048c4 <_malloc_r+0xfc>
 80047f2:	f000 f869 	bl	80048c8 <__malloc_lock>
 80047f6:	f8d8 3000 	ldr.w	r3, [r8]
 80047fa:	461c      	mov	r4, r3
 80047fc:	bb44      	cbnz	r4, 8004850 <_malloc_r+0x88>
 80047fe:	4629      	mov	r1, r5
 8004800:	4630      	mov	r0, r6
 8004802:	f7ff ffbf 	bl	8004784 <sbrk_aligned>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	4604      	mov	r4, r0
 800480a:	d158      	bne.n	80048be <_malloc_r+0xf6>
 800480c:	f8d8 4000 	ldr.w	r4, [r8]
 8004810:	4627      	mov	r7, r4
 8004812:	2f00      	cmp	r7, #0
 8004814:	d143      	bne.n	800489e <_malloc_r+0xd6>
 8004816:	2c00      	cmp	r4, #0
 8004818:	d04b      	beq.n	80048b2 <_malloc_r+0xea>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	eb04 0903 	add.w	r9, r4, r3
 8004824:	f000 fb5c 	bl	8004ee0 <_sbrk_r>
 8004828:	4581      	cmp	r9, r0
 800482a:	d142      	bne.n	80048b2 <_malloc_r+0xea>
 800482c:	6821      	ldr	r1, [r4, #0]
 800482e:	1a6d      	subs	r5, r5, r1
 8004830:	4629      	mov	r1, r5
 8004832:	4630      	mov	r0, r6
 8004834:	f7ff ffa6 	bl	8004784 <sbrk_aligned>
 8004838:	3001      	adds	r0, #1
 800483a:	d03a      	beq.n	80048b2 <_malloc_r+0xea>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	442b      	add	r3, r5
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	f8d8 3000 	ldr.w	r3, [r8]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	bb62      	cbnz	r2, 80048a4 <_malloc_r+0xdc>
 800484a:	f8c8 7000 	str.w	r7, [r8]
 800484e:	e00f      	b.n	8004870 <_malloc_r+0xa8>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	1b52      	subs	r2, r2, r5
 8004854:	d420      	bmi.n	8004898 <_malloc_r+0xd0>
 8004856:	2a0b      	cmp	r2, #11
 8004858:	d917      	bls.n	800488a <_malloc_r+0xc2>
 800485a:	1961      	adds	r1, r4, r5
 800485c:	42a3      	cmp	r3, r4
 800485e:	6025      	str	r5, [r4, #0]
 8004860:	bf18      	it	ne
 8004862:	6059      	strne	r1, [r3, #4]
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	bf08      	it	eq
 8004868:	f8c8 1000 	streq.w	r1, [r8]
 800486c:	5162      	str	r2, [r4, r5]
 800486e:	604b      	str	r3, [r1, #4]
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f82f 	bl	80048d4 <__malloc_unlock>
 8004876:	f104 000b 	add.w	r0, r4, #11
 800487a:	1d23      	adds	r3, r4, #4
 800487c:	f020 0007 	bic.w	r0, r0, #7
 8004880:	1ac2      	subs	r2, r0, r3
 8004882:	bf1c      	itt	ne
 8004884:	1a1b      	subne	r3, r3, r0
 8004886:	50a3      	strne	r3, [r4, r2]
 8004888:	e7af      	b.n	80047ea <_malloc_r+0x22>
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	bf0c      	ite	eq
 8004890:	f8c8 2000 	streq.w	r2, [r8]
 8004894:	605a      	strne	r2, [r3, #4]
 8004896:	e7eb      	b.n	8004870 <_malloc_r+0xa8>
 8004898:	4623      	mov	r3, r4
 800489a:	6864      	ldr	r4, [r4, #4]
 800489c:	e7ae      	b.n	80047fc <_malloc_r+0x34>
 800489e:	463c      	mov	r4, r7
 80048a0:	687f      	ldr	r7, [r7, #4]
 80048a2:	e7b6      	b.n	8004812 <_malloc_r+0x4a>
 80048a4:	461a      	mov	r2, r3
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d1fb      	bne.n	80048a4 <_malloc_r+0xdc>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	e7de      	b.n	8004870 <_malloc_r+0xa8>
 80048b2:	230c      	movs	r3, #12
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	4630      	mov	r0, r6
 80048b8:	f000 f80c 	bl	80048d4 <__malloc_unlock>
 80048bc:	e794      	b.n	80047e8 <_malloc_r+0x20>
 80048be:	6005      	str	r5, [r0, #0]
 80048c0:	e7d6      	b.n	8004870 <_malloc_r+0xa8>
 80048c2:	bf00      	nop
 80048c4:	20000358 	.word	0x20000358

080048c8 <__malloc_lock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__malloc_lock+0x8>)
 80048ca:	f7ff bf0f 	b.w	80046ec <__retarget_lock_acquire_recursive>
 80048ce:	bf00      	nop
 80048d0:	20000350 	.word	0x20000350

080048d4 <__malloc_unlock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	@ (80048dc <__malloc_unlock+0x8>)
 80048d6:	f7ff bf0a 	b.w	80046ee <__retarget_lock_release_recursive>
 80048da:	bf00      	nop
 80048dc:	20000350 	.word	0x20000350

080048e0 <__ssputs_r>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	688e      	ldr	r6, [r1, #8]
 80048e6:	461f      	mov	r7, r3
 80048e8:	42be      	cmp	r6, r7
 80048ea:	680b      	ldr	r3, [r1, #0]
 80048ec:	4682      	mov	sl, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4690      	mov	r8, r2
 80048f2:	d82d      	bhi.n	8004950 <__ssputs_r+0x70>
 80048f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048fc:	d026      	beq.n	800494c <__ssputs_r+0x6c>
 80048fe:	6965      	ldr	r5, [r4, #20]
 8004900:	6909      	ldr	r1, [r1, #16]
 8004902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004906:	eba3 0901 	sub.w	r9, r3, r1
 800490a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800490e:	1c7b      	adds	r3, r7, #1
 8004910:	444b      	add	r3, r9
 8004912:	106d      	asrs	r5, r5, #1
 8004914:	429d      	cmp	r5, r3
 8004916:	bf38      	it	cc
 8004918:	461d      	movcc	r5, r3
 800491a:	0553      	lsls	r3, r2, #21
 800491c:	d527      	bpl.n	800496e <__ssputs_r+0x8e>
 800491e:	4629      	mov	r1, r5
 8004920:	f7ff ff52 	bl	80047c8 <_malloc_r>
 8004924:	4606      	mov	r6, r0
 8004926:	b360      	cbz	r0, 8004982 <__ssputs_r+0xa2>
 8004928:	6921      	ldr	r1, [r4, #16]
 800492a:	464a      	mov	r2, r9
 800492c:	f000 fae8 	bl	8004f00 <memcpy>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	6126      	str	r6, [r4, #16]
 800493e:	6165      	str	r5, [r4, #20]
 8004940:	444e      	add	r6, r9
 8004942:	eba5 0509 	sub.w	r5, r5, r9
 8004946:	6026      	str	r6, [r4, #0]
 8004948:	60a5      	str	r5, [r4, #8]
 800494a:	463e      	mov	r6, r7
 800494c:	42be      	cmp	r6, r7
 800494e:	d900      	bls.n	8004952 <__ssputs_r+0x72>
 8004950:	463e      	mov	r6, r7
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	4632      	mov	r2, r6
 8004956:	4641      	mov	r1, r8
 8004958:	f000 faa8 	bl	8004eac <memmove>
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	1b9b      	subs	r3, r3, r6
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	4433      	add	r3, r6
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	2000      	movs	r0, #0
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496e:	462a      	mov	r2, r5
 8004970:	f000 fad4 	bl	8004f1c <_realloc_r>
 8004974:	4606      	mov	r6, r0
 8004976:	2800      	cmp	r0, #0
 8004978:	d1e0      	bne.n	800493c <__ssputs_r+0x5c>
 800497a:	6921      	ldr	r1, [r4, #16]
 800497c:	4650      	mov	r0, sl
 800497e:	f7ff feb7 	bl	80046f0 <_free_r>
 8004982:	230c      	movs	r3, #12
 8004984:	f8ca 3000 	str.w	r3, [sl]
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e7e9      	b.n	800496a <__ssputs_r+0x8a>
	...

08004998 <_svfiprintf_r>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	4698      	mov	r8, r3
 800499e:	898b      	ldrh	r3, [r1, #12]
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	b09d      	sub	sp, #116	@ 0x74
 80049a4:	4607      	mov	r7, r0
 80049a6:	460d      	mov	r5, r1
 80049a8:	4614      	mov	r4, r2
 80049aa:	d510      	bpl.n	80049ce <_svfiprintf_r+0x36>
 80049ac:	690b      	ldr	r3, [r1, #16]
 80049ae:	b973      	cbnz	r3, 80049ce <_svfiprintf_r+0x36>
 80049b0:	2140      	movs	r1, #64	@ 0x40
 80049b2:	f7ff ff09 	bl	80047c8 <_malloc_r>
 80049b6:	6028      	str	r0, [r5, #0]
 80049b8:	6128      	str	r0, [r5, #16]
 80049ba:	b930      	cbnz	r0, 80049ca <_svfiprintf_r+0x32>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	b01d      	add	sp, #116	@ 0x74
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	2340      	movs	r3, #64	@ 0x40
 80049cc:	616b      	str	r3, [r5, #20]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d2:	2320      	movs	r3, #32
 80049d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049dc:	2330      	movs	r3, #48	@ 0x30
 80049de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b7c <_svfiprintf_r+0x1e4>
 80049e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049e6:	f04f 0901 	mov.w	r9, #1
 80049ea:	4623      	mov	r3, r4
 80049ec:	469a      	mov	sl, r3
 80049ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f2:	b10a      	cbz	r2, 80049f8 <_svfiprintf_r+0x60>
 80049f4:	2a25      	cmp	r2, #37	@ 0x25
 80049f6:	d1f9      	bne.n	80049ec <_svfiprintf_r+0x54>
 80049f8:	ebba 0b04 	subs.w	fp, sl, r4
 80049fc:	d00b      	beq.n	8004a16 <_svfiprintf_r+0x7e>
 80049fe:	465b      	mov	r3, fp
 8004a00:	4622      	mov	r2, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	4638      	mov	r0, r7
 8004a06:	f7ff ff6b 	bl	80048e0 <__ssputs_r>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f000 80a7 	beq.w	8004b5e <_svfiprintf_r+0x1c6>
 8004a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a12:	445a      	add	r2, fp
 8004a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a16:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 809f 	beq.w	8004b5e <_svfiprintf_r+0x1c6>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2a:	f10a 0a01 	add.w	sl, sl, #1
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	9307      	str	r3, [sp, #28]
 8004a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a38:	4654      	mov	r4, sl
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a40:	484e      	ldr	r0, [pc, #312]	@ (8004b7c <_svfiprintf_r+0x1e4>)
 8004a42:	f7fb fbed 	bl	8000220 <memchr>
 8004a46:	9a04      	ldr	r2, [sp, #16]
 8004a48:	b9d8      	cbnz	r0, 8004a82 <_svfiprintf_r+0xea>
 8004a4a:	06d0      	lsls	r0, r2, #27
 8004a4c:	bf44      	itt	mi
 8004a4e:	2320      	movmi	r3, #32
 8004a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a54:	0711      	lsls	r1, r2, #28
 8004a56:	bf44      	itt	mi
 8004a58:	232b      	movmi	r3, #43	@ 0x2b
 8004a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a64:	d015      	beq.n	8004a92 <_svfiprintf_r+0xfa>
 8004a66:	9a07      	ldr	r2, [sp, #28]
 8004a68:	4654      	mov	r4, sl
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4621      	mov	r1, r4
 8004a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a76:	3b30      	subs	r3, #48	@ 0x30
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d94b      	bls.n	8004b14 <_svfiprintf_r+0x17c>
 8004a7c:	b1b0      	cbz	r0, 8004aac <_svfiprintf_r+0x114>
 8004a7e:	9207      	str	r2, [sp, #28]
 8004a80:	e014      	b.n	8004aac <_svfiprintf_r+0x114>
 8004a82:	eba0 0308 	sub.w	r3, r0, r8
 8004a86:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	e7d2      	b.n	8004a38 <_svfiprintf_r+0xa0>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9103      	str	r1, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbb      	ittet	lt
 8004a9e:	425b      	neglt	r3, r3
 8004aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa4:	9307      	strge	r3, [sp, #28]
 8004aa6:	9307      	strlt	r3, [sp, #28]
 8004aa8:	bfb8      	it	lt
 8004aaa:	9204      	strlt	r2, [sp, #16]
 8004aac:	7823      	ldrb	r3, [r4, #0]
 8004aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab0:	d10a      	bne.n	8004ac8 <_svfiprintf_r+0x130>
 8004ab2:	7863      	ldrb	r3, [r4, #1]
 8004ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab6:	d132      	bne.n	8004b1e <_svfiprintf_r+0x186>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	9203      	str	r2, [sp, #12]
 8004ac0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac4:	3402      	adds	r4, #2
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b8c <_svfiprintf_r+0x1f4>
 8004acc:	7821      	ldrb	r1, [r4, #0]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	f7fb fba5 	bl	8000220 <memchr>
 8004ad6:	b138      	cbz	r0, 8004ae8 <_svfiprintf_r+0x150>
 8004ad8:	9b04      	ldr	r3, [sp, #16]
 8004ada:	eba0 000a 	sub.w	r0, r0, sl
 8004ade:	2240      	movs	r2, #64	@ 0x40
 8004ae0:	4082      	lsls	r2, r0
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aec:	4824      	ldr	r0, [pc, #144]	@ (8004b80 <_svfiprintf_r+0x1e8>)
 8004aee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af2:	2206      	movs	r2, #6
 8004af4:	f7fb fb94 	bl	8000220 <memchr>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d036      	beq.n	8004b6a <_svfiprintf_r+0x1d2>
 8004afc:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <_svfiprintf_r+0x1ec>)
 8004afe:	bb1b      	cbnz	r3, 8004b48 <_svfiprintf_r+0x1b0>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	3307      	adds	r3, #7
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	3308      	adds	r3, #8
 8004b0a:	9303      	str	r3, [sp, #12]
 8004b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b0e:	4433      	add	r3, r6
 8004b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b12:	e76a      	b.n	80049ea <_svfiprintf_r+0x52>
 8004b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b18:	460c      	mov	r4, r1
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	e7a8      	b.n	8004a70 <_svfiprintf_r+0xd8>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	3401      	adds	r4, #1
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 0c0a 	mov.w	ip, #10
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b30:	3a30      	subs	r2, #48	@ 0x30
 8004b32:	2a09      	cmp	r2, #9
 8004b34:	d903      	bls.n	8004b3e <_svfiprintf_r+0x1a6>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0c6      	beq.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3a:	9105      	str	r1, [sp, #20]
 8004b3c:	e7c4      	b.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b42:	4604      	mov	r4, r0
 8004b44:	2301      	movs	r3, #1
 8004b46:	e7f0      	b.n	8004b2a <_svfiprintf_r+0x192>
 8004b48:	ab03      	add	r3, sp, #12
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <_svfiprintf_r+0x1f0>)
 8004b50:	a904      	add	r1, sp, #16
 8004b52:	4638      	mov	r0, r7
 8004b54:	f3af 8000 	nop.w
 8004b58:	1c42      	adds	r2, r0, #1
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	d1d6      	bne.n	8004b0c <_svfiprintf_r+0x174>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	065b      	lsls	r3, r3, #25
 8004b62:	f53f af2d 	bmi.w	80049c0 <_svfiprintf_r+0x28>
 8004b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b68:	e72c      	b.n	80049c4 <_svfiprintf_r+0x2c>
 8004b6a:	ab03      	add	r3, sp, #12
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <_svfiprintf_r+0x1f0>)
 8004b72:	a904      	add	r1, sp, #16
 8004b74:	4638      	mov	r0, r7
 8004b76:	f000 f879 	bl	8004c6c <_printf_i>
 8004b7a:	e7ed      	b.n	8004b58 <_svfiprintf_r+0x1c0>
 8004b7c:	080063f8 	.word	0x080063f8
 8004b80:	08006402 	.word	0x08006402
 8004b84:	00000000 	.word	0x00000000
 8004b88:	080048e1 	.word	0x080048e1
 8004b8c:	080063fe 	.word	0x080063fe

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4698      	mov	r8, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bfb8      	it	lt
 8004ba4:	4613      	movlt	r3, r2
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bac:	4607      	mov	r7, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc26      	bgt.n	8004c26 <_printf_common+0x96>
 8004bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	3b00      	subs	r3, #0
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d42b      	bmi.n	8004c40 <_printf_common+0xb0>
 8004be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bec:	4641      	mov	r1, r8
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c8      	blx	r9
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d01e      	beq.n	8004c34 <_printf_common+0xa4>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf02      	ittt	eq
 8004c02:	68e5      	ldreq	r5, [r4, #12]
 8004c04:	6833      	ldreq	r3, [r6, #0]
 8004c06:	1aed      	subeq	r5, r5, r3
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	bf0c      	ite	eq
 8004c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c10:	2500      	movne	r5, #0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	bfc4      	itt	gt
 8004c16:	1a9b      	subgt	r3, r3, r2
 8004c18:	18ed      	addgt	r5, r5, r3
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	341a      	adds	r4, #26
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	d11a      	bne.n	8004c58 <_printf_common+0xc8>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e008      	b.n	8004c38 <_printf_common+0xa8>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	47c8      	blx	r9
 8004c30:	3001      	adds	r0, #1
 8004c32:	d103      	bne.n	8004c3c <_printf_common+0xac>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7c6      	b.n	8004bce <_printf_common+0x3e>
 8004c40:	18e1      	adds	r1, r4, r3
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	2030      	movs	r0, #48	@ 0x30
 8004c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c4a:	4422      	add	r2, r4
 8004c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c54:	3302      	adds	r3, #2
 8004c56:	e7c7      	b.n	8004be8 <_printf_common+0x58>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	4638      	mov	r0, r7
 8004c60:	47c8      	blx	r9
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0e6      	beq.n	8004c34 <_printf_common+0xa4>
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7d9      	b.n	8004c1e <_printf_common+0x8e>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	7e0f      	ldrb	r7, [r1, #24]
 8004c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c74:	2f78      	cmp	r7, #120	@ 0x78
 8004c76:	4691      	mov	r9, r2
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c82:	d807      	bhi.n	8004c94 <_printf_i+0x28>
 8004c84:	2f62      	cmp	r7, #98	@ 0x62
 8004c86:	d80a      	bhi.n	8004c9e <_printf_i+0x32>
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f000 80d2 	beq.w	8004e32 <_printf_i+0x1c6>
 8004c8e:	2f58      	cmp	r7, #88	@ 0x58
 8004c90:	f000 80b9 	beq.w	8004e06 <_printf_i+0x19a>
 8004c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c9c:	e03a      	b.n	8004d14 <_printf_i+0xa8>
 8004c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ca2:	2b15      	cmp	r3, #21
 8004ca4:	d8f6      	bhi.n	8004c94 <_printf_i+0x28>
 8004ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8004cac <_printf_i+0x40>)
 8004ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004c95 	.word	0x08004c95
 8004cb8:	08004c95 	.word	0x08004c95
 8004cbc:	08004c95 	.word	0x08004c95
 8004cc0:	08004c95 	.word	0x08004c95
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c95 	.word	0x08004c95
 8004ccc:	08004c95 	.word	0x08004c95
 8004cd0:	08004c95 	.word	0x08004c95
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08004e19 	.word	0x08004e19
 8004cdc:	08004d43 	.word	0x08004d43
 8004ce0:	08004dd3 	.word	0x08004dd3
 8004ce4:	08004c95 	.word	0x08004c95
 8004ce8:	08004c95 	.word	0x08004c95
 8004cec:	08004e3b 	.word	0x08004e3b
 8004cf0:	08004c95 	.word	0x08004c95
 8004cf4:	08004d43 	.word	0x08004d43
 8004cf8:	08004c95 	.word	0x08004c95
 8004cfc:	08004c95 	.word	0x08004c95
 8004d00:	08004ddb 	.word	0x08004ddb
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6032      	str	r2, [r6, #0]
 8004d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d14:	2301      	movs	r3, #1
 8004d16:	e09d      	b.n	8004e54 <_printf_i+0x1e8>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1d19      	adds	r1, r3, #4
 8004d1e:	6031      	str	r1, [r6, #0]
 8004d20:	0606      	lsls	r6, r0, #24
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0xbc>
 8004d24:	681d      	ldr	r5, [r3, #0]
 8004d26:	e003      	b.n	8004d30 <_printf_i+0xc4>
 8004d28:	0645      	lsls	r5, r0, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0xb8>
 8004d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	da03      	bge.n	8004d3c <_printf_i+0xd0>
 8004d34:	232d      	movs	r3, #45	@ 0x2d
 8004d36:	426d      	negs	r5, r5
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d3c:	4859      	ldr	r0, [pc, #356]	@ (8004ea4 <_printf_i+0x238>)
 8004d3e:	230a      	movs	r3, #10
 8004d40:	e011      	b.n	8004d66 <_printf_i+0xfa>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	0608      	lsls	r0, r1, #24
 8004d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d4c:	d402      	bmi.n	8004d54 <_printf_i+0xe8>
 8004d4e:	0649      	lsls	r1, r1, #25
 8004d50:	bf48      	it	mi
 8004d52:	b2ad      	uxthmi	r5, r5
 8004d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d56:	4853      	ldr	r0, [pc, #332]	@ (8004ea4 <_printf_i+0x238>)
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	bf14      	ite	ne
 8004d5c:	230a      	movne	r3, #10
 8004d5e:	2308      	moveq	r3, #8
 8004d60:	2100      	movs	r1, #0
 8004d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d66:	6866      	ldr	r6, [r4, #4]
 8004d68:	60a6      	str	r6, [r4, #8]
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	bfa2      	ittt	ge
 8004d6e:	6821      	ldrge	r1, [r4, #0]
 8004d70:	f021 0104 	bicge.w	r1, r1, #4
 8004d74:	6021      	strge	r1, [r4, #0]
 8004d76:	b90d      	cbnz	r5, 8004d7c <_printf_i+0x110>
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	d04b      	beq.n	8004e14 <_printf_i+0x1a8>
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d82:	fb03 5711 	mls	r7, r3, r1, r5
 8004d86:	5dc7      	ldrb	r7, [r0, r7]
 8004d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d8c:	462f      	mov	r7, r5
 8004d8e:	42bb      	cmp	r3, r7
 8004d90:	460d      	mov	r5, r1
 8004d92:	d9f4      	bls.n	8004d7e <_printf_i+0x112>
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10b      	bne.n	8004db0 <_printf_i+0x144>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07df      	lsls	r7, r3, #31
 8004d9c:	d508      	bpl.n	8004db0 <_printf_i+0x144>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	4299      	cmp	r1, r3
 8004da4:	bfde      	ittt	le
 8004da6:	2330      	movle	r3, #48	@ 0x30
 8004da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004db0:	1b92      	subs	r2, r2, r6
 8004db2:	6122      	str	r2, [r4, #16]
 8004db4:	f8cd a000 	str.w	sl, [sp]
 8004db8:	464b      	mov	r3, r9
 8004dba:	aa03      	add	r2, sp, #12
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	f7ff fee6 	bl	8004b90 <_printf_common>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d14a      	bne.n	8004e5e <_printf_i+0x1f2>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	b004      	add	sp, #16
 8004dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	f043 0320 	orr.w	r3, r3, #32
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	4833      	ldr	r0, [pc, #204]	@ (8004ea8 <_printf_i+0x23c>)
 8004ddc:	2778      	movs	r7, #120	@ 0x78
 8004dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	6831      	ldr	r1, [r6, #0]
 8004de6:	061f      	lsls	r7, r3, #24
 8004de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dec:	d402      	bmi.n	8004df4 <_printf_i+0x188>
 8004dee:	065f      	lsls	r7, r3, #25
 8004df0:	bf48      	it	mi
 8004df2:	b2ad      	uxthmi	r5, r5
 8004df4:	6031      	str	r1, [r6, #0]
 8004df6:	07d9      	lsls	r1, r3, #31
 8004df8:	bf44      	itt	mi
 8004dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004dfe:	6023      	strmi	r3, [r4, #0]
 8004e00:	b11d      	cbz	r5, 8004e0a <_printf_i+0x19e>
 8004e02:	2310      	movs	r3, #16
 8004e04:	e7ac      	b.n	8004d60 <_printf_i+0xf4>
 8004e06:	4827      	ldr	r0, [pc, #156]	@ (8004ea4 <_printf_i+0x238>)
 8004e08:	e7e9      	b.n	8004dde <_printf_i+0x172>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f023 0320 	bic.w	r3, r3, #32
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	e7f6      	b.n	8004e02 <_printf_i+0x196>
 8004e14:	4616      	mov	r6, r2
 8004e16:	e7bd      	b.n	8004d94 <_printf_i+0x128>
 8004e18:	6833      	ldr	r3, [r6, #0]
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	6961      	ldr	r1, [r4, #20]
 8004e1e:	1d18      	adds	r0, r3, #4
 8004e20:	6030      	str	r0, [r6, #0]
 8004e22:	062e      	lsls	r6, r5, #24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0x1c0>
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0x1c6>
 8004e2c:	0668      	lsls	r0, r5, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0x1bc>
 8004e30:	8019      	strh	r1, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	4616      	mov	r6, r2
 8004e38:	e7bc      	b.n	8004db4 <_printf_i+0x148>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	6032      	str	r2, [r6, #0]
 8004e40:	681e      	ldr	r6, [r3, #0]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7fb f9ea 	bl	8000220 <memchr>
 8004e4c:	b108      	cbz	r0, 8004e52 <_printf_i+0x1e6>
 8004e4e:	1b80      	subs	r0, r0, r6
 8004e50:	6060      	str	r0, [r4, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e5c:	e7aa      	b.n	8004db4 <_printf_i+0x148>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	4632      	mov	r2, r6
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	47d0      	blx	sl
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0ad      	beq.n	8004dc8 <_printf_i+0x15c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d413      	bmi.n	8004e9a <_printf_i+0x22e>
 8004e72:	68e0      	ldr	r0, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	4298      	cmp	r0, r3
 8004e78:	bfb8      	it	lt
 8004e7a:	4618      	movlt	r0, r3
 8004e7c:	e7a6      	b.n	8004dcc <_printf_i+0x160>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09d      	beq.n	8004dc8 <_printf_i+0x15c>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9903      	ldr	r1, [sp, #12]
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf2      	bgt.n	8004e7e <_printf_i+0x212>
 8004e98:	e7eb      	b.n	8004e72 <_printf_i+0x206>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	f104 0619 	add.w	r6, r4, #25
 8004ea0:	e7f5      	b.n	8004e8e <_printf_i+0x222>
 8004ea2:	bf00      	nop
 8004ea4:	08006409 	.word	0x08006409
 8004ea8:	0800641a 	.word	0x0800641a

08004eac <memmove>:
 8004eac:	4288      	cmp	r0, r1
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	eb01 0402 	add.w	r4, r1, r2
 8004eb4:	d902      	bls.n	8004ebc <memmove+0x10>
 8004eb6:	4284      	cmp	r4, r0
 8004eb8:	4623      	mov	r3, r4
 8004eba:	d807      	bhi.n	8004ecc <memmove+0x20>
 8004ebc:	1e43      	subs	r3, r0, #1
 8004ebe:	42a1      	cmp	r1, r4
 8004ec0:	d008      	beq.n	8004ed4 <memmove+0x28>
 8004ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eca:	e7f8      	b.n	8004ebe <memmove+0x12>
 8004ecc:	4402      	add	r2, r0
 8004ece:	4601      	mov	r1, r0
 8004ed0:	428a      	cmp	r2, r1
 8004ed2:	d100      	bne.n	8004ed6 <memmove+0x2a>
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ede:	e7f7      	b.n	8004ed0 <memmove+0x24>

08004ee0 <_sbrk_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d06      	ldr	r5, [pc, #24]	@ (8004efc <_sbrk_r+0x1c>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	f7fc fd4e 	bl	800198c <_sbrk>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_sbrk_r+0x1a>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_sbrk_r+0x1a>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	2000034c 	.word	0x2000034c

08004f00 <memcpy>:
 8004f00:	440a      	add	r2, r1
 8004f02:	4291      	cmp	r1, r2
 8004f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f08:	d100      	bne.n	8004f0c <memcpy+0xc>
 8004f0a:	4770      	bx	lr
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f16:	4291      	cmp	r1, r2
 8004f18:	d1f9      	bne.n	8004f0e <memcpy+0xe>
 8004f1a:	bd10      	pop	{r4, pc}

08004f1c <_realloc_r>:
 8004f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	4680      	mov	r8, r0
 8004f22:	4615      	mov	r5, r2
 8004f24:	460c      	mov	r4, r1
 8004f26:	b921      	cbnz	r1, 8004f32 <_realloc_r+0x16>
 8004f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	f7ff bc4b 	b.w	80047c8 <_malloc_r>
 8004f32:	b92a      	cbnz	r2, 8004f40 <_realloc_r+0x24>
 8004f34:	f7ff fbdc 	bl	80046f0 <_free_r>
 8004f38:	2400      	movs	r4, #0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	f000 f81a 	bl	8004f78 <_malloc_usable_size_r>
 8004f44:	4285      	cmp	r5, r0
 8004f46:	4606      	mov	r6, r0
 8004f48:	d802      	bhi.n	8004f50 <_realloc_r+0x34>
 8004f4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f4e:	d8f4      	bhi.n	8004f3a <_realloc_r+0x1e>
 8004f50:	4629      	mov	r1, r5
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fc38 	bl	80047c8 <_malloc_r>
 8004f58:	4607      	mov	r7, r0
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0ec      	beq.n	8004f38 <_realloc_r+0x1c>
 8004f5e:	42b5      	cmp	r5, r6
 8004f60:	462a      	mov	r2, r5
 8004f62:	4621      	mov	r1, r4
 8004f64:	bf28      	it	cs
 8004f66:	4632      	movcs	r2, r6
 8004f68:	f7ff ffca 	bl	8004f00 <memcpy>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f7ff fbbe 	bl	80046f0 <_free_r>
 8004f74:	463c      	mov	r4, r7
 8004f76:	e7e0      	b.n	8004f3a <_realloc_r+0x1e>

08004f78 <_malloc_usable_size_r>:
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f18      	subs	r0, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbc      	itt	lt
 8004f82:	580b      	ldrlt	r3, [r1, r0]
 8004f84:	18c0      	addlt	r0, r0, r3
 8004f86:	4770      	bx	lr

08004f88 <atan2>:
 8004f88:	f000 b982 	b.w	8005290 <__ieee754_atan2>

08004f8c <pow>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	ed2d 8b02 	vpush	{d8}
 8004f92:	eeb0 8a40 	vmov.f32	s16, s0
 8004f96:	eef0 8a60 	vmov.f32	s17, s1
 8004f9a:	ec55 4b11 	vmov	r4, r5, d1
 8004f9e:	f000 fa3f 	bl	8005420 <__ieee754_pow>
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	ec57 6b10 	vmov	r6, r7, d0
 8004fae:	f7fb fddd 	bl	8000b6c <__aeabi_dcmpun>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d13b      	bne.n	800502e <pow+0xa2>
 8004fb6:	ec51 0b18 	vmov	r0, r1, d8
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f7fb fda3 	bl	8000b08 <__aeabi_dcmpeq>
 8004fc2:	b1b8      	cbz	r0, 8004ff4 <pow+0x68>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4629      	mov	r1, r5
 8004fcc:	f7fb fd9c 	bl	8000b08 <__aeabi_dcmpeq>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d146      	bne.n	8005062 <pow+0xd6>
 8004fd4:	ec45 4b10 	vmov	d0, r4, r5
 8004fd8:	f000 f874 	bl	80050c4 <finite>
 8004fdc:	b338      	cbz	r0, 800502e <pow+0xa2>
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7fb fd99 	bl	8000b1c <__aeabi_dcmplt>
 8004fea:	b300      	cbz	r0, 800502e <pow+0xa2>
 8004fec:	f7ff fb54 	bl	8004698 <__errno>
 8004ff0:	2322      	movs	r3, #34	@ 0x22
 8004ff2:	e01b      	b.n	800502c <pow+0xa0>
 8004ff4:	ec47 6b10 	vmov	d0, r6, r7
 8004ff8:	f000 f864 	bl	80050c4 <finite>
 8004ffc:	b9e0      	cbnz	r0, 8005038 <pow+0xac>
 8004ffe:	eeb0 0a48 	vmov.f32	s0, s16
 8005002:	eef0 0a68 	vmov.f32	s1, s17
 8005006:	f000 f85d 	bl	80050c4 <finite>
 800500a:	b1a8      	cbz	r0, 8005038 <pow+0xac>
 800500c:	ec45 4b10 	vmov	d0, r4, r5
 8005010:	f000 f858 	bl	80050c4 <finite>
 8005014:	b180      	cbz	r0, 8005038 <pow+0xac>
 8005016:	4632      	mov	r2, r6
 8005018:	463b      	mov	r3, r7
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb fda5 	bl	8000b6c <__aeabi_dcmpun>
 8005022:	2800      	cmp	r0, #0
 8005024:	d0e2      	beq.n	8004fec <pow+0x60>
 8005026:	f7ff fb37 	bl	8004698 <__errno>
 800502a:	2321      	movs	r3, #33	@ 0x21
 800502c:	6003      	str	r3, [r0, #0]
 800502e:	ecbd 8b02 	vpop	{d8}
 8005032:	ec47 6b10 	vmov	d0, r6, r7
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	4630      	mov	r0, r6
 800503e:	4639      	mov	r1, r7
 8005040:	f7fb fd62 	bl	8000b08 <__aeabi_dcmpeq>
 8005044:	2800      	cmp	r0, #0
 8005046:	d0f2      	beq.n	800502e <pow+0xa2>
 8005048:	eeb0 0a48 	vmov.f32	s0, s16
 800504c:	eef0 0a68 	vmov.f32	s1, s17
 8005050:	f000 f838 	bl	80050c4 <finite>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0ea      	beq.n	800502e <pow+0xa2>
 8005058:	ec45 4b10 	vmov	d0, r4, r5
 800505c:	f000 f832 	bl	80050c4 <finite>
 8005060:	e7c3      	b.n	8004fea <pow+0x5e>
 8005062:	4f01      	ldr	r7, [pc, #4]	@ (8005068 <pow+0xdc>)
 8005064:	2600      	movs	r6, #0
 8005066:	e7e2      	b.n	800502e <pow+0xa2>
 8005068:	3ff00000 	.word	0x3ff00000

0800506c <sqrt>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	ed2d 8b02 	vpush	{d8}
 8005072:	ec55 4b10 	vmov	r4, r5, d0
 8005076:	f000 f831 	bl	80050dc <__ieee754_sqrt>
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	eeb0 8a40 	vmov.f32	s16, s0
 8005086:	eef0 8a60 	vmov.f32	s17, s1
 800508a:	f7fb fd6f 	bl	8000b6c <__aeabi_dcmpun>
 800508e:	b990      	cbnz	r0, 80050b6 <sqrt+0x4a>
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb fd40 	bl	8000b1c <__aeabi_dcmplt>
 800509c:	b158      	cbz	r0, 80050b6 <sqrt+0x4a>
 800509e:	f7ff fafb 	bl	8004698 <__errno>
 80050a2:	2321      	movs	r3, #33	@ 0x21
 80050a4:	6003      	str	r3, [r0, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2300      	movs	r3, #0
 80050aa:	4610      	mov	r0, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7fb fbed 	bl	800088c <__aeabi_ddiv>
 80050b2:	ec41 0b18 	vmov	d8, r0, r1
 80050b6:	eeb0 0a48 	vmov.f32	s0, s16
 80050ba:	eef0 0a68 	vmov.f32	s1, s17
 80050be:	ecbd 8b02 	vpop	{d8}
 80050c2:	bd38      	pop	{r3, r4, r5, pc}

080050c4 <finite>:
 80050c4:	b082      	sub	sp, #8
 80050c6:	ed8d 0b00 	vstr	d0, [sp]
 80050ca:	9801      	ldr	r0, [sp, #4]
 80050cc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80050d0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80050d4:	0fc0      	lsrs	r0, r0, #31
 80050d6:	b002      	add	sp, #8
 80050d8:	4770      	bx	lr
	...

080050dc <__ieee754_sqrt>:
 80050dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	4a68      	ldr	r2, [pc, #416]	@ (8005284 <__ieee754_sqrt+0x1a8>)
 80050e2:	ec55 4b10 	vmov	r4, r5, d0
 80050e6:	43aa      	bics	r2, r5
 80050e8:	462b      	mov	r3, r5
 80050ea:	4621      	mov	r1, r4
 80050ec:	d110      	bne.n	8005110 <__ieee754_sqrt+0x34>
 80050ee:	4622      	mov	r2, r4
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb faa0 	bl	8000638 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb f8e4 	bl	80002cc <__adddf3>
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	ec45 4b10 	vmov	d0, r4, r5
 800510c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005110:	2d00      	cmp	r5, #0
 8005112:	dc0e      	bgt.n	8005132 <__ieee754_sqrt+0x56>
 8005114:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005118:	4322      	orrs	r2, r4
 800511a:	d0f5      	beq.n	8005108 <__ieee754_sqrt+0x2c>
 800511c:	b19d      	cbz	r5, 8005146 <__ieee754_sqrt+0x6a>
 800511e:	4622      	mov	r2, r4
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb f8d0 	bl	80002c8 <__aeabi_dsub>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	f7fb fbae 	bl	800088c <__aeabi_ddiv>
 8005130:	e7e8      	b.n	8005104 <__ieee754_sqrt+0x28>
 8005132:	152a      	asrs	r2, r5, #20
 8005134:	d115      	bne.n	8005162 <__ieee754_sqrt+0x86>
 8005136:	2000      	movs	r0, #0
 8005138:	e009      	b.n	800514e <__ieee754_sqrt+0x72>
 800513a:	0acb      	lsrs	r3, r1, #11
 800513c:	3a15      	subs	r2, #21
 800513e:	0549      	lsls	r1, r1, #21
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0fa      	beq.n	800513a <__ieee754_sqrt+0x5e>
 8005144:	e7f7      	b.n	8005136 <__ieee754_sqrt+0x5a>
 8005146:	462a      	mov	r2, r5
 8005148:	e7fa      	b.n	8005140 <__ieee754_sqrt+0x64>
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	3001      	adds	r0, #1
 800514e:	02dc      	lsls	r4, r3, #11
 8005150:	d5fb      	bpl.n	800514a <__ieee754_sqrt+0x6e>
 8005152:	1e44      	subs	r4, r0, #1
 8005154:	1b12      	subs	r2, r2, r4
 8005156:	f1c0 0420 	rsb	r4, r0, #32
 800515a:	fa21 f404 	lsr.w	r4, r1, r4
 800515e:	4323      	orrs	r3, r4
 8005160:	4081      	lsls	r1, r0
 8005162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005166:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800516a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800516e:	07d2      	lsls	r2, r2, #31
 8005170:	bf5c      	itt	pl
 8005172:	005b      	lslpl	r3, r3, #1
 8005174:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005178:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800517c:	bf58      	it	pl
 800517e:	0049      	lslpl	r1, r1, #1
 8005180:	2600      	movs	r6, #0
 8005182:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005186:	106d      	asrs	r5, r5, #1
 8005188:	0049      	lsls	r1, r1, #1
 800518a:	2016      	movs	r0, #22
 800518c:	4632      	mov	r2, r6
 800518e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005192:	1917      	adds	r7, r2, r4
 8005194:	429f      	cmp	r7, r3
 8005196:	bfde      	ittt	le
 8005198:	193a      	addle	r2, r7, r4
 800519a:	1bdb      	suble	r3, r3, r7
 800519c:	1936      	addle	r6, r6, r4
 800519e:	0fcf      	lsrs	r7, r1, #31
 80051a0:	3801      	subs	r0, #1
 80051a2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80051a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80051aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80051ae:	d1f0      	bne.n	8005192 <__ieee754_sqrt+0xb6>
 80051b0:	4604      	mov	r4, r0
 80051b2:	2720      	movs	r7, #32
 80051b4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80051b8:	429a      	cmp	r2, r3
 80051ba:	eb00 0e0c 	add.w	lr, r0, ip
 80051be:	db02      	blt.n	80051c6 <__ieee754_sqrt+0xea>
 80051c0:	d113      	bne.n	80051ea <__ieee754_sqrt+0x10e>
 80051c2:	458e      	cmp	lr, r1
 80051c4:	d811      	bhi.n	80051ea <__ieee754_sqrt+0x10e>
 80051c6:	f1be 0f00 	cmp.w	lr, #0
 80051ca:	eb0e 000c 	add.w	r0, lr, ip
 80051ce:	da42      	bge.n	8005256 <__ieee754_sqrt+0x17a>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	db40      	blt.n	8005256 <__ieee754_sqrt+0x17a>
 80051d4:	f102 0801 	add.w	r8, r2, #1
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	458e      	cmp	lr, r1
 80051dc:	bf88      	it	hi
 80051de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80051e2:	eba1 010e 	sub.w	r1, r1, lr
 80051e6:	4464      	add	r4, ip
 80051e8:	4642      	mov	r2, r8
 80051ea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80051ee:	3f01      	subs	r7, #1
 80051f0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80051f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80051f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80051fc:	d1dc      	bne.n	80051b8 <__ieee754_sqrt+0xdc>
 80051fe:	4319      	orrs	r1, r3
 8005200:	d01b      	beq.n	800523a <__ieee754_sqrt+0x15e>
 8005202:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005288 <__ieee754_sqrt+0x1ac>
 8005206:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800528c <__ieee754_sqrt+0x1b0>
 800520a:	e9da 0100 	ldrd	r0, r1, [sl]
 800520e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005212:	f7fb f859 	bl	80002c8 <__aeabi_dsub>
 8005216:	e9da 8900 	ldrd	r8, r9, [sl]
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4640      	mov	r0, r8
 8005220:	4649      	mov	r1, r9
 8005222:	f7fb fc85 	bl	8000b30 <__aeabi_dcmple>
 8005226:	b140      	cbz	r0, 800523a <__ieee754_sqrt+0x15e>
 8005228:	f1b4 3fff 	cmp.w	r4, #4294967295
 800522c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005230:	e9db 2300 	ldrd	r2, r3, [fp]
 8005234:	d111      	bne.n	800525a <__ieee754_sqrt+0x17e>
 8005236:	3601      	adds	r6, #1
 8005238:	463c      	mov	r4, r7
 800523a:	1072      	asrs	r2, r6, #1
 800523c:	0863      	lsrs	r3, r4, #1
 800523e:	07f1      	lsls	r1, r6, #31
 8005240:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005244:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005248:	bf48      	it	mi
 800524a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800524e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005252:	4618      	mov	r0, r3
 8005254:	e756      	b.n	8005104 <__ieee754_sqrt+0x28>
 8005256:	4690      	mov	r8, r2
 8005258:	e7be      	b.n	80051d8 <__ieee754_sqrt+0xfc>
 800525a:	f7fb f837 	bl	80002cc <__adddf3>
 800525e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4640      	mov	r0, r8
 8005268:	4649      	mov	r1, r9
 800526a:	f7fb fc57 	bl	8000b1c <__aeabi_dcmplt>
 800526e:	b120      	cbz	r0, 800527a <__ieee754_sqrt+0x19e>
 8005270:	1ca0      	adds	r0, r4, #2
 8005272:	bf08      	it	eq
 8005274:	3601      	addeq	r6, #1
 8005276:	3402      	adds	r4, #2
 8005278:	e7df      	b.n	800523a <__ieee754_sqrt+0x15e>
 800527a:	1c63      	adds	r3, r4, #1
 800527c:	f023 0401 	bic.w	r4, r3, #1
 8005280:	e7db      	b.n	800523a <__ieee754_sqrt+0x15e>
 8005282:	bf00      	nop
 8005284:	7ff00000 	.word	0x7ff00000
 8005288:	20000068 	.word	0x20000068
 800528c:	20000060 	.word	0x20000060

08005290 <__ieee754_atan2>:
 8005290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005294:	ec57 6b11 	vmov	r6, r7, d1
 8005298:	4273      	negs	r3, r6
 800529a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005418 <__ieee754_atan2+0x188>
 800529e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80052a2:	4333      	orrs	r3, r6
 80052a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80052a8:	4543      	cmp	r3, r8
 80052aa:	ec51 0b10 	vmov	r0, r1, d0
 80052ae:	4635      	mov	r5, r6
 80052b0:	d809      	bhi.n	80052c6 <__ieee754_atan2+0x36>
 80052b2:	4244      	negs	r4, r0
 80052b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80052b8:	4304      	orrs	r4, r0
 80052ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80052be:	4544      	cmp	r4, r8
 80052c0:	468e      	mov	lr, r1
 80052c2:	4681      	mov	r9, r0
 80052c4:	d907      	bls.n	80052d6 <__ieee754_atan2+0x46>
 80052c6:	4632      	mov	r2, r6
 80052c8:	463b      	mov	r3, r7
 80052ca:	f7fa ffff 	bl	80002cc <__adddf3>
 80052ce:	ec41 0b10 	vmov	d0, r0, r1
 80052d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80052da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80052de:	4334      	orrs	r4, r6
 80052e0:	d103      	bne.n	80052ea <__ieee754_atan2+0x5a>
 80052e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e6:	f000 bddf 	b.w	8005ea8 <atan>
 80052ea:	17bc      	asrs	r4, r7, #30
 80052ec:	f004 0402 	and.w	r4, r4, #2
 80052f0:	ea53 0909 	orrs.w	r9, r3, r9
 80052f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80052f8:	d107      	bne.n	800530a <__ieee754_atan2+0x7a>
 80052fa:	2c02      	cmp	r4, #2
 80052fc:	d05f      	beq.n	80053be <__ieee754_atan2+0x12e>
 80052fe:	2c03      	cmp	r4, #3
 8005300:	d1e5      	bne.n	80052ce <__ieee754_atan2+0x3e>
 8005302:	a141      	add	r1, pc, #260	@ (adr r1, 8005408 <__ieee754_atan2+0x178>)
 8005304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005308:	e7e1      	b.n	80052ce <__ieee754_atan2+0x3e>
 800530a:	4315      	orrs	r5, r2
 800530c:	d106      	bne.n	800531c <__ieee754_atan2+0x8c>
 800530e:	f1be 0f00 	cmp.w	lr, #0
 8005312:	da5f      	bge.n	80053d4 <__ieee754_atan2+0x144>
 8005314:	a13e      	add	r1, pc, #248	@ (adr r1, 8005410 <__ieee754_atan2+0x180>)
 8005316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800531a:	e7d8      	b.n	80052ce <__ieee754_atan2+0x3e>
 800531c:	4542      	cmp	r2, r8
 800531e:	d10f      	bne.n	8005340 <__ieee754_atan2+0xb0>
 8005320:	4293      	cmp	r3, r2
 8005322:	f104 34ff 	add.w	r4, r4, #4294967295
 8005326:	d107      	bne.n	8005338 <__ieee754_atan2+0xa8>
 8005328:	2c02      	cmp	r4, #2
 800532a:	d84c      	bhi.n	80053c6 <__ieee754_atan2+0x136>
 800532c:	4b34      	ldr	r3, [pc, #208]	@ (8005400 <__ieee754_atan2+0x170>)
 800532e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005336:	e7ca      	b.n	80052ce <__ieee754_atan2+0x3e>
 8005338:	2c02      	cmp	r4, #2
 800533a:	d848      	bhi.n	80053ce <__ieee754_atan2+0x13e>
 800533c:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <__ieee754_atan2+0x174>)
 800533e:	e7f6      	b.n	800532e <__ieee754_atan2+0x9e>
 8005340:	4543      	cmp	r3, r8
 8005342:	d0e4      	beq.n	800530e <__ieee754_atan2+0x7e>
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800534a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800534e:	da1e      	bge.n	800538e <__ieee754_atan2+0xfe>
 8005350:	2f00      	cmp	r7, #0
 8005352:	da01      	bge.n	8005358 <__ieee754_atan2+0xc8>
 8005354:	323c      	adds	r2, #60	@ 0x3c
 8005356:	db1e      	blt.n	8005396 <__ieee754_atan2+0x106>
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	f7fb fa96 	bl	800088c <__aeabi_ddiv>
 8005360:	ec41 0b10 	vmov	d0, r0, r1
 8005364:	f000 ff38 	bl	80061d8 <fabs>
 8005368:	f000 fd9e 	bl	8005ea8 <atan>
 800536c:	ec51 0b10 	vmov	r0, r1, d0
 8005370:	2c01      	cmp	r4, #1
 8005372:	d013      	beq.n	800539c <__ieee754_atan2+0x10c>
 8005374:	2c02      	cmp	r4, #2
 8005376:	d015      	beq.n	80053a4 <__ieee754_atan2+0x114>
 8005378:	2c00      	cmp	r4, #0
 800537a:	d0a8      	beq.n	80052ce <__ieee754_atan2+0x3e>
 800537c:	a318      	add	r3, pc, #96	@ (adr r3, 80053e0 <__ieee754_atan2+0x150>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fa ffa1 	bl	80002c8 <__aeabi_dsub>
 8005386:	a318      	add	r3, pc, #96	@ (adr r3, 80053e8 <__ieee754_atan2+0x158>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	e014      	b.n	80053b8 <__ieee754_atan2+0x128>
 800538e:	a118      	add	r1, pc, #96	@ (adr r1, 80053f0 <__ieee754_atan2+0x160>)
 8005390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005394:	e7ec      	b.n	8005370 <__ieee754_atan2+0xe0>
 8005396:	2000      	movs	r0, #0
 8005398:	2100      	movs	r1, #0
 800539a:	e7e9      	b.n	8005370 <__ieee754_atan2+0xe0>
 800539c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053a0:	4619      	mov	r1, r3
 80053a2:	e794      	b.n	80052ce <__ieee754_atan2+0x3e>
 80053a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80053e0 <__ieee754_atan2+0x150>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa ff8d 	bl	80002c8 <__aeabi_dsub>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	a10d      	add	r1, pc, #52	@ (adr r1, 80053e8 <__ieee754_atan2+0x158>)
 80053b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b8:	f7fa ff86 	bl	80002c8 <__aeabi_dsub>
 80053bc:	e787      	b.n	80052ce <__ieee754_atan2+0x3e>
 80053be:	a10a      	add	r1, pc, #40	@ (adr r1, 80053e8 <__ieee754_atan2+0x158>)
 80053c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053c4:	e783      	b.n	80052ce <__ieee754_atan2+0x3e>
 80053c6:	a10c      	add	r1, pc, #48	@ (adr r1, 80053f8 <__ieee754_atan2+0x168>)
 80053c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053cc:	e77f      	b.n	80052ce <__ieee754_atan2+0x3e>
 80053ce:	2000      	movs	r0, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	e77c      	b.n	80052ce <__ieee754_atan2+0x3e>
 80053d4:	a106      	add	r1, pc, #24	@ (adr r1, 80053f0 <__ieee754_atan2+0x160>)
 80053d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053da:	e778      	b.n	80052ce <__ieee754_atan2+0x3e>
 80053dc:	f3af 8000 	nop.w
 80053e0:	33145c07 	.word	0x33145c07
 80053e4:	3ca1a626 	.word	0x3ca1a626
 80053e8:	54442d18 	.word	0x54442d18
 80053ec:	400921fb 	.word	0x400921fb
 80053f0:	54442d18 	.word	0x54442d18
 80053f4:	3ff921fb 	.word	0x3ff921fb
 80053f8:	54442d18 	.word	0x54442d18
 80053fc:	3fe921fb 	.word	0x3fe921fb
 8005400:	08006448 	.word	0x08006448
 8005404:	08006430 	.word	0x08006430
 8005408:	54442d18 	.word	0x54442d18
 800540c:	c00921fb 	.word	0xc00921fb
 8005410:	54442d18 	.word	0x54442d18
 8005414:	bff921fb 	.word	0xbff921fb
 8005418:	7ff00000 	.word	0x7ff00000
 800541c:	00000000 	.word	0x00000000

08005420 <__ieee754_pow>:
 8005420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005424:	b091      	sub	sp, #68	@ 0x44
 8005426:	ed8d 1b00 	vstr	d1, [sp]
 800542a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800542e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005432:	ea5a 0001 	orrs.w	r0, sl, r1
 8005436:	ec57 6b10 	vmov	r6, r7, d0
 800543a:	d113      	bne.n	8005464 <__ieee754_pow+0x44>
 800543c:	19b3      	adds	r3, r6, r6
 800543e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005442:	4152      	adcs	r2, r2
 8005444:	4298      	cmp	r0, r3
 8005446:	4b98      	ldr	r3, [pc, #608]	@ (80056a8 <__ieee754_pow+0x288>)
 8005448:	4193      	sbcs	r3, r2
 800544a:	f080 84ea 	bcs.w	8005e22 <__ieee754_pow+0xa02>
 800544e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7fa ff39 	bl	80002cc <__adddf3>
 800545a:	ec41 0b10 	vmov	d0, r0, r1
 800545e:	b011      	add	sp, #68	@ 0x44
 8005460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	4a91      	ldr	r2, [pc, #580]	@ (80056ac <__ieee754_pow+0x28c>)
 8005466:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800546a:	4590      	cmp	r8, r2
 800546c:	463d      	mov	r5, r7
 800546e:	4633      	mov	r3, r6
 8005470:	d806      	bhi.n	8005480 <__ieee754_pow+0x60>
 8005472:	d101      	bne.n	8005478 <__ieee754_pow+0x58>
 8005474:	2e00      	cmp	r6, #0
 8005476:	d1ea      	bne.n	800544e <__ieee754_pow+0x2e>
 8005478:	4592      	cmp	sl, r2
 800547a:	d801      	bhi.n	8005480 <__ieee754_pow+0x60>
 800547c:	d10e      	bne.n	800549c <__ieee754_pow+0x7c>
 800547e:	b169      	cbz	r1, 800549c <__ieee754_pow+0x7c>
 8005480:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005484:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005488:	431d      	orrs	r5, r3
 800548a:	d1e0      	bne.n	800544e <__ieee754_pow+0x2e>
 800548c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005490:	18db      	adds	r3, r3, r3
 8005492:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005496:	4152      	adcs	r2, r2
 8005498:	429d      	cmp	r5, r3
 800549a:	e7d4      	b.n	8005446 <__ieee754_pow+0x26>
 800549c:	2d00      	cmp	r5, #0
 800549e:	46c3      	mov	fp, r8
 80054a0:	da3a      	bge.n	8005518 <__ieee754_pow+0xf8>
 80054a2:	4a83      	ldr	r2, [pc, #524]	@ (80056b0 <__ieee754_pow+0x290>)
 80054a4:	4592      	cmp	sl, r2
 80054a6:	d84d      	bhi.n	8005544 <__ieee754_pow+0x124>
 80054a8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80054ac:	4592      	cmp	sl, r2
 80054ae:	f240 84c7 	bls.w	8005e40 <__ieee754_pow+0xa20>
 80054b2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80054b6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80054ba:	2a14      	cmp	r2, #20
 80054bc:	dd0f      	ble.n	80054de <__ieee754_pow+0xbe>
 80054be:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80054c2:	fa21 f402 	lsr.w	r4, r1, r2
 80054c6:	fa04 f202 	lsl.w	r2, r4, r2
 80054ca:	428a      	cmp	r2, r1
 80054cc:	f040 84b8 	bne.w	8005e40 <__ieee754_pow+0xa20>
 80054d0:	f004 0401 	and.w	r4, r4, #1
 80054d4:	f1c4 0402 	rsb	r4, r4, #2
 80054d8:	2900      	cmp	r1, #0
 80054da:	d158      	bne.n	800558e <__ieee754_pow+0x16e>
 80054dc:	e00e      	b.n	80054fc <__ieee754_pow+0xdc>
 80054de:	2900      	cmp	r1, #0
 80054e0:	d154      	bne.n	800558c <__ieee754_pow+0x16c>
 80054e2:	f1c2 0214 	rsb	r2, r2, #20
 80054e6:	fa4a f402 	asr.w	r4, sl, r2
 80054ea:	fa04 f202 	lsl.w	r2, r4, r2
 80054ee:	4552      	cmp	r2, sl
 80054f0:	f040 84a3 	bne.w	8005e3a <__ieee754_pow+0xa1a>
 80054f4:	f004 0401 	and.w	r4, r4, #1
 80054f8:	f1c4 0402 	rsb	r4, r4, #2
 80054fc:	4a6d      	ldr	r2, [pc, #436]	@ (80056b4 <__ieee754_pow+0x294>)
 80054fe:	4592      	cmp	sl, r2
 8005500:	d12e      	bne.n	8005560 <__ieee754_pow+0x140>
 8005502:	f1b9 0f00 	cmp.w	r9, #0
 8005506:	f280 8494 	bge.w	8005e32 <__ieee754_pow+0xa12>
 800550a:	496a      	ldr	r1, [pc, #424]	@ (80056b4 <__ieee754_pow+0x294>)
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	2000      	movs	r0, #0
 8005512:	f7fb f9bb 	bl	800088c <__aeabi_ddiv>
 8005516:	e7a0      	b.n	800545a <__ieee754_pow+0x3a>
 8005518:	2400      	movs	r4, #0
 800551a:	bbc1      	cbnz	r1, 800558e <__ieee754_pow+0x16e>
 800551c:	4a63      	ldr	r2, [pc, #396]	@ (80056ac <__ieee754_pow+0x28c>)
 800551e:	4592      	cmp	sl, r2
 8005520:	d1ec      	bne.n	80054fc <__ieee754_pow+0xdc>
 8005522:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005526:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800552a:	431a      	orrs	r2, r3
 800552c:	f000 8479 	beq.w	8005e22 <__ieee754_pow+0xa02>
 8005530:	4b61      	ldr	r3, [pc, #388]	@ (80056b8 <__ieee754_pow+0x298>)
 8005532:	4598      	cmp	r8, r3
 8005534:	d908      	bls.n	8005548 <__ieee754_pow+0x128>
 8005536:	f1b9 0f00 	cmp.w	r9, #0
 800553a:	f2c0 8476 	blt.w	8005e2a <__ieee754_pow+0xa0a>
 800553e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005542:	e78a      	b.n	800545a <__ieee754_pow+0x3a>
 8005544:	2402      	movs	r4, #2
 8005546:	e7e8      	b.n	800551a <__ieee754_pow+0xfa>
 8005548:	f1b9 0f00 	cmp.w	r9, #0
 800554c:	f04f 0000 	mov.w	r0, #0
 8005550:	f04f 0100 	mov.w	r1, #0
 8005554:	da81      	bge.n	800545a <__ieee754_pow+0x3a>
 8005556:	e9dd 0300 	ldrd	r0, r3, [sp]
 800555a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800555e:	e77c      	b.n	800545a <__ieee754_pow+0x3a>
 8005560:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005564:	d106      	bne.n	8005574 <__ieee754_pow+0x154>
 8005566:	4632      	mov	r2, r6
 8005568:	463b      	mov	r3, r7
 800556a:	4630      	mov	r0, r6
 800556c:	4639      	mov	r1, r7
 800556e:	f7fb f863 	bl	8000638 <__aeabi_dmul>
 8005572:	e772      	b.n	800545a <__ieee754_pow+0x3a>
 8005574:	4a51      	ldr	r2, [pc, #324]	@ (80056bc <__ieee754_pow+0x29c>)
 8005576:	4591      	cmp	r9, r2
 8005578:	d109      	bne.n	800558e <__ieee754_pow+0x16e>
 800557a:	2d00      	cmp	r5, #0
 800557c:	db07      	blt.n	800558e <__ieee754_pow+0x16e>
 800557e:	ec47 6b10 	vmov	d0, r6, r7
 8005582:	b011      	add	sp, #68	@ 0x44
 8005584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	f7ff bda8 	b.w	80050dc <__ieee754_sqrt>
 800558c:	2400      	movs	r4, #0
 800558e:	ec47 6b10 	vmov	d0, r6, r7
 8005592:	9302      	str	r3, [sp, #8]
 8005594:	f000 fe20 	bl	80061d8 <fabs>
 8005598:	9b02      	ldr	r3, [sp, #8]
 800559a:	ec51 0b10 	vmov	r0, r1, d0
 800559e:	bb53      	cbnz	r3, 80055f6 <__ieee754_pow+0x1d6>
 80055a0:	4b44      	ldr	r3, [pc, #272]	@ (80056b4 <__ieee754_pow+0x294>)
 80055a2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d002      	beq.n	80055b0 <__ieee754_pow+0x190>
 80055aa:	f1b8 0f00 	cmp.w	r8, #0
 80055ae:	d122      	bne.n	80055f6 <__ieee754_pow+0x1d6>
 80055b0:	f1b9 0f00 	cmp.w	r9, #0
 80055b4:	da05      	bge.n	80055c2 <__ieee754_pow+0x1a2>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	2000      	movs	r0, #0
 80055bc:	493d      	ldr	r1, [pc, #244]	@ (80056b4 <__ieee754_pow+0x294>)
 80055be:	f7fb f965 	bl	800088c <__aeabi_ddiv>
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	f6bf af49 	bge.w	800545a <__ieee754_pow+0x3a>
 80055c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80055cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80055d0:	ea58 0804 	orrs.w	r8, r8, r4
 80055d4:	d108      	bne.n	80055e8 <__ieee754_pow+0x1c8>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4610      	mov	r0, r2
 80055dc:	4619      	mov	r1, r3
 80055de:	f7fa fe73 	bl	80002c8 <__aeabi_dsub>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	e794      	b.n	8005512 <__ieee754_pow+0xf2>
 80055e8:	2c01      	cmp	r4, #1
 80055ea:	f47f af36 	bne.w	800545a <__ieee754_pow+0x3a>
 80055ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055f2:	4619      	mov	r1, r3
 80055f4:	e731      	b.n	800545a <__ieee754_pow+0x3a>
 80055f6:	0feb      	lsrs	r3, r5, #31
 80055f8:	3b01      	subs	r3, #1
 80055fa:	ea53 0204 	orrs.w	r2, r3, r4
 80055fe:	d102      	bne.n	8005606 <__ieee754_pow+0x1e6>
 8005600:	4632      	mov	r2, r6
 8005602:	463b      	mov	r3, r7
 8005604:	e7e9      	b.n	80055da <__ieee754_pow+0x1ba>
 8005606:	3c01      	subs	r4, #1
 8005608:	431c      	orrs	r4, r3
 800560a:	d016      	beq.n	800563a <__ieee754_pow+0x21a>
 800560c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005698 <__ieee754_pow+0x278>
 8005610:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005618:	f240 8112 	bls.w	8005840 <__ieee754_pow+0x420>
 800561c:	4b28      	ldr	r3, [pc, #160]	@ (80056c0 <__ieee754_pow+0x2a0>)
 800561e:	459a      	cmp	sl, r3
 8005620:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <__ieee754_pow+0x298>)
 8005622:	d916      	bls.n	8005652 <__ieee754_pow+0x232>
 8005624:	4598      	cmp	r8, r3
 8005626:	d80b      	bhi.n	8005640 <__ieee754_pow+0x220>
 8005628:	f1b9 0f00 	cmp.w	r9, #0
 800562c:	da0b      	bge.n	8005646 <__ieee754_pow+0x226>
 800562e:	2000      	movs	r0, #0
 8005630:	b011      	add	sp, #68	@ 0x44
 8005632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	f000 be8b 	b.w	8006350 <__math_oflow>
 800563a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80056a0 <__ieee754_pow+0x280>
 800563e:	e7e7      	b.n	8005610 <__ieee754_pow+0x1f0>
 8005640:	f1b9 0f00 	cmp.w	r9, #0
 8005644:	dcf3      	bgt.n	800562e <__ieee754_pow+0x20e>
 8005646:	2000      	movs	r0, #0
 8005648:	b011      	add	sp, #68	@ 0x44
 800564a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564e:	f000 be77 	b.w	8006340 <__math_uflow>
 8005652:	4598      	cmp	r8, r3
 8005654:	d20c      	bcs.n	8005670 <__ieee754_pow+0x250>
 8005656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	2300      	movs	r3, #0
 800565e:	f7fb fa5d 	bl	8000b1c <__aeabi_dcmplt>
 8005662:	3800      	subs	r0, #0
 8005664:	bf18      	it	ne
 8005666:	2001      	movne	r0, #1
 8005668:	f1b9 0f00 	cmp.w	r9, #0
 800566c:	daec      	bge.n	8005648 <__ieee754_pow+0x228>
 800566e:	e7df      	b.n	8005630 <__ieee754_pow+0x210>
 8005670:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <__ieee754_pow+0x294>)
 8005672:	4598      	cmp	r8, r3
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	d924      	bls.n	80056c4 <__ieee754_pow+0x2a4>
 800567a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800567e:	2300      	movs	r3, #0
 8005680:	f7fb fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8005684:	3800      	subs	r0, #0
 8005686:	bf18      	it	ne
 8005688:	2001      	movne	r0, #1
 800568a:	f1b9 0f00 	cmp.w	r9, #0
 800568e:	dccf      	bgt.n	8005630 <__ieee754_pow+0x210>
 8005690:	e7da      	b.n	8005648 <__ieee754_pow+0x228>
 8005692:	bf00      	nop
 8005694:	f3af 8000 	nop.w
 8005698:	00000000 	.word	0x00000000
 800569c:	3ff00000 	.word	0x3ff00000
 80056a0:	00000000 	.word	0x00000000
 80056a4:	bff00000 	.word	0xbff00000
 80056a8:	fff00000 	.word	0xfff00000
 80056ac:	7ff00000 	.word	0x7ff00000
 80056b0:	433fffff 	.word	0x433fffff
 80056b4:	3ff00000 	.word	0x3ff00000
 80056b8:	3fefffff 	.word	0x3fefffff
 80056bc:	3fe00000 	.word	0x3fe00000
 80056c0:	43f00000 	.word	0x43f00000
 80056c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005830 <__ieee754_pow+0x410>)
 80056c6:	f7fa fdff 	bl	80002c8 <__aeabi_dsub>
 80056ca:	a351      	add	r3, pc, #324	@ (adr r3, 8005810 <__ieee754_pow+0x3f0>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	4604      	mov	r4, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	f7fa ffb0 	bl	8000638 <__aeabi_dmul>
 80056d8:	a34f      	add	r3, pc, #316	@ (adr r3, 8005818 <__ieee754_pow+0x3f8>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	4606      	mov	r6, r0
 80056e0:	460f      	mov	r7, r1
 80056e2:	4620      	mov	r0, r4
 80056e4:	4629      	mov	r1, r5
 80056e6:	f7fa ffa7 	bl	8000638 <__aeabi_dmul>
 80056ea:	4b52      	ldr	r3, [pc, #328]	@ (8005834 <__ieee754_pow+0x414>)
 80056ec:	4682      	mov	sl, r0
 80056ee:	468b      	mov	fp, r1
 80056f0:	2200      	movs	r2, #0
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	f7fa ff9f 	bl	8000638 <__aeabi_dmul>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	a148      	add	r1, pc, #288	@ (adr r1, 8005820 <__ieee754_pow+0x400>)
 8005700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005704:	f7fa fde0 	bl	80002c8 <__aeabi_dsub>
 8005708:	4622      	mov	r2, r4
 800570a:	462b      	mov	r3, r5
 800570c:	f7fa ff94 	bl	8000638 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	2000      	movs	r0, #0
 8005716:	4948      	ldr	r1, [pc, #288]	@ (8005838 <__ieee754_pow+0x418>)
 8005718:	f7fa fdd6 	bl	80002c8 <__aeabi_dsub>
 800571c:	4622      	mov	r2, r4
 800571e:	4680      	mov	r8, r0
 8005720:	4689      	mov	r9, r1
 8005722:	462b      	mov	r3, r5
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fa ff86 	bl	8000638 <__aeabi_dmul>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4640      	mov	r0, r8
 8005732:	4649      	mov	r1, r9
 8005734:	f7fa ff80 	bl	8000638 <__aeabi_dmul>
 8005738:	a33b      	add	r3, pc, #236	@ (adr r3, 8005828 <__ieee754_pow+0x408>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff7b 	bl	8000638 <__aeabi_dmul>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4650      	mov	r0, sl
 8005748:	4659      	mov	r1, fp
 800574a:	f7fa fdbd 	bl	80002c8 <__aeabi_dsub>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4680      	mov	r8, r0
 8005754:	4689      	mov	r9, r1
 8005756:	4630      	mov	r0, r6
 8005758:	4639      	mov	r1, r7
 800575a:	f7fa fdb7 	bl	80002cc <__adddf3>
 800575e:	2400      	movs	r4, #0
 8005760:	4632      	mov	r2, r6
 8005762:	463b      	mov	r3, r7
 8005764:	4620      	mov	r0, r4
 8005766:	460d      	mov	r5, r1
 8005768:	f7fa fdae 	bl	80002c8 <__aeabi_dsub>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa fda8 	bl	80002c8 <__aeabi_dsub>
 8005778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800577c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005780:	2300      	movs	r3, #0
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005788:	4606      	mov	r6, r0
 800578a:	460f      	mov	r7, r1
 800578c:	4652      	mov	r2, sl
 800578e:	465b      	mov	r3, fp
 8005790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005794:	f7fa fd98 	bl	80002c8 <__aeabi_dsub>
 8005798:	4622      	mov	r2, r4
 800579a:	462b      	mov	r3, r5
 800579c:	f7fa ff4c 	bl	8000638 <__aeabi_dmul>
 80057a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057a4:	4680      	mov	r8, r0
 80057a6:	4689      	mov	r9, r1
 80057a8:	4630      	mov	r0, r6
 80057aa:	4639      	mov	r1, r7
 80057ac:	f7fa ff44 	bl	8000638 <__aeabi_dmul>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4640      	mov	r0, r8
 80057b6:	4649      	mov	r1, r9
 80057b8:	f7fa fd88 	bl	80002cc <__adddf3>
 80057bc:	4652      	mov	r2, sl
 80057be:	465b      	mov	r3, fp
 80057c0:	4606      	mov	r6, r0
 80057c2:	460f      	mov	r7, r1
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	f7fa ff36 	bl	8000638 <__aeabi_dmul>
 80057cc:	460b      	mov	r3, r1
 80057ce:	4602      	mov	r2, r0
 80057d0:	4680      	mov	r8, r0
 80057d2:	4689      	mov	r9, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd78 	bl	80002cc <__adddf3>
 80057dc:	4b17      	ldr	r3, [pc, #92]	@ (800583c <__ieee754_pow+0x41c>)
 80057de:	4299      	cmp	r1, r3
 80057e0:	4604      	mov	r4, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	468a      	mov	sl, r1
 80057e6:	468b      	mov	fp, r1
 80057e8:	f340 82ef 	ble.w	8005dca <__ieee754_pow+0x9aa>
 80057ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80057f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80057f4:	4303      	orrs	r3, r0
 80057f6:	f000 81e8 	beq.w	8005bca <__ieee754_pow+0x7aa>
 80057fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	f7fb f98b 	bl	8000b1c <__aeabi_dcmplt>
 8005806:	3800      	subs	r0, #0
 8005808:	bf18      	it	ne
 800580a:	2001      	movne	r0, #1
 800580c:	e710      	b.n	8005630 <__ieee754_pow+0x210>
 800580e:	bf00      	nop
 8005810:	60000000 	.word	0x60000000
 8005814:	3ff71547 	.word	0x3ff71547
 8005818:	f85ddf44 	.word	0xf85ddf44
 800581c:	3e54ae0b 	.word	0x3e54ae0b
 8005820:	55555555 	.word	0x55555555
 8005824:	3fd55555 	.word	0x3fd55555
 8005828:	652b82fe 	.word	0x652b82fe
 800582c:	3ff71547 	.word	0x3ff71547
 8005830:	3ff00000 	.word	0x3ff00000
 8005834:	3fd00000 	.word	0x3fd00000
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	408fffff 	.word	0x408fffff
 8005840:	4bd5      	ldr	r3, [pc, #852]	@ (8005b98 <__ieee754_pow+0x778>)
 8005842:	402b      	ands	r3, r5
 8005844:	2200      	movs	r2, #0
 8005846:	b92b      	cbnz	r3, 8005854 <__ieee754_pow+0x434>
 8005848:	4bd4      	ldr	r3, [pc, #848]	@ (8005b9c <__ieee754_pow+0x77c>)
 800584a:	f7fa fef5 	bl	8000638 <__aeabi_dmul>
 800584e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005852:	468b      	mov	fp, r1
 8005854:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005858:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800585c:	4413      	add	r3, r2
 800585e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005860:	4bcf      	ldr	r3, [pc, #828]	@ (8005ba0 <__ieee754_pow+0x780>)
 8005862:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005866:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800586a:	459b      	cmp	fp, r3
 800586c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005870:	dd08      	ble.n	8005884 <__ieee754_pow+0x464>
 8005872:	4bcc      	ldr	r3, [pc, #816]	@ (8005ba4 <__ieee754_pow+0x784>)
 8005874:	459b      	cmp	fp, r3
 8005876:	f340 81a5 	ble.w	8005bc4 <__ieee754_pow+0x7a4>
 800587a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800587c:	3301      	adds	r3, #1
 800587e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005880:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005884:	f04f 0a00 	mov.w	sl, #0
 8005888:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800588c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800588e:	4bc6      	ldr	r3, [pc, #792]	@ (8005ba8 <__ieee754_pow+0x788>)
 8005890:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005894:	ed93 7b00 	vldr	d7, [r3]
 8005898:	4629      	mov	r1, r5
 800589a:	ec53 2b17 	vmov	r2, r3, d7
 800589e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058a6:	f7fa fd0f 	bl	80002c8 <__aeabi_dsub>
 80058aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058ae:	4606      	mov	r6, r0
 80058b0:	460f      	mov	r7, r1
 80058b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058b6:	f7fa fd09 	bl	80002cc <__adddf3>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	2000      	movs	r0, #0
 80058c0:	49ba      	ldr	r1, [pc, #744]	@ (8005bac <__ieee754_pow+0x78c>)
 80058c2:	f7fa ffe3 	bl	800088c <__aeabi_ddiv>
 80058c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4630      	mov	r0, r6
 80058d0:	4639      	mov	r1, r7
 80058d2:	f7fa feb1 	bl	8000638 <__aeabi_dmul>
 80058d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80058de:	106d      	asrs	r5, r5, #1
 80058e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80058e4:	f04f 0b00 	mov.w	fp, #0
 80058e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80058ec:	4661      	mov	r1, ip
 80058ee:	2200      	movs	r2, #0
 80058f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80058f4:	4658      	mov	r0, fp
 80058f6:	46e1      	mov	r9, ip
 80058f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80058fc:	4614      	mov	r4, r2
 80058fe:	461d      	mov	r5, r3
 8005900:	f7fa fe9a 	bl	8000638 <__aeabi_dmul>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4630      	mov	r0, r6
 800590a:	4639      	mov	r1, r7
 800590c:	f7fa fcdc 	bl	80002c8 <__aeabi_dsub>
 8005910:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005914:	4606      	mov	r6, r0
 8005916:	460f      	mov	r7, r1
 8005918:	4620      	mov	r0, r4
 800591a:	4629      	mov	r1, r5
 800591c:	f7fa fcd4 	bl	80002c8 <__aeabi_dsub>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005928:	f7fa fcce 	bl	80002c8 <__aeabi_dsub>
 800592c:	465a      	mov	r2, fp
 800592e:	464b      	mov	r3, r9
 8005930:	f7fa fe82 	bl	8000638 <__aeabi_dmul>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4630      	mov	r0, r6
 800593a:	4639      	mov	r1, r7
 800593c:	f7fa fcc4 	bl	80002c8 <__aeabi_dsub>
 8005940:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005944:	f7fa fe78 	bl	8000638 <__aeabi_dmul>
 8005948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005950:	4610      	mov	r0, r2
 8005952:	4619      	mov	r1, r3
 8005954:	f7fa fe70 	bl	8000638 <__aeabi_dmul>
 8005958:	a37d      	add	r3, pc, #500	@ (adr r3, 8005b50 <__ieee754_pow+0x730>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	f7fa fe69 	bl	8000638 <__aeabi_dmul>
 8005966:	a37c      	add	r3, pc, #496	@ (adr r3, 8005b58 <__ieee754_pow+0x738>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fcae 	bl	80002cc <__adddf3>
 8005970:	4622      	mov	r2, r4
 8005972:	462b      	mov	r3, r5
 8005974:	f7fa fe60 	bl	8000638 <__aeabi_dmul>
 8005978:	a379      	add	r3, pc, #484	@ (adr r3, 8005b60 <__ieee754_pow+0x740>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fca5 	bl	80002cc <__adddf3>
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f7fa fe57 	bl	8000638 <__aeabi_dmul>
 800598a:	a377      	add	r3, pc, #476	@ (adr r3, 8005b68 <__ieee754_pow+0x748>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fc9c 	bl	80002cc <__adddf3>
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	f7fa fe4e 	bl	8000638 <__aeabi_dmul>
 800599c:	a374      	add	r3, pc, #464	@ (adr r3, 8005b70 <__ieee754_pow+0x750>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc93 	bl	80002cc <__adddf3>
 80059a6:	4622      	mov	r2, r4
 80059a8:	462b      	mov	r3, r5
 80059aa:	f7fa fe45 	bl	8000638 <__aeabi_dmul>
 80059ae:	a372      	add	r3, pc, #456	@ (adr r3, 8005b78 <__ieee754_pow+0x758>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f7fa fc8a 	bl	80002cc <__adddf3>
 80059b8:	4622      	mov	r2, r4
 80059ba:	4606      	mov	r6, r0
 80059bc:	460f      	mov	r7, r1
 80059be:	462b      	mov	r3, r5
 80059c0:	4620      	mov	r0, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	f7fa fe38 	bl	8000638 <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fa fe32 	bl	8000638 <__aeabi_dmul>
 80059d4:	465a      	mov	r2, fp
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	464b      	mov	r3, r9
 80059dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e0:	f7fa fc74 	bl	80002cc <__adddf3>
 80059e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059e8:	f7fa fe26 	bl	8000638 <__aeabi_dmul>
 80059ec:	4622      	mov	r2, r4
 80059ee:	462b      	mov	r3, r5
 80059f0:	f7fa fc6c 	bl	80002cc <__adddf3>
 80059f4:	465a      	mov	r2, fp
 80059f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059fa:	464b      	mov	r3, r9
 80059fc:	4658      	mov	r0, fp
 80059fe:	4649      	mov	r1, r9
 8005a00:	f7fa fe1a 	bl	8000638 <__aeabi_dmul>
 8005a04:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb0 <__ieee754_pow+0x790>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	f7fa fc5e 	bl	80002cc <__adddf3>
 8005a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a14:	f7fa fc5a 	bl	80002cc <__adddf3>
 8005a18:	46d8      	mov	r8, fp
 8005a1a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005a1e:	460d      	mov	r5, r1
 8005a20:	465a      	mov	r2, fp
 8005a22:	460b      	mov	r3, r1
 8005a24:	4640      	mov	r0, r8
 8005a26:	4649      	mov	r1, r9
 8005a28:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005a2c:	f7fa fe04 	bl	8000638 <__aeabi_dmul>
 8005a30:	465c      	mov	r4, fp
 8005a32:	4680      	mov	r8, r0
 8005a34:	4689      	mov	r9, r1
 8005a36:	4b5e      	ldr	r3, [pc, #376]	@ (8005bb0 <__ieee754_pow+0x790>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fa fc43 	bl	80002c8 <__aeabi_dsub>
 8005a42:	4632      	mov	r2, r6
 8005a44:	463b      	mov	r3, r7
 8005a46:	f7fa fc3f 	bl	80002c8 <__aeabi_dsub>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a52:	f7fa fc39 	bl	80002c8 <__aeabi_dsub>
 8005a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5a:	f7fa fded 	bl	8000638 <__aeabi_dmul>
 8005a5e:	4622      	mov	r2, r4
 8005a60:	4606      	mov	r6, r0
 8005a62:	460f      	mov	r7, r1
 8005a64:	462b      	mov	r3, r5
 8005a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a6a:	f7fa fde5 	bl	8000638 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fa fc29 	bl	80002cc <__adddf3>
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fc21 	bl	80002cc <__adddf3>
 8005a8a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005a8e:	a33c      	add	r3, pc, #240	@ (adr r3, 8005b80 <__ieee754_pow+0x760>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	4658      	mov	r0, fp
 8005a96:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	f7fa fdcc 	bl	8000638 <__aeabi_dmul>
 8005aa0:	465c      	mov	r4, fp
 8005aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	f7fa fc0b 	bl	80002c8 <__aeabi_dsub>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	4639      	mov	r1, r7
 8005aba:	f7fa fc05 	bl	80002c8 <__aeabi_dsub>
 8005abe:	a332      	add	r3, pc, #200	@ (adr r3, 8005b88 <__ieee754_pow+0x768>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fdb8 	bl	8000638 <__aeabi_dmul>
 8005ac8:	a331      	add	r3, pc, #196	@ (adr r3, 8005b90 <__ieee754_pow+0x770>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	4606      	mov	r6, r0
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fdaf 	bl	8000638 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fbf3 	bl	80002cc <__adddf3>
 8005ae6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ae8:	4b32      	ldr	r3, [pc, #200]	@ (8005bb4 <__ieee754_pow+0x794>)
 8005aea:	4413      	add	r3, r2
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f7fa fbec 	bl	80002cc <__adddf3>
 8005af4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005af8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005afa:	f7fa fd33 	bl	8000564 <__aeabi_i2d>
 8005afe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b00:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb8 <__ieee754_pow+0x798>)
 8005b02:	4413      	add	r3, r2
 8005b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b08:	4606      	mov	r6, r0
 8005b0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b0e:	460f      	mov	r7, r1
 8005b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b14:	f7fa fbda 	bl	80002cc <__adddf3>
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	f7fa fbd6 	bl	80002cc <__adddf3>
 8005b20:	4632      	mov	r2, r6
 8005b22:	463b      	mov	r3, r7
 8005b24:	f7fa fbd2 	bl	80002cc <__adddf3>
 8005b28:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	463b      	mov	r3, r7
 8005b30:	4658      	mov	r0, fp
 8005b32:	460d      	mov	r5, r1
 8005b34:	f7fa fbc8 	bl	80002c8 <__aeabi_dsub>
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	f7fa fbc4 	bl	80002c8 <__aeabi_dsub>
 8005b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b44:	f7fa fbc0 	bl	80002c8 <__aeabi_dsub>
 8005b48:	465c      	mov	r4, fp
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	e036      	b.n	8005bbc <__ieee754_pow+0x79c>
 8005b4e:	bf00      	nop
 8005b50:	4a454eef 	.word	0x4a454eef
 8005b54:	3fca7e28 	.word	0x3fca7e28
 8005b58:	93c9db65 	.word	0x93c9db65
 8005b5c:	3fcd864a 	.word	0x3fcd864a
 8005b60:	a91d4101 	.word	0xa91d4101
 8005b64:	3fd17460 	.word	0x3fd17460
 8005b68:	518f264d 	.word	0x518f264d
 8005b6c:	3fd55555 	.word	0x3fd55555
 8005b70:	db6fabff 	.word	0xdb6fabff
 8005b74:	3fdb6db6 	.word	0x3fdb6db6
 8005b78:	33333303 	.word	0x33333303
 8005b7c:	3fe33333 	.word	0x3fe33333
 8005b80:	e0000000 	.word	0xe0000000
 8005b84:	3feec709 	.word	0x3feec709
 8005b88:	dc3a03fd 	.word	0xdc3a03fd
 8005b8c:	3feec709 	.word	0x3feec709
 8005b90:	145b01f5 	.word	0x145b01f5
 8005b94:	be3e2fe0 	.word	0xbe3e2fe0
 8005b98:	7ff00000 	.word	0x7ff00000
 8005b9c:	43400000 	.word	0x43400000
 8005ba0:	0003988e 	.word	0x0003988e
 8005ba4:	000bb679 	.word	0x000bb679
 8005ba8:	08006480 	.word	0x08006480
 8005bac:	3ff00000 	.word	0x3ff00000
 8005bb0:	40080000 	.word	0x40080000
 8005bb4:	08006460 	.word	0x08006460
 8005bb8:	08006470 	.word	0x08006470
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc2:	e5d7      	b.n	8005774 <__ieee754_pow+0x354>
 8005bc4:	f04f 0a01 	mov.w	sl, #1
 8005bc8:	e65e      	b.n	8005888 <__ieee754_pow+0x468>
 8005bca:	a3b4      	add	r3, pc, #720	@ (adr r3, 8005e9c <__ieee754_pow+0xa7c>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa fb7a 	bl	80002cc <__adddf3>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	e9cd 0100 	strd	r0, r1, [sp]
 8005bde:	464b      	mov	r3, r9
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa fb70 	bl	80002c8 <__aeabi_dsub>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bf0:	f7fa ffb2 	bl	8000b58 <__aeabi_dcmpgt>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f47f ae00 	bne.w	80057fa <__ieee754_pow+0x3da>
 8005bfa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005bfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005c02:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005c06:	fa43 fa0a 	asr.w	sl, r3, sl
 8005c0a:	44da      	add	sl, fp
 8005c0c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005c10:	489d      	ldr	r0, [pc, #628]	@ (8005e88 <__ieee754_pow+0xa68>)
 8005c12:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005c16:	4108      	asrs	r0, r1
 8005c18:	ea00 030a 	and.w	r3, r0, sl
 8005c1c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005c20:	f1c1 0114 	rsb	r1, r1, #20
 8005c24:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005c28:	fa4a fa01 	asr.w	sl, sl, r1
 8005c2c:	f1bb 0f00 	cmp.w	fp, #0
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	bfb8      	it	lt
 8005c3a:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c3e:	f7fa fb43 	bl	80002c8 <__aeabi_dsub>
 8005c42:	4680      	mov	r8, r0
 8005c44:	4689      	mov	r9, r1
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fb3d 	bl	80002cc <__adddf3>
 8005c52:	2400      	movs	r4, #0
 8005c54:	a37c      	add	r3, pc, #496	@ (adr r3, 8005e48 <__ieee754_pow+0xa28>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	460d      	mov	r5, r1
 8005c5e:	f7fa fceb 	bl	8000638 <__aeabi_dmul>
 8005c62:	4642      	mov	r2, r8
 8005c64:	e9cd 0100 	strd	r0, r1, [sp]
 8005c68:	464b      	mov	r3, r9
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	f7fa fb2b 	bl	80002c8 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4630      	mov	r0, r6
 8005c78:	4639      	mov	r1, r7
 8005c7a:	f7fa fb25 	bl	80002c8 <__aeabi_dsub>
 8005c7e:	a374      	add	r3, pc, #464	@ (adr r3, 8005e50 <__ieee754_pow+0xa30>)
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f7fa fcd8 	bl	8000638 <__aeabi_dmul>
 8005c88:	a373      	add	r3, pc, #460	@ (adr r3, 8005e58 <__ieee754_pow+0xa38>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	4680      	mov	r8, r0
 8005c90:	4689      	mov	r9, r1
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa fccf 	bl	8000638 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	f7fa fb13 	bl	80002cc <__adddf3>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb2:	f7fa fb0b 	bl	80002cc <__adddf3>
 8005cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cba:	4680      	mov	r8, r0
 8005cbc:	4689      	mov	r9, r1
 8005cbe:	f7fa fb03 	bl	80002c8 <__aeabi_dsub>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7fa fafd 	bl	80002c8 <__aeabi_dsub>
 8005cce:	4642      	mov	r2, r8
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	4649      	mov	r1, r9
 8005cda:	f7fa fcad 	bl	8000638 <__aeabi_dmul>
 8005cde:	a360      	add	r3, pc, #384	@ (adr r3, 8005e60 <__ieee754_pow+0xa40>)
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	f7fa fca6 	bl	8000638 <__aeabi_dmul>
 8005cec:	a35e      	add	r3, pc, #376	@ (adr r3, 8005e68 <__ieee754_pow+0xa48>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa fae9 	bl	80002c8 <__aeabi_dsub>
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	f7fa fc9d 	bl	8000638 <__aeabi_dmul>
 8005cfe:	a35c      	add	r3, pc, #368	@ (adr r3, 8005e70 <__ieee754_pow+0xa50>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fae2 	bl	80002cc <__adddf3>
 8005d08:	4622      	mov	r2, r4
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	f7fa fc94 	bl	8000638 <__aeabi_dmul>
 8005d10:	a359      	add	r3, pc, #356	@ (adr r3, 8005e78 <__ieee754_pow+0xa58>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fad7 	bl	80002c8 <__aeabi_dsub>
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	f7fa fc8b 	bl	8000638 <__aeabi_dmul>
 8005d22:	a357      	add	r3, pc, #348	@ (adr r3, 8005e80 <__ieee754_pow+0xa60>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fad0 	bl	80002cc <__adddf3>
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	462b      	mov	r3, r5
 8005d30:	f7fa fc82 	bl	8000638 <__aeabi_dmul>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4640      	mov	r0, r8
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	f7fa fac4 	bl	80002c8 <__aeabi_dsub>
 8005d40:	4604      	mov	r4, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4640      	mov	r0, r8
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	f7fa fc74 	bl	8000638 <__aeabi_dmul>
 8005d50:	2200      	movs	r2, #0
 8005d52:	e9cd 0100 	strd	r0, r1, [sp]
 8005d56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fab3 	bl	80002c8 <__aeabi_dsub>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6a:	f7fa fd8f 	bl	800088c <__aeabi_ddiv>
 8005d6e:	4632      	mov	r2, r6
 8005d70:	4604      	mov	r4, r0
 8005d72:	460d      	mov	r5, r1
 8005d74:	463b      	mov	r3, r7
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa fc5d 	bl	8000638 <__aeabi_dmul>
 8005d7e:	4632      	mov	r2, r6
 8005d80:	463b      	mov	r3, r7
 8005d82:	f7fa faa3 	bl	80002cc <__adddf3>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa fa9b 	bl	80002c8 <__aeabi_dsub>
 8005d92:	4642      	mov	r2, r8
 8005d94:	464b      	mov	r3, r9
 8005d96:	f7fa fa97 	bl	80002c8 <__aeabi_dsub>
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	493b      	ldr	r1, [pc, #236]	@ (8005e8c <__ieee754_pow+0xa6c>)
 8005da0:	2000      	movs	r0, #0
 8005da2:	f7fa fa91 	bl	80002c8 <__aeabi_dsub>
 8005da6:	ec41 0b10 	vmov	d0, r0, r1
 8005daa:	ee10 3a90 	vmov	r3, s1
 8005dae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db6:	da30      	bge.n	8005e1a <__ieee754_pow+0x9fa>
 8005db8:	4650      	mov	r0, sl
 8005dba:	f000 fa15 	bl	80061e8 <scalbn>
 8005dbe:	ec51 0b10 	vmov	r0, r1, d0
 8005dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc6:	f7ff bbd2 	b.w	800556e <__ieee754_pow+0x14e>
 8005dca:	4c31      	ldr	r4, [pc, #196]	@ (8005e90 <__ieee754_pow+0xa70>)
 8005dcc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	d91a      	bls.n	8005e0a <__ieee754_pow+0x9ea>
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <__ieee754_pow+0xa74>)
 8005dd6:	440b      	add	r3, r1
 8005dd8:	4303      	orrs	r3, r0
 8005dda:	d009      	beq.n	8005df0 <__ieee754_pow+0x9d0>
 8005ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	f7fa fe9a 	bl	8000b1c <__aeabi_dcmplt>
 8005de8:	3800      	subs	r0, #0
 8005dea:	bf18      	it	ne
 8005dec:	2001      	movne	r0, #1
 8005dee:	e42b      	b.n	8005648 <__ieee754_pow+0x228>
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	f7fa fa68 	bl	80002c8 <__aeabi_dsub>
 8005df8:	4632      	mov	r2, r6
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	f7fa fea2 	bl	8000b44 <__aeabi_dcmpge>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d1eb      	bne.n	8005ddc <__ieee754_pow+0x9bc>
 8005e04:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8005ea4 <__ieee754_pow+0xa84>
 8005e08:	e6f7      	b.n	8005bfa <__ieee754_pow+0x7da>
 8005e0a:	469a      	mov	sl, r3
 8005e0c:	4b22      	ldr	r3, [pc, #136]	@ (8005e98 <__ieee754_pow+0xa78>)
 8005e0e:	459a      	cmp	sl, r3
 8005e10:	f63f aef3 	bhi.w	8005bfa <__ieee754_pow+0x7da>
 8005e14:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005e18:	e715      	b.n	8005c46 <__ieee754_pow+0x826>
 8005e1a:	ec51 0b10 	vmov	r0, r1, d0
 8005e1e:	4619      	mov	r1, r3
 8005e20:	e7cf      	b.n	8005dc2 <__ieee754_pow+0x9a2>
 8005e22:	491a      	ldr	r1, [pc, #104]	@ (8005e8c <__ieee754_pow+0xa6c>)
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7ff bb18 	b.w	800545a <__ieee754_pow+0x3a>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	f7ff bb14 	b.w	800545a <__ieee754_pow+0x3a>
 8005e32:	4630      	mov	r0, r6
 8005e34:	4639      	mov	r1, r7
 8005e36:	f7ff bb10 	b.w	800545a <__ieee754_pow+0x3a>
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	f7ff bb5e 	b.w	80054fc <__ieee754_pow+0xdc>
 8005e40:	2400      	movs	r4, #0
 8005e42:	f7ff bb49 	b.w	80054d8 <__ieee754_pow+0xb8>
 8005e46:	bf00      	nop
 8005e48:	00000000 	.word	0x00000000
 8005e4c:	3fe62e43 	.word	0x3fe62e43
 8005e50:	fefa39ef 	.word	0xfefa39ef
 8005e54:	3fe62e42 	.word	0x3fe62e42
 8005e58:	0ca86c39 	.word	0x0ca86c39
 8005e5c:	be205c61 	.word	0xbe205c61
 8005e60:	72bea4d0 	.word	0x72bea4d0
 8005e64:	3e663769 	.word	0x3e663769
 8005e68:	c5d26bf1 	.word	0xc5d26bf1
 8005e6c:	3ebbbd41 	.word	0x3ebbbd41
 8005e70:	af25de2c 	.word	0xaf25de2c
 8005e74:	3f11566a 	.word	0x3f11566a
 8005e78:	16bebd93 	.word	0x16bebd93
 8005e7c:	3f66c16c 	.word	0x3f66c16c
 8005e80:	5555553e 	.word	0x5555553e
 8005e84:	3fc55555 	.word	0x3fc55555
 8005e88:	fff00000 	.word	0xfff00000
 8005e8c:	3ff00000 	.word	0x3ff00000
 8005e90:	4090cbff 	.word	0x4090cbff
 8005e94:	3f6f3400 	.word	0x3f6f3400
 8005e98:	3fe00000 	.word	0x3fe00000
 8005e9c:	652b82fe 	.word	0x652b82fe
 8005ea0:	3c971547 	.word	0x3c971547
 8005ea4:	4090cc00 	.word	0x4090cc00

08005ea8 <atan>:
 8005ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	ec55 4b10 	vmov	r4, r5, d0
 8005eb0:	4bbf      	ldr	r3, [pc, #764]	@ (80061b0 <atan+0x308>)
 8005eb2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005eb6:	429e      	cmp	r6, r3
 8005eb8:	46ab      	mov	fp, r5
 8005eba:	d918      	bls.n	8005eee <atan+0x46>
 8005ebc:	4bbd      	ldr	r3, [pc, #756]	@ (80061b4 <atan+0x30c>)
 8005ebe:	429e      	cmp	r6, r3
 8005ec0:	d801      	bhi.n	8005ec6 <atan+0x1e>
 8005ec2:	d109      	bne.n	8005ed8 <atan+0x30>
 8005ec4:	b144      	cbz	r4, 8005ed8 <atan+0x30>
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	462b      	mov	r3, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	4629      	mov	r1, r5
 8005ece:	f7fa f9fd 	bl	80002cc <__adddf3>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	e006      	b.n	8005ee6 <atan+0x3e>
 8005ed8:	f1bb 0f00 	cmp.w	fp, #0
 8005edc:	f340 812b 	ble.w	8006136 <atan+0x28e>
 8005ee0:	a597      	add	r5, pc, #604	@ (adr r5, 8006140 <atan+0x298>)
 8005ee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ee6:	ec45 4b10 	vmov	d0, r4, r5
 8005eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	4bb2      	ldr	r3, [pc, #712]	@ (80061b8 <atan+0x310>)
 8005ef0:	429e      	cmp	r6, r3
 8005ef2:	d813      	bhi.n	8005f1c <atan+0x74>
 8005ef4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005ef8:	429e      	cmp	r6, r3
 8005efa:	d80c      	bhi.n	8005f16 <atan+0x6e>
 8005efc:	a392      	add	r3, pc, #584	@ (adr r3, 8006148 <atan+0x2a0>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa f9e1 	bl	80002cc <__adddf3>
 8005f0a:	4bac      	ldr	r3, [pc, #688]	@ (80061bc <atan+0x314>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f7fa fe23 	bl	8000b58 <__aeabi_dcmpgt>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1e7      	bne.n	8005ee6 <atan+0x3e>
 8005f16:	f04f 3aff 	mov.w	sl, #4294967295
 8005f1a:	e029      	b.n	8005f70 <atan+0xc8>
 8005f1c:	f000 f95c 	bl	80061d8 <fabs>
 8005f20:	4ba7      	ldr	r3, [pc, #668]	@ (80061c0 <atan+0x318>)
 8005f22:	429e      	cmp	r6, r3
 8005f24:	ec55 4b10 	vmov	r4, r5, d0
 8005f28:	f200 80bc 	bhi.w	80060a4 <atan+0x1fc>
 8005f2c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005f30:	429e      	cmp	r6, r3
 8005f32:	f200 809e 	bhi.w	8006072 <atan+0x1ca>
 8005f36:	4622      	mov	r2, r4
 8005f38:	462b      	mov	r3, r5
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7fa f9c5 	bl	80002cc <__adddf3>
 8005f42:	4b9e      	ldr	r3, [pc, #632]	@ (80061bc <atan+0x314>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	f7fa f9bf 	bl	80002c8 <__aeabi_dsub>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	460f      	mov	r7, r1
 8005f50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005f54:	4620      	mov	r0, r4
 8005f56:	4629      	mov	r1, r5
 8005f58:	f7fa f9b8 	bl	80002cc <__adddf3>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4630      	mov	r0, r6
 8005f62:	4639      	mov	r1, r7
 8005f64:	f7fa fc92 	bl	800088c <__aeabi_ddiv>
 8005f68:	f04f 0a00 	mov.w	sl, #0
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	460d      	mov	r5, r1
 8005f70:	4622      	mov	r2, r4
 8005f72:	462b      	mov	r3, r5
 8005f74:	4620      	mov	r0, r4
 8005f76:	4629      	mov	r1, r5
 8005f78:	f7fa fb5e 	bl	8000638 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4680      	mov	r8, r0
 8005f82:	4689      	mov	r9, r1
 8005f84:	f7fa fb58 	bl	8000638 <__aeabi_dmul>
 8005f88:	a371      	add	r3, pc, #452	@ (adr r3, 8006150 <atan+0x2a8>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460f      	mov	r7, r1
 8005f92:	f7fa fb51 	bl	8000638 <__aeabi_dmul>
 8005f96:	a370      	add	r3, pc, #448	@ (adr r3, 8006158 <atan+0x2b0>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa f996 	bl	80002cc <__adddf3>
 8005fa0:	4632      	mov	r2, r6
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	f7fa fb48 	bl	8000638 <__aeabi_dmul>
 8005fa8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006160 <atan+0x2b8>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa f98d 	bl	80002cc <__adddf3>
 8005fb2:	4632      	mov	r2, r6
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	f7fa fb3f 	bl	8000638 <__aeabi_dmul>
 8005fba:	a36b      	add	r3, pc, #428	@ (adr r3, 8006168 <atan+0x2c0>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa f984 	bl	80002cc <__adddf3>
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	f7fa fb36 	bl	8000638 <__aeabi_dmul>
 8005fcc:	a368      	add	r3, pc, #416	@ (adr r3, 8006170 <atan+0x2c8>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f97b 	bl	80002cc <__adddf3>
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	463b      	mov	r3, r7
 8005fda:	f7fa fb2d 	bl	8000638 <__aeabi_dmul>
 8005fde:	a366      	add	r3, pc, #408	@ (adr r3, 8006178 <atan+0x2d0>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa f972 	bl	80002cc <__adddf3>
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	f7fa fb24 	bl	8000638 <__aeabi_dmul>
 8005ff0:	a363      	add	r3, pc, #396	@ (adr r3, 8006180 <atan+0x2d8>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa fb1b 	bl	8000638 <__aeabi_dmul>
 8006002:	a361      	add	r3, pc, #388	@ (adr r3, 8006188 <atan+0x2e0>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa f95e 	bl	80002c8 <__aeabi_dsub>
 800600c:	4632      	mov	r2, r6
 800600e:	463b      	mov	r3, r7
 8006010:	f7fa fb12 	bl	8000638 <__aeabi_dmul>
 8006014:	a35e      	add	r3, pc, #376	@ (adr r3, 8006190 <atan+0x2e8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa f955 	bl	80002c8 <__aeabi_dsub>
 800601e:	4632      	mov	r2, r6
 8006020:	463b      	mov	r3, r7
 8006022:	f7fa fb09 	bl	8000638 <__aeabi_dmul>
 8006026:	a35c      	add	r3, pc, #368	@ (adr r3, 8006198 <atan+0x2f0>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa f94c 	bl	80002c8 <__aeabi_dsub>
 8006030:	4632      	mov	r2, r6
 8006032:	463b      	mov	r3, r7
 8006034:	f7fa fb00 	bl	8000638 <__aeabi_dmul>
 8006038:	a359      	add	r3, pc, #356	@ (adr r3, 80061a0 <atan+0x2f8>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa f943 	bl	80002c8 <__aeabi_dsub>
 8006042:	4632      	mov	r2, r6
 8006044:	463b      	mov	r3, r7
 8006046:	f7fa faf7 	bl	8000638 <__aeabi_dmul>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4640      	mov	r0, r8
 8006050:	4649      	mov	r1, r9
 8006052:	f7fa f93b 	bl	80002cc <__adddf3>
 8006056:	4622      	mov	r2, r4
 8006058:	462b      	mov	r3, r5
 800605a:	f7fa faed 	bl	8000638 <__aeabi_dmul>
 800605e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	d148      	bne.n	80060fa <atan+0x252>
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	f7fa f92c 	bl	80002c8 <__aeabi_dsub>
 8006070:	e72f      	b.n	8005ed2 <atan+0x2a>
 8006072:	4b52      	ldr	r3, [pc, #328]	@ (80061bc <atan+0x314>)
 8006074:	2200      	movs	r2, #0
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa f925 	bl	80002c8 <__aeabi_dsub>
 800607e:	4b4f      	ldr	r3, [pc, #316]	@ (80061bc <atan+0x314>)
 8006080:	4606      	mov	r6, r0
 8006082:	460f      	mov	r7, r1
 8006084:	2200      	movs	r2, #0
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	f7fa f91f 	bl	80002cc <__adddf3>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4630      	mov	r0, r6
 8006094:	4639      	mov	r1, r7
 8006096:	f7fa fbf9 	bl	800088c <__aeabi_ddiv>
 800609a:	f04f 0a01 	mov.w	sl, #1
 800609e:	4604      	mov	r4, r0
 80060a0:	460d      	mov	r5, r1
 80060a2:	e765      	b.n	8005f70 <atan+0xc8>
 80060a4:	4b47      	ldr	r3, [pc, #284]	@ (80061c4 <atan+0x31c>)
 80060a6:	429e      	cmp	r6, r3
 80060a8:	d21c      	bcs.n	80060e4 <atan+0x23c>
 80060aa:	4b47      	ldr	r3, [pc, #284]	@ (80061c8 <atan+0x320>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	4620      	mov	r0, r4
 80060b0:	4629      	mov	r1, r5
 80060b2:	f7fa f909 	bl	80002c8 <__aeabi_dsub>
 80060b6:	4b44      	ldr	r3, [pc, #272]	@ (80061c8 <atan+0x320>)
 80060b8:	4606      	mov	r6, r0
 80060ba:	460f      	mov	r7, r1
 80060bc:	2200      	movs	r2, #0
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa fab9 	bl	8000638 <__aeabi_dmul>
 80060c6:	4b3d      	ldr	r3, [pc, #244]	@ (80061bc <atan+0x314>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	f7fa f8ff 	bl	80002cc <__adddf3>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4630      	mov	r0, r6
 80060d4:	4639      	mov	r1, r7
 80060d6:	f7fa fbd9 	bl	800088c <__aeabi_ddiv>
 80060da:	f04f 0a02 	mov.w	sl, #2
 80060de:	4604      	mov	r4, r0
 80060e0:	460d      	mov	r5, r1
 80060e2:	e745      	b.n	8005f70 <atan+0xc8>
 80060e4:	4622      	mov	r2, r4
 80060e6:	462b      	mov	r3, r5
 80060e8:	4938      	ldr	r1, [pc, #224]	@ (80061cc <atan+0x324>)
 80060ea:	2000      	movs	r0, #0
 80060ec:	f7fa fbce 	bl	800088c <__aeabi_ddiv>
 80060f0:	f04f 0a03 	mov.w	sl, #3
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	e73a      	b.n	8005f70 <atan+0xc8>
 80060fa:	4b35      	ldr	r3, [pc, #212]	@ (80061d0 <atan+0x328>)
 80060fc:	4e35      	ldr	r6, [pc, #212]	@ (80061d4 <atan+0x32c>)
 80060fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa f8df 	bl	80002c8 <__aeabi_dsub>
 800610a:	4622      	mov	r2, r4
 800610c:	462b      	mov	r3, r5
 800610e:	f7fa f8db 	bl	80002c8 <__aeabi_dsub>
 8006112:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800611e:	f7fa f8d3 	bl	80002c8 <__aeabi_dsub>
 8006122:	f1bb 0f00 	cmp.w	fp, #0
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	f6bf aedc 	bge.w	8005ee6 <atan+0x3e>
 800612e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006132:	461d      	mov	r5, r3
 8006134:	e6d7      	b.n	8005ee6 <atan+0x3e>
 8006136:	a51c      	add	r5, pc, #112	@ (adr r5, 80061a8 <atan+0x300>)
 8006138:	e9d5 4500 	ldrd	r4, r5, [r5]
 800613c:	e6d3      	b.n	8005ee6 <atan+0x3e>
 800613e:	bf00      	nop
 8006140:	54442d18 	.word	0x54442d18
 8006144:	3ff921fb 	.word	0x3ff921fb
 8006148:	8800759c 	.word	0x8800759c
 800614c:	7e37e43c 	.word	0x7e37e43c
 8006150:	e322da11 	.word	0xe322da11
 8006154:	3f90ad3a 	.word	0x3f90ad3a
 8006158:	24760deb 	.word	0x24760deb
 800615c:	3fa97b4b 	.word	0x3fa97b4b
 8006160:	a0d03d51 	.word	0xa0d03d51
 8006164:	3fb10d66 	.word	0x3fb10d66
 8006168:	c54c206e 	.word	0xc54c206e
 800616c:	3fb745cd 	.word	0x3fb745cd
 8006170:	920083ff 	.word	0x920083ff
 8006174:	3fc24924 	.word	0x3fc24924
 8006178:	5555550d 	.word	0x5555550d
 800617c:	3fd55555 	.word	0x3fd55555
 8006180:	2c6a6c2f 	.word	0x2c6a6c2f
 8006184:	bfa2b444 	.word	0xbfa2b444
 8006188:	52defd9a 	.word	0x52defd9a
 800618c:	3fadde2d 	.word	0x3fadde2d
 8006190:	af749a6d 	.word	0xaf749a6d
 8006194:	3fb3b0f2 	.word	0x3fb3b0f2
 8006198:	fe231671 	.word	0xfe231671
 800619c:	3fbc71c6 	.word	0x3fbc71c6
 80061a0:	9998ebc4 	.word	0x9998ebc4
 80061a4:	3fc99999 	.word	0x3fc99999
 80061a8:	54442d18 	.word	0x54442d18
 80061ac:	bff921fb 	.word	0xbff921fb
 80061b0:	440fffff 	.word	0x440fffff
 80061b4:	7ff00000 	.word	0x7ff00000
 80061b8:	3fdbffff 	.word	0x3fdbffff
 80061bc:	3ff00000 	.word	0x3ff00000
 80061c0:	3ff2ffff 	.word	0x3ff2ffff
 80061c4:	40038000 	.word	0x40038000
 80061c8:	3ff80000 	.word	0x3ff80000
 80061cc:	bff00000 	.word	0xbff00000
 80061d0:	08006490 	.word	0x08006490
 80061d4:	080064b0 	.word	0x080064b0

080061d8 <fabs>:
 80061d8:	ec51 0b10 	vmov	r0, r1, d0
 80061dc:	4602      	mov	r2, r0
 80061de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80061e2:	ec43 2b10 	vmov	d0, r2, r3
 80061e6:	4770      	bx	lr

080061e8 <scalbn>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	ec55 4b10 	vmov	r4, r5, d0
 80061ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80061f2:	4606      	mov	r6, r0
 80061f4:	462b      	mov	r3, r5
 80061f6:	b991      	cbnz	r1, 800621e <scalbn+0x36>
 80061f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80061fc:	4323      	orrs	r3, r4
 80061fe:	d03d      	beq.n	800627c <scalbn+0x94>
 8006200:	4b35      	ldr	r3, [pc, #212]	@ (80062d8 <scalbn+0xf0>)
 8006202:	4620      	mov	r0, r4
 8006204:	4629      	mov	r1, r5
 8006206:	2200      	movs	r2, #0
 8006208:	f7fa fa16 	bl	8000638 <__aeabi_dmul>
 800620c:	4b33      	ldr	r3, [pc, #204]	@ (80062dc <scalbn+0xf4>)
 800620e:	429e      	cmp	r6, r3
 8006210:	4604      	mov	r4, r0
 8006212:	460d      	mov	r5, r1
 8006214:	da0f      	bge.n	8006236 <scalbn+0x4e>
 8006216:	a328      	add	r3, pc, #160	@ (adr r3, 80062b8 <scalbn+0xd0>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	e01e      	b.n	800625c <scalbn+0x74>
 800621e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006222:	4291      	cmp	r1, r2
 8006224:	d10b      	bne.n	800623e <scalbn+0x56>
 8006226:	4622      	mov	r2, r4
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7fa f84e 	bl	80002cc <__adddf3>
 8006230:	4604      	mov	r4, r0
 8006232:	460d      	mov	r5, r1
 8006234:	e022      	b.n	800627c <scalbn+0x94>
 8006236:	460b      	mov	r3, r1
 8006238:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800623c:	3936      	subs	r1, #54	@ 0x36
 800623e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006242:	4296      	cmp	r6, r2
 8006244:	dd0d      	ble.n	8006262 <scalbn+0x7a>
 8006246:	2d00      	cmp	r5, #0
 8006248:	a11d      	add	r1, pc, #116	@ (adr r1, 80062c0 <scalbn+0xd8>)
 800624a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624e:	da02      	bge.n	8006256 <scalbn+0x6e>
 8006250:	a11d      	add	r1, pc, #116	@ (adr r1, 80062c8 <scalbn+0xe0>)
 8006252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006256:	a31a      	add	r3, pc, #104	@ (adr r3, 80062c0 <scalbn+0xd8>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f9ec 	bl	8000638 <__aeabi_dmul>
 8006260:	e7e6      	b.n	8006230 <scalbn+0x48>
 8006262:	1872      	adds	r2, r6, r1
 8006264:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006268:	428a      	cmp	r2, r1
 800626a:	dcec      	bgt.n	8006246 <scalbn+0x5e>
 800626c:	2a00      	cmp	r2, #0
 800626e:	dd08      	ble.n	8006282 <scalbn+0x9a>
 8006270:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006274:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006278:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800627c:	ec45 4b10 	vmov	d0, r4, r5
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006286:	da08      	bge.n	800629a <scalbn+0xb2>
 8006288:	2d00      	cmp	r5, #0
 800628a:	a10b      	add	r1, pc, #44	@ (adr r1, 80062b8 <scalbn+0xd0>)
 800628c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006290:	dac1      	bge.n	8006216 <scalbn+0x2e>
 8006292:	a10f      	add	r1, pc, #60	@ (adr r1, 80062d0 <scalbn+0xe8>)
 8006294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006298:	e7bd      	b.n	8006216 <scalbn+0x2e>
 800629a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800629e:	3236      	adds	r2, #54	@ 0x36
 80062a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80062a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062a8:	4620      	mov	r0, r4
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <scalbn+0xf8>)
 80062ac:	4629      	mov	r1, r5
 80062ae:	2200      	movs	r2, #0
 80062b0:	e7d4      	b.n	800625c <scalbn+0x74>
 80062b2:	bf00      	nop
 80062b4:	f3af 8000 	nop.w
 80062b8:	c2f8f359 	.word	0xc2f8f359
 80062bc:	01a56e1f 	.word	0x01a56e1f
 80062c0:	8800759c 	.word	0x8800759c
 80062c4:	7e37e43c 	.word	0x7e37e43c
 80062c8:	8800759c 	.word	0x8800759c
 80062cc:	fe37e43c 	.word	0xfe37e43c
 80062d0:	c2f8f359 	.word	0xc2f8f359
 80062d4:	81a56e1f 	.word	0x81a56e1f
 80062d8:	43500000 	.word	0x43500000
 80062dc:	ffff3cb0 	.word	0xffff3cb0
 80062e0:	3c900000 	.word	0x3c900000

080062e4 <with_errno>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	ed2d 8b02 	vpush	{d8}
 80062ea:	eeb0 8a40 	vmov.f32	s16, s0
 80062ee:	eef0 8a60 	vmov.f32	s17, s1
 80062f2:	4604      	mov	r4, r0
 80062f4:	f7fe f9d0 	bl	8004698 <__errno>
 80062f8:	eeb0 0a48 	vmov.f32	s0, s16
 80062fc:	eef0 0a68 	vmov.f32	s1, s17
 8006300:	ecbd 8b02 	vpop	{d8}
 8006304:	6004      	str	r4, [r0, #0]
 8006306:	bd10      	pop	{r4, pc}

08006308 <xflow>:
 8006308:	4603      	mov	r3, r0
 800630a:	b507      	push	{r0, r1, r2, lr}
 800630c:	ec51 0b10 	vmov	r0, r1, d0
 8006310:	b183      	cbz	r3, 8006334 <xflow+0x2c>
 8006312:	4602      	mov	r2, r0
 8006314:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006318:	e9cd 2300 	strd	r2, r3, [sp]
 800631c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006320:	f7fa f98a 	bl	8000638 <__aeabi_dmul>
 8006324:	ec41 0b10 	vmov	d0, r0, r1
 8006328:	2022      	movs	r0, #34	@ 0x22
 800632a:	b003      	add	sp, #12
 800632c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006330:	f7ff bfd8 	b.w	80062e4 <with_errno>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	e7ee      	b.n	8006318 <xflow+0x10>
 800633a:	0000      	movs	r0, r0
 800633c:	0000      	movs	r0, r0
	...

08006340 <__math_uflow>:
 8006340:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006348 <__math_uflow+0x8>
 8006344:	f7ff bfe0 	b.w	8006308 <xflow>
 8006348:	00000000 	.word	0x00000000
 800634c:	10000000 	.word	0x10000000

08006350 <__math_oflow>:
 8006350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006358 <__math_oflow+0x8>
 8006354:	f7ff bfd8 	b.w	8006308 <xflow>
 8006358:	00000000 	.word	0x00000000
 800635c:	70000000 	.word	0x70000000

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
