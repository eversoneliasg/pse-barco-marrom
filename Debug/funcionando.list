
funcionando.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08007b98  08007b98  00008b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee8  08007ee8  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee8  08007ee8  00008ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef0  08007ef0  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef0  08007ef0  00008ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ef4  08007ef4  00008ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007ef8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000088  08007f80  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  08007f80  00009988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da21  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002207  00000000  00000000  00016ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00018ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  000197f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225a8  00000000  00000000  0001a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b6  00000000  00000000  0003c641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc36c  00000000  00000000  0004c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118b63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a0  00000000  00000000  00118ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  0011c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b80 	.word	0x08007b80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08007b80 	.word	0x08007b80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <ble_Init>:
uint8_t uartBuffer[MAX_SIZE_UART_BUFFER];

scan_t gScan;

void ble_Init(BLE_HandleTypeDef* handler)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    ble_SetName(handler->huart, handler->name);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f000 f870 	bl	8001070 <ble_SetName>
    ble_SetRole(handler->huart, handler->role);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a5b      	ldrb	r3, [r3, #9]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	f000 f8b2 	bl	8001104 <ble_SetRole>
    ble_SetBaudRate(handler->huart, handler->baudRate);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7a1b      	ldrb	r3, [r3, #8]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f000 f884 	bl	80010b8 <ble_SetBaudRate>
    ble_SetParity(handler->huart, handler->parity);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7a9b      	ldrb	r3, [r3, #10]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f000 f8c8 	bl	8001150 <ble_SetParity>
    ble_SetStopBit(handler->huart, handler->stopBit);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7adb      	ldrb	r3, [r3, #11]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f000 f8e6 	bl	800119c <ble_SetStopBit>

    HAL_Delay(200);
 8000fd0:	20c8      	movs	r0, #200	@ 0xc8
 8000fd2:	f001 f961 	bl	8002298 <HAL_Delay>

    gScan.size = 0;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <ble_Init+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
    memset(uartBuffer, 0, sizeof(uartBuffer));
 8000fde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <ble_Init+0xa4>)
 8000fe6:	f004 ff39 	bl	8005e5c <memset>
    __HAL_UART_ENABLE_IT(handler->huart, UART_IT_IDLE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0210 	orr.w	r2, r2, #16
 8000ffc:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(handler->huart, uartBuffer, sizeof(uartBuffer));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001006:	4905      	ldr	r1, [pc, #20]	@ (800101c <ble_Init+0xa4>)
 8001008:	4618      	mov	r0, r3
 800100a:	f003 fcbf 	bl	800498c <HAL_UART_Receive_DMA>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000048c 	.word	0x2000048c
 800101c:	200000a4 	.word	0x200000a4

08001020 <ble_SendData>:

void ble_SendData(UART_HandleTypeDef* huart, char *data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    char package[MAX_SIZE_DATA + 4];
    memset(package, 0, MAX_SIZE_DATA + 4);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2222      	movs	r2, #34	@ 0x22
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 ff12 	bl	8005e5c <memset>
    sprintf(package, "%s\r\n", data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	490b      	ldr	r1, [pc, #44]	@ (800106c <ble_SendData+0x4c>)
 8001040:	4618      	mov	r0, r3
 8001042:	f004 feeb 	bl	8005e1c <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)package, strlen(package), HAL_MAX_DELAY);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff f8e0 	bl	8000210 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	f107 010c 	add.w	r1, r7, #12
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f003 fb73 	bl	8004748 <HAL_UART_Transmit>
}
 8001062:	bf00      	nop
 8001064:	3730      	adds	r7, #48	@ 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08007bcc 	.word	0x08007bcc

08001070 <ble_SetName>:

void ble_SetName(UART_HandleTypeDef* huart, char *name)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    char *instruction = atInstructions[SET_NAME];
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <ble_SetName+0x40>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char data[MAX_SIZE_DATA];
    memset(data, 0, MAX_SIZE_DATA);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	221e      	movs	r2, #30
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fee7 	bl	8005e5c <memset>
    sprintf(data, "%s%s", instruction, name);
 800108e:	f107 000c 	add.w	r0, r7, #12
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001096:	4907      	ldr	r1, [pc, #28]	@ (80010b4 <ble_SetName+0x44>)
 8001098:	f004 fec0 	bl	8005e1c <siprintf>
    ble_SendData(huart, data);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffbc 	bl	8001020 <ble_SendData>
}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	@ 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	08007bd4 	.word	0x08007bd4

080010b8 <ble_SetBaudRate>:

void ble_SetBaudRate(UART_HandleTypeDef* huart, BaudRate_t baudRate)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
    char *instruction = atInstructions[SET_BAUD_RATE];
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <ble_SetBaudRate+0x44>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char data[MAX_SIZE_DATA];
    memset(data, 0, MAX_SIZE_DATA);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	221e      	movs	r2, #30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fec2 	bl	8005e5c <memset>
    sprintf(data, "%s%d", instruction, baudRate);
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	f107 000c 	add.w	r0, r7, #12
 80010de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010e0:	4907      	ldr	r1, [pc, #28]	@ (8001100 <ble_SetBaudRate+0x48>)
 80010e2:	f004 fe9b 	bl	8005e1c <siprintf>
    ble_SendData(huart, data);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff97 	bl	8001020 <ble_SendData>
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	@ 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000
 8001100:	08007bdc 	.word	0x08007bdc

08001104 <ble_SetRole>:

void ble_SetRole(UART_HandleTypeDef* huart, RoleParam_t role)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
    char *instruction = atInstructions[SET_ROLE];
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <ble_SetRole+0x44>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char data[MAX_SIZE_DATA];
    memset(data, 0, MAX_SIZE_DATA);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	221e      	movs	r2, #30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fe9c 	bl	8005e5c <memset>
    sprintf(data, "%s%d", instruction, role);
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	f107 000c 	add.w	r0, r7, #12
 800112a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800112c:	4907      	ldr	r1, [pc, #28]	@ (800114c <ble_SetRole+0x48>)
 800112e:	f004 fe75 	bl	8005e1c <siprintf>
    ble_SendData(huart, data);
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff71 	bl	8001020 <ble_SendData>
}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	@ 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	08007bdc 	.word	0x08007bdc

08001150 <ble_SetParity>:

void ble_SetParity(UART_HandleTypeDef* huart, ParityParam_t parity)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    char *instruction = atInstructions[SET_PARITY];
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <ble_SetParity+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char data[MAX_SIZE_DATA];
    memset(data, 0, MAX_SIZE_DATA);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	221e      	movs	r2, #30
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fe76 	bl	8005e5c <memset>
    sprintf(data, "%s%d", instruction, parity);
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	f107 000c 	add.w	r0, r7, #12
 8001176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001178:	4907      	ldr	r1, [pc, #28]	@ (8001198 <ble_SetParity+0x48>)
 800117a:	f004 fe4f 	bl	8005e1c <siprintf>
    ble_SendData(huart, data);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff4b 	bl	8001020 <ble_SendData>
}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	@ 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	08007bdc 	.word	0x08007bdc

0800119c <ble_SetStopBit>:

void ble_SetStopBit(UART_HandleTypeDef* huart, uint8_t stopBit)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	@ 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
    char *instruction = atInstructions[SET_STOP_BIT];
 80011a8:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <ble_SetStopBit+0x44>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char data[MAX_SIZE_DATA];
    memset(data, 0, MAX_SIZE_DATA);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	221e      	movs	r2, #30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fe50 	bl	8005e5c <memset>
    sprintf(data, "%s%d", instruction, stopBit);
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	f107 000c 	add.w	r0, r7, #12
 80011c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <ble_SetStopBit+0x48>)
 80011c6:	f004 fe29 	bl	8005e1c <siprintf>
    ble_SendData(huart, data);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff25 	bl	8001020 <ble_SendData>
}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	@ 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000000 	.word	0x20000000
 80011e4:	08007bdc 	.word	0x08007bdc

080011e8 <ble_InquireDevices>:

void ble_InquireDevices(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	@ 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    char *instruction = atInstructions[MASTER_SCAN_SLAVE];
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <ble_InquireDevices+0x40>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char data[MAX_SIZE_DATA];
    memset(data, 0, MAX_SIZE_DATA);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	221e      	movs	r2, #30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fe2c 	bl	8005e5c <memset>
    sprintf(data, "%s", instruction);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <ble_InquireDevices+0x44>)
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fe05 	bl	8005e1c <siprintf>
    ble_SendData(huart, data);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff01 	bl	8001020 <ble_SendData>
}
 800121e:	bf00      	nop
 8001220:	3730      	adds	r7, #48	@ 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000000 	.word	0x20000000
 800122c:	08007be4 	.word	0x08007be4

08001230 <ble_LoadDeviceInfo>:
{
    *scan = gScan;
}

void ble_LoadDeviceInfo(char* start, char* end, device_t* device)
{
 8001230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001234:	b091      	sub	sp, #68	@ 0x44
 8001236:	af00      	add	r7, sp, #0
 8001238:	6178      	str	r0, [r7, #20]
 800123a:	6139      	str	r1, [r7, #16]
 800123c:	60fa      	str	r2, [r7, #12]
 800123e:	466b      	mov	r3, sp
 8001240:	461e      	mov	r6, r3
    size_t size = end - start;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char temp[size];
 800124a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800124c:	460b      	mov	r3, r1
 800124e:	3b01      	subs	r3, #1
 8001250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001252:	2300      	movs	r3, #0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	00c3      	lsls	r3, r0, #3
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	00c2      	lsls	r2, r0, #3
 800126e:	2300      	movs	r3, #0
 8001270:	468a      	mov	sl, r1
 8001272:	469b      	mov	fp, r3
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001288:	1dcb      	adds	r3, r1, #7
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	ebad 0d03 	sub.w	sp, sp, r3
 8001292:	466b      	mov	r3, sp
 8001294:	3300      	adds	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(temp, start, size);
 8001298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800129e:	f004 fe35 	bl	8005f0c <memcpy>

    char* macAddressPointer = temp + 7;
 80012a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a4:	3307      	adds	r3, #7
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
    char* rssiPointer = macAddressPointer + MAC_ADDRESS_SIZE + 1;
 80012a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012aa:	330d      	adds	r3, #13
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char* namePointer = strstr(rssiPointer, ",") + 1;
 80012ae:	212c      	movs	r1, #44	@ 0x2c
 80012b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012b2:	f004 fddb 	bl	8005e6c <strchr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	3301      	adds	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t rssiSize = namePointer - rssiPointer - 1;
 80012bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
    char rssiStr[rssiSize];
 80012c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012c8:	460b      	mov	r3, r1
 80012ca:	3b01      	subs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	2300      	movs	r3, #0
 80012d0:	4688      	mov	r8, r1
 80012d2:	4699      	mov	r9, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e8:	2300      	movs	r3, #0
 80012ea:	460c      	mov	r4, r1
 80012ec:	461d      	mov	r5, r3
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	00eb      	lsls	r3, r5, #3
 80012f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012fc:	00e2      	lsls	r2, r4, #3
 80012fe:	1dcb      	adds	r3, r1, #7
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	ebad 0d03 	sub.w	sp, sp, r3
 8001308:	466b      	mov	r3, sp
 800130a:	3300      	adds	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    memcpy(rssiStr, rssiPointer, rssiSize);
 800130e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001312:	69f8      	ldr	r0, [r7, #28]
 8001314:	f004 fdfa 	bl	8005f0c <memcpy>

    memcpy(device->mac, macAddressPointer, MAC_ADDRESS_SIZE);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	331e      	adds	r3, #30
 800131c:	220c      	movs	r2, #12
 800131e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001320:	4618      	mov	r0, r3
 8001322:	f004 fdf3 	bl	8005f0c <memcpy>
    memcpy(device->name, namePointer, MAX_DEVICE_NAME_SIZE);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	221e      	movs	r2, #30
 800132a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fded 	bl	8005f0c <memcpy>
    device->rssi = atoi(rssiStr);
 8001332:	69f8      	ldr	r0, [r7, #28]
 8001334:	f004 fcb6 	bl	8005ca4 <atoi>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800133e:	46b5      	mov	sp, r6
}
 8001340:	bf00      	nop
 8001342:	3744      	adds	r7, #68	@ 0x44
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800134c <ble_ParseScanResponse>:



void ble_ParseScanResponse(char* scanResponse, scan_t* scan)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
    char *start, *end;
    scan->size = 0;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0


    if((start = strstr(scanResponse, INIT_MODULE_RESPONSE_SCAN))) {
 800135e:	4926      	ldr	r1, [pc, #152]	@ (80013f8 <ble_ParseScanResponse+0xac>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f004 fd90 	bl	8005e86 <strstr>
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d040      	beq.n	80013f0 <ble_ParseScanResponse+0xa4>
        while((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 800136e:	e016      	b.n	800139e <ble_ParseScanResponse+0x52>

            ble_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	461a      	mov	r2, r3
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff ff52 	bl	8001230 <ble_LoadDeviceInfo>
            start = end;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60fb      	str	r3, [r7, #12]
            scan->size++;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        while((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4915      	ldr	r1, [pc, #84]	@ (80013f8 <ble_ParseScanResponse+0xac>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fd6e 	bl	8005e86 <strstr>
 80013aa:	60b8      	str	r0, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1de      	bne.n	8001370 <ble_ParseScanResponse+0x24>
        }
        if((end = strstr(start + 1, END_RESPONSE_SCAN))) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4911      	ldr	r1, [pc, #68]	@ (80013fc <ble_ParseScanResponse+0xb0>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fd64 	bl	8005e86 <strstr>
 80013be:	60b8      	str	r0, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d014      	beq.n	80013f0 <ble_ParseScanResponse+0xa4>
            ble_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff ff27 	bl	8001230 <ble_LoadDeviceInfo>
            scan->size++;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        }

    }

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08007be8 	.word	0x08007be8
 80013fc:	08007bf0 	.word	0x08007bf0

08001400 <HAL_UART_RxCpltCallback>:
//        }
//    }
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b10      	cmp	r3, #16
 8001414:	d124      	bne.n	8001460 <HAL_UART_RxCpltCallback+0x60>
    {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]


        if (strstr((char *)uartBuffer, END_RESPONSE_SCAN)) {
 800142c:	490e      	ldr	r1, [pc, #56]	@ (8001468 <HAL_UART_RxCpltCallback+0x68>)
 800142e:	480f      	ldr	r0, [pc, #60]	@ (800146c <HAL_UART_RxCpltCallback+0x6c>)
 8001430:	f004 fd29 	bl	8005e86 <strstr>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d012      	beq.n	8001460 <HAL_UART_RxCpltCallback+0x60>
            HAL_UART_DMAStop(huart);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f003 facb 	bl	80049d6 <HAL_UART_DMAStop>

            // Parse the scan response if the END_RESPONSE_SCAN string is found
            ble_ParseScanResponse((char *)uartBuffer, &gScan);
 8001440:	490b      	ldr	r1, [pc, #44]	@ (8001470 <HAL_UART_RxCpltCallback+0x70>)
 8001442:	480a      	ldr	r0, [pc, #40]	@ (800146c <HAL_UART_RxCpltCallback+0x6c>)
 8001444:	f7ff ff82 	bl	800134c <ble_ParseScanResponse>

            memset(uartBuffer, 0, sizeof(uartBuffer));
 8001448:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800144c:	2100      	movs	r1, #0
 800144e:	4807      	ldr	r0, [pc, #28]	@ (800146c <HAL_UART_RxCpltCallback+0x6c>)
 8001450:	f004 fd04 	bl	8005e5c <memset>
            HAL_UART_Receive_DMA(huart, uartBuffer, sizeof(uartBuffer));
 8001454:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001458:	4904      	ldr	r1, [pc, #16]	@ (800146c <HAL_UART_RxCpltCallback+0x6c>)
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f003 fa96 	bl	800498c <HAL_UART_Receive_DMA>
        }
    }
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	08007bf0 	.word	0x08007bf0
 800146c:	200000a4 	.word	0x200000a4
 8001470:	2000048c 	.word	0x2000048c

08001474 <DisplayScannedDevices>:



void DisplayScannedDevices(scan_t* scan,UART_HandleTypeDef huart2) {
 8001474:	b084      	sub	sp, #16
 8001476:	b5b0      	push	{r4, r5, r7, lr}
 8001478:	b094      	sub	sp, #80	@ 0x50
 800147a:	af10      	add	r7, sp, #64	@ 0x40
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001482:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    for (int i = 0; i < 4; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e02d      	b.n	80014e8 <DisplayScannedDevices+0x74>
        device_t* device = &scan->devices[i];
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]

        // Format device information into the message buffer
        snprintf(message, sizeof(message),
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1c58      	adds	r0, r3, #1
                 "Device %d:\r\nMAC: %s\r\nName: %s\r\nRSSI: %d\r\n\r\n",
                 i + 1, device->mac, device->name, device->rssi);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	331e      	adds	r3, #30
 80014a4:	68ba      	ldr	r2, [r7, #8]
        snprintf(message, sizeof(message),
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80014aa:	9102      	str	r1, [sp, #8]
 80014ac:	9201      	str	r2, [sp, #4]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <DisplayScannedDevices+0x8c>)
 80014b4:	2164      	movs	r1, #100	@ 0x64
 80014b6:	4813      	ldr	r0, [pc, #76]	@ (8001504 <DisplayScannedDevices+0x90>)
 80014b8:	f004 fc7c 	bl	8005db4 <sniprintf>

        // Transmit the message via UART
        UART_TransmitMessage(message, huart2);
 80014bc:	466d      	mov	r5, sp
 80014be:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80014c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014dc:	4809      	ldr	r0, [pc, #36]	@ (8001504 <DisplayScannedDevices+0x90>)
 80014de:	f000 fc55 	bl	8001d8c <UART_TransmitMessage>
    for (int i = 0; i < 4; i++) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	ddce      	ble.n	800148c <DisplayScannedDevices+0x18>
    }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014fa:	b004      	add	sp, #16
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	08007bfc 	.word	0x08007bfc
 8001504:	200007d4 	.word	0x200007d4

08001508 <HMC5883L_Init>:
#define HMC5883L_MODE_CONTINUOUS    0x00
#define HMC5883L_MODE_SINGLE        0x01
#define HMC5883L_MODE_IDLE          0x02
uint8_t mode = HMC5883L_MODE_CONTINUOUS;                                  // Modo contínuo

void HMC5883L_Init(I2C_HandleTypeDef *hi2c){
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af04      	add	r7, sp, #16
 800150e:	6078      	str	r0, [r7, #4]
	uint8_t configA = (HMC5883L_SAMPLE_AVERAGE_8 << HMC5883L_CRA_SA_POS) |   // 8 amostras por leitura
 8001510:	23c0      	movs	r3, #192	@ 0xc0
 8001512:	73fb      	strb	r3, [r7, #15]
	                      (HMC5883L_DATARATE_15HZ << HMC5883L_CRA_DATARATE_POS) | // Taxa de 15Hz
	                      (HMC5883L_MEAS_MODE_NORMAL << HMC5883L_CRA_MM_POS);     // Modo de medição normal
	uint8_t configB = (HMC5883L_RANGE_1_3GA << HMC5883L_CRB_RANGE_POS);       // Ganho de ±1.3 Gauss
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	73bb      	strb	r3, [r7, #14]



    // Write to Configuration Register A
    HAL_I2C_Mem_Write(hi2c, HMC5883L_ADDRESS, REG_CONFIG_A, 23, &configA, 1, HAL_MAX_DELAY);
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2301      	movs	r3, #1
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	f107 030f 	add.w	r3, r7, #15
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2317      	movs	r3, #23
 800152a:	2200      	movs	r2, #0
 800152c:	213c      	movs	r1, #60	@ 0x3c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f001 fbf2 	bl	8002d18 <HAL_I2C_Mem_Write>

    // Write to Configuration Register B
    HAL_I2C_Mem_Write(hi2c, HMC5883L_ADDRESS, REG_CONFIG_B, 1, &configB, 1, HAL_MAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2301      	movs	r3, #1
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 030e 	add.w	r3, r7, #14
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	2201      	movs	r2, #1
 8001548:	213c      	movs	r1, #60	@ 0x3c
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 fbe4 	bl	8002d18 <HAL_I2C_Mem_Write>

    // Write to Mode Register
    HAL_I2C_Mem_Write(hi2c, HMC5883L_ADDRESS, REG_MODE, 1, &mode, 1, HAL_MAX_DELAY);
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2301      	movs	r3, #1
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HMC5883L_Init+0x6c>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	2202      	movs	r2, #2
 8001562:	213c      	movs	r1, #60	@ 0x3c
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f001 fbd7 	bl	8002d18 <HAL_I2C_Mem_Write>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000670 	.word	0x20000670

08001578 <HMC5883L_ReadData>:

void HMC5883L_ReadData(I2C_HandleTypeDef *hi2c, XYCoordinates reading[8]){
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	uint8_t rawData[6];
    for (int i = 0; i < 8; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e028      	b.n	80015da <HMC5883L_ReadData+0x62>
        // Lê 6 bytes a partir do registrador REG_DATA_OUT_X_MSB
        HAL_I2C_Mem_Read(hi2c, HMC5883L_ADDRESS, REG_DATA_OUT_X_MSB, 1, rawData, 6, HAL_MAX_DELAY);
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2306      	movs	r3, #6
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	213c      	movs	r1, #60	@ 0x3c
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f001 fcb4 	bl	8002f0c <HAL_I2C_Mem_Read>

        // Converte os dados brutos para inteiros
        reading[i].x = (int16_t)((rawData[0] << 8) | rawData[1]);  // X MSB e LSB
 80015a4:	7b3b      	ldrb	r3, [r7, #12]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b219      	sxth	r1, r3
 80015aa:	7b7b      	ldrb	r3, [r7, #13]
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	4403      	add	r3, r0
 80015b6:	430a      	orrs	r2, r1
 80015b8:	b212      	sxth	r2, r2
 80015ba:	801a      	strh	r2, [r3, #0]
        reading[i].y = (int16_t)((rawData[4] << 8) | rawData[5]);  // Y MSB e LSB
 80015bc:	7c3b      	ldrb	r3, [r7, #16]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b219      	sxth	r1, r3
 80015c2:	7c7b      	ldrb	r3, [r7, #17]
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	4403      	add	r3, r0
 80015ce:	430a      	orrs	r2, r1
 80015d0:	b212      	sxth	r2, r2
 80015d2:	805a      	strh	r2, [r3, #2]
    for (int i = 0; i < 8; i++) {
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b07      	cmp	r3, #7
 80015de:	ddd3      	ble.n	8001588 <HMC5883L_ReadData+0x10>

    }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <Filter_Data>:

// *********************************** FUNCTIONS FOR FILTERING THE DATA ****************************

uint8_t Filter_Data(XYCoordinates reading[8]){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	const float MIN_DISTANCE = 2;
 80015f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015f6:	613b      	str	r3, [r7, #16]
	XYCoordinates centroid = Data_Means(reading, 8);
 80015f8:	2108      	movs	r1, #8
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f880 	bl	8001700 <Data_Means>
 8001600:	4603      	mov	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]
	uint8_t resultSize=8;
 8001604:	2308      	movs	r3, #8
 8001606:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<8; i++){
 8001608:	2300      	movs	r3, #0
 800160a:	75bb      	strb	r3, [r7, #22]
 800160c:	e024      	b.n	8001658 <Filter_Data+0x6e>
		if(Measure_Distance(reading[i], centroid) > MIN_DISTANCE){
 800160e:	7dbb      	ldrb	r3, [r7, #22]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f823 	bl	8001668 <Measure_Distance>
 8001622:	eeb0 7a40 	vmov.f32	s14, s0
 8001626:	edd7 7a04 	vldr	s15, [r7, #16]
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d50e      	bpl.n	8001652 <Filter_Data+0x68>
			reading[i].x = 0;
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	2200      	movs	r2, #0
 800163e:	801a      	strh	r2, [r3, #0]
			reading[i].y = 0;
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	2200      	movs	r2, #0
 800164a:	805a      	strh	r2, [r3, #2]
			resultSize--;
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	3b01      	subs	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<8; i++){
 8001652:	7dbb      	ldrb	r3, [r7, #22]
 8001654:	3301      	adds	r3, #1
 8001656:	75bb      	strb	r3, [r7, #22]
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	2b07      	cmp	r3, #7
 800165c:	d9d7      	bls.n	800160e <Filter_Data+0x24>
		}
	}

	return resultSize;
 800165e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <Measure_Distance>:

float Measure_Distance(XYCoordinates a, XYCoordinates b){
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	return sqrt(pow((a.x-b.x),2)+pow((a.y-b.y),2));
 8001672:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	f9b7 3000 	ldrsh.w	r3, [r7]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff70 	bl	8000564 <__aeabi_i2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80016f8 <Measure_Distance+0x90>
 800168c:	ec43 2b10 	vmov	d0, r2, r3
 8001690:	f005 f88a 	bl	80067a8 <pow>
 8001694:	ec55 4b10 	vmov	r4, r5, d0
 8001698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169c:	461a      	mov	r2, r3
 800169e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff5d 	bl	8000564 <__aeabi_i2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80016f8 <Measure_Distance+0x90>
 80016b2:	ec43 2b10 	vmov	d0, r2, r3
 80016b6:	f005 f877 	bl	80067a8 <pow>
 80016ba:	ec53 2b10 	vmov	r2, r3, d0
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7fe fe03 	bl	80002cc <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	ec43 2b17 	vmov	d7, r2, r3
 80016ce:	eeb0 0a47 	vmov.f32	s0, s14
 80016d2:	eef0 0a67 	vmov.f32	s1, s15
 80016d6:	f005 f8d7 	bl	8006888 <sqrt>
 80016da:	ec53 2b10 	vmov	r2, r3, d0
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff fa81 	bl	8000be8 <__aeabi_d2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	ee07 3a90 	vmov	s15, r3
}
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdb0      	pop	{r4, r5, r7, pc}
 80016f6:	bf00      	nop
 80016f8:	00000000 	.word	0x00000000
 80016fc:	40000000 	.word	0x40000000

08001700 <Data_Means>:

XYCoordinates Data_Means(XYCoordinates reading[8], uint8_t n){
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
	int16_t meansX = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	82fb      	strh	r3, [r7, #22]
	int16_t meansY = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0; i<8; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	74fb      	strb	r3, [r7, #19]
 8001718:	e018      	b.n	800174c <Data_Means+0x4c>
		meansX += reading[i].x;
 800171a:	7cfb      	ldrb	r3, [r7, #19]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	b29a      	uxth	r2, r3
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	4413      	add	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	82fb      	strh	r3, [r7, #22]
		meansY += reading[i].y;
 8001730:	7cfb      	ldrb	r3, [r7, #19]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800173c:	b29a      	uxth	r2, r3
 800173e:	8abb      	ldrh	r3, [r7, #20]
 8001740:	4413      	add	r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0; i<8; i++){
 8001746:	7cfb      	ldrb	r3, [r7, #19]
 8001748:	3301      	adds	r3, #1
 800174a:	74fb      	strb	r3, [r7, #19]
 800174c:	7cfb      	ldrb	r3, [r7, #19]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d9e3      	bls.n	800171a <Data_Means+0x1a>
	}
	XYCoordinates coordinateMeans = {meansX/n, meansY/n};
 8001752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	fb92 f3f3 	sdiv	r3, r2, r3
 800175c:	b21b      	sxth	r3, r3
 800175e:	813b      	strh	r3, [r7, #8]
 8001760:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	fb92 f3f3 	sdiv	r3, r2, r3
 800176a:	b21b      	sxth	r3, r3
 800176c:	817b      	strh	r3, [r7, #10]
	return coordinateMeans;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	89ba      	ldrh	r2, [r7, #12]
 8001776:	f362 030f 	bfi	r3, r2, #0, #16
 800177a:	89fa      	ldrh	r2, [r7, #14]
 800177c:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	0000      	movs	r0, r0
	...

08001790 <XY_to_Degrees>:
//	XYCoordinates calibrated = {(reading.x + Delta.x), (reading.y + Delta.y)};
//	return calibrated;
//}


int16_t XY_to_Degrees(XYCoordinates coordinate){
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

	 int16_t angle = atan2(coordinate.y, coordinate.x)*(180.0/M_PI);
 8001798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fee1 	bl	8000564 <__aeabi_i2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
 80017a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe feda 	bl	8000564 <__aeabi_i2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	ec43 2b11 	vmov	d1, r2, r3
 80017b8:	ec45 4b10 	vmov	d0, r4, r5
 80017bc:	f004 fff2 	bl	80067a4 <atan2>
 80017c0:	ec51 0b10 	vmov	r0, r1, d0
 80017c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001800 <XY_to_Degrees+0x70>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe ff35 	bl	8000638 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9df 	bl	8000b98 <__aeabi_d2iz>
 80017da:	4603      	mov	r3, r0
 80017dc:	81fb      	strh	r3, [r7, #14]
	if(angle < 0) angle += 360;
 80017de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da04      	bge.n	80017f0 <XY_to_Degrees+0x60>
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	81fb      	strh	r3, [r7, #14]
	return (angle - 75);
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	3b4b      	subs	r3, #75	@ 0x4b
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b21b      	sxth	r3, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	1a63c1f8 	.word	0x1a63c1f8
 8001804:	404ca5dc 	.word	0x404ca5dc

08001808 <RudderDegree>:

int16_t RudderDegree(uint16_t boatAngle, int16_t arrivalAngle){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	80fb      	strh	r3, [r7, #6]
 8001814:	4613      	mov	r3, r2
 8001816:	80bb      	strh	r3, [r7, #4]
	int16_t rudderAngleShift = boatAngle - arrivalAngle;
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	b29b      	uxth	r3, r3
 8001820:	81fb      	strh	r3, [r7, #14]
	return (int16_t) (-(5.0/18.0)*rudderAngleShift + 94);
 8001822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe9c 	bl	8000564 <__aeabi_i2d>
 800182c:	a30d      	add	r3, pc, #52	@ (adr r3, 8001864 <RudderDegree+0x5c>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe ff01 	bl	8000638 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <RudderDegree+0x58>)
 8001844:	f7fe fd42 	bl	80002cc <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9a2 	bl	8000b98 <__aeabi_d2iz>
 8001854:	4603      	mov	r3, r0
 8001856:	b21b      	sxth	r3, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40578000 	.word	0x40578000
 8001864:	71c71c72 	.word	0x71c71c72
 8001868:	bfd1c71c 	.word	0xbfd1c71c

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	b097      	sub	sp, #92	@ 0x5c
 8001870:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fc9f 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f8f7 	bl	8001a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 fa13 	bl	8001ca4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800187e:	f000 f9bd 	bl	8001bfc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001882:	f000 f98d 	bl	8001ba0 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001886:	f000 f95d 	bl	8001b44 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800188a:	f000 f9e1 	bl	8001c50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the Bluetooth driver */
  BLE_HandleTypeDef bleHandler = {
 800188e:	4a69      	ldr	r2, [pc, #420]	@ (8001a34 <main+0x1c8>)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	ca07      	ldmia	r2, {r0, r1, r2}
 8001894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      .role = MASTER,
      .parity = NO_PARITY,
      .stopBit = 1
  };

  ble_Init(&bleHandler);
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fb6c 	bl	8000f78 <ble_Init>
  //DataFilterService_InitBuffer(&b3Buffer);

  /* Initialize location service */
  //LocationService_Init(&huart2, NULL);

  HMC5883L_Init(&hi2c1);
 80018a0:	4865      	ldr	r0, [pc, #404]	@ (8001a38 <main+0x1cc>)
 80018a2:	f7ff fe31 	bl	8001508 <HMC5883L_Init>
//        location.latitude, location.longitude, arrivalAngle, isInDestiny);
//    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
//
//

	  ble_InquireDevices(&huart3);
 80018a6:	4865      	ldr	r0, [pc, #404]	@ (8001a3c <main+0x1d0>)
 80018a8:	f7ff fc9e 	bl	80011e8 <ble_InquireDevices>
	  HAL_Delay(3000);
 80018ac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80018b0:	f000 fcf2 	bl	8002298 <HAL_Delay>


	  snprintf(message, sizeof(message), "==================== Scan Devices =========== \r\n");
 80018b4:	4a62      	ldr	r2, [pc, #392]	@ (8001a40 <main+0x1d4>)
 80018b6:	2164      	movs	r1, #100	@ 0x64
 80018b8:	4862      	ldr	r0, [pc, #392]	@ (8001a44 <main+0x1d8>)
 80018ba:	f004 fa7b 	bl	8005db4 <sniprintf>
	  UART_TransmitMessage(message,huart2);
 80018be:	4e62      	ldr	r6, [pc, #392]	@ (8001a48 <main+0x1dc>)
 80018c0:	466d      	mov	r5, sp
 80018c2:	f106 040c 	add.w	r4, r6, #12
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018da:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80018de:	4859      	ldr	r0, [pc, #356]	@ (8001a44 <main+0x1d8>)
 80018e0:	f000 fa54 	bl	8001d8c <UART_TransmitMessage>
	  HAL_Delay(500);
 80018e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018e8:	f000 fcd6 	bl	8002298 <HAL_Delay>

	  //scann(huart2);

	  if(gScan->size > 0) {
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d013      	beq.n	800191e <main+0xb2>
	      DisplayScannedDevices(gScan,huart2);
 80018f6:	4e54      	ldr	r6, [pc, #336]	@ (8001a48 <main+0x1dc>)
 80018f8:	466d      	mov	r5, sp
 80018fa:	f106 040c 	add.w	r4, r6, #12
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800190e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001912:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff fdac 	bl	8001474 <DisplayScannedDevices>
 800191c:	e017      	b.n	800194e <main+0xe2>
	  } else {
	      snprintf(message, sizeof(message), "No devices found.\r\n");
 800191e:	4a4b      	ldr	r2, [pc, #300]	@ (8001a4c <main+0x1e0>)
 8001920:	2164      	movs	r1, #100	@ 0x64
 8001922:	4848      	ldr	r0, [pc, #288]	@ (8001a44 <main+0x1d8>)
 8001924:	f004 fa46 	bl	8005db4 <sniprintf>
	      UART_TransmitMessage(message, huart2);
 8001928:	4e47      	ldr	r6, [pc, #284]	@ (8001a48 <main+0x1dc>)
 800192a:	466d      	mov	r5, sp
 800192c:	f106 040c 	add.w	r4, r6, #12
 8001930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001940:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001944:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001948:	483e      	ldr	r0, [pc, #248]	@ (8001a44 <main+0x1d8>)
 800194a:	f000 fa1f 	bl	8001d8c <UART_TransmitMessage>




    // PART 3 CODE
   HMC5883L_ReadData(&hi2c1, reading);
 800194e:	4940      	ldr	r1, [pc, #256]	@ (8001a50 <main+0x1e4>)
 8001950:	4839      	ldr	r0, [pc, #228]	@ (8001a38 <main+0x1cc>)
 8001952:	f7ff fe11 	bl	8001578 <HMC5883L_ReadData>

    resultsize = Filter_Data(reading);
 8001956:	483e      	ldr	r0, [pc, #248]	@ (8001a50 <main+0x1e4>)
 8001958:	f7ff fe47 	bl	80015ea <Filter_Data>
 800195c:	4603      	mov	r3, r0
 800195e:	74fb      	strb	r3, [r7, #19]
    final_coordinates   = Data_Means(reading, resultsize);
 8001960:	7cfb      	ldrb	r3, [r7, #19]
 8001962:	4619      	mov	r1, r3
 8001964:	483a      	ldr	r0, [pc, #232]	@ (8001a50 <main+0x1e4>)
 8001966:	f7ff fecb 	bl	8001700 <Data_Means>
 800196a:	4603      	mov	r3, r0
 800196c:	603b      	str	r3, [r7, #0]

    Angle = XY_to_Degrees(final_coordinates);
 800196e:	6838      	ldr	r0, [r7, #0]
 8001970:	f7ff ff0e 	bl	8001790 <XY_to_Degrees>
 8001974:	4603      	mov	r3, r0
 8001976:	823b      	strh	r3, [r7, #16]

    arrivalAngle = XY_to_Degrees(PosBeaconChegada);
 8001978:	4b36      	ldr	r3, [pc, #216]	@ (8001a54 <main+0x1e8>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7ff ff08 	bl	8001790 <XY_to_Degrees>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <main+0x1ec>)
 8001986:	801a      	strh	r2, [r3, #0]

    snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
        final_coordinates.x,final_coordinates.y,Angle, RudderDegree(Angle,arrivalAngle));
 8001988:	f9b7 3000 	ldrsh.w	r3, [r7]
    snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
 800198c:	461e      	mov	r6, r3
        final_coordinates.x,final_coordinates.y,Angle, RudderDegree(Angle,arrivalAngle));
 800198e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
 8001992:	461d      	mov	r5, r3
 8001994:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
        final_coordinates.x,final_coordinates.y,Angle, RudderDegree(Angle,arrivalAngle));
 8001998:	8a3b      	ldrh	r3, [r7, #16]
 800199a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <main+0x1ec>)
 800199c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff30 	bl	8001808 <RudderDegree>
 80019a8:	4603      	mov	r3, r0
    snprintf(message, sizeof(message),"Final Coordinates : x =  %d   y =  %d  :  angle  = %d  heading pos  = %d\r\n" ,
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	9401      	str	r4, [sp, #4]
 80019ae:	9500      	str	r5, [sp, #0]
 80019b0:	4633      	mov	r3, r6
 80019b2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a5c <main+0x1f0>)
 80019b4:	2164      	movs	r1, #100	@ 0x64
 80019b6:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <main+0x1d8>)
 80019b8:	f004 f9fc 	bl	8005db4 <sniprintf>

    UART_TransmitMessage(message,huart2);
 80019bc:	4e22      	ldr	r6, [pc, #136]	@ (8001a48 <main+0x1dc>)
 80019be:	466d      	mov	r5, sp
 80019c0:	f106 040c 	add.w	r4, r6, #12
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019d8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019dc:	4819      	ldr	r0, [pc, #100]	@ (8001a44 <main+0x1d8>)
 80019de:	f000 f9d5 	bl	8001d8c <UART_TransmitMessage>

 	  HAL_Delay(10);
 80019e2:	200a      	movs	r0, #10
 80019e4:	f000 fc58 	bl	8002298 <HAL_Delay>
 	  // Check for UART input
    if (HAL_UART_Receive(&huart2, caractere, 1, 1000) == HAL_OK) {
 80019e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ec:	2201      	movs	r2, #1
 80019ee:	491c      	ldr	r1, [pc, #112]	@ (8001a60 <main+0x1f4>)
 80019f0:	4815      	ldr	r0, [pc, #84]	@ (8001a48 <main+0x1dc>)
 80019f2:	f002 ff34 	bl	800485e <HAL_UART_Receive>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f af54 	bne.w	80018a6 <main+0x3a>
      snprintf(message, sizeof(message),
                "Received Character: %c\r\n", caractere[0]);
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <main+0x1f4>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
      snprintf(message, sizeof(message),
 8001a02:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <main+0x1f8>)
 8001a04:	2164      	movs	r1, #100	@ 0x64
 8001a06:	480f      	ldr	r0, [pc, #60]	@ (8001a44 <main+0x1d8>)
 8001a08:	f004 f9d4 	bl	8005db4 <sniprintf>
      UART_TransmitMessage(message,huart2);
 8001a0c:	4e0e      	ldr	r6, [pc, #56]	@ (8001a48 <main+0x1dc>)
 8001a0e:	466d      	mov	r5, sp
 8001a10:	f106 040c 	add.w	r4, r6, #12
 8001a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a28:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <main+0x1d8>)
 8001a2e:	f000 f9ad 	bl	8001d8c <UART_TransmitMessage>
	  ble_InquireDevices(&huart3);
 8001a32:	e738      	b.n	80018a6 <main+0x3a>
 8001a34:	08007cec 	.word	0x08007cec
 8001a38:	20000678 	.word	0x20000678
 8001a3c:	20000768 	.word	0x20000768
 8001a40:	08007c28 	.word	0x08007c28
 8001a44:	200007d4 	.word	0x200007d4
 8001a48:	20000720 	.word	0x20000720
 8001a4c:	08007c5c 	.word	0x08007c5c
 8001a50:	200007b0 	.word	0x200007b0
 8001a54:	20000018 	.word	0x20000018
 8001a58:	200007d0 	.word	0x200007d0
 8001a5c:	08007c70 	.word	0x08007c70
 8001a60:	20000674 	.word	0x20000674
 8001a64:	08007cbc 	.word	0x08007cbc

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b094      	sub	sp, #80	@ 0x50
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2234      	movs	r2, #52	@ 0x34
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 f9f0 	bl	8005e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 0308 	add.w	r3, r7, #8
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <SystemClock_Config+0xd4>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	4a29      	ldr	r2, [pc, #164]	@ (8001b3c <SystemClock_Config+0xd4>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <SystemClock_Config+0xd4>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <SystemClock_Config+0xd8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <SystemClock_Config+0xd8>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <SystemClock_Config+0xd8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001acc:	2301      	movs	r3, #1
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001adc:	2310      	movs	r3, #16
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ae0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ae4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fb38 	bl	800416c <HAL_RCC_OscConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b02:	f000 f93d 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b1c:	f107 0308 	add.w	r3, r7, #8
 8001b20:	2102      	movs	r1, #2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 ffd8 	bl	8003ad8 <HAL_RCC_ClockConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b2e:	f000 f927 	bl	8001d80 <Error_Handler>
  }
}
 8001b32:	bf00      	nop
 8001b34:	3750      	adds	r7, #80	@ 0x50
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000

08001b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b4a:	4a13      	ldr	r2, [pc, #76]	@ (8001b98 <MX_I2C1_Init+0x54>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b50:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <MX_I2C1_Init+0x58>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <MX_I2C1_Init+0x50>)
 8001b82:	f000 ff85 	bl	8002a90 <HAL_I2C_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b8c:	f000 f8f8 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000678 	.word	0x20000678
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	000186a0 	.word	0x000186a0

08001ba0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001ba6:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <MX_I2C2_Init+0x54>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bac:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <MX_I2C2_Init+0x58>)
 8001bae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bc2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	@ (8001bf0 <MX_I2C2_Init+0x50>)
 8001bde:	f000 ff57 	bl	8002a90 <HAL_I2C_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001be8:	f000 f8ca 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200006cc 	.word	0x200006cc
 8001bf4:	40005800 	.word	0x40005800
 8001bf8:	000186a0 	.word	0x000186a0

08001bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <MX_USART2_UART_Init+0x50>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c34:	f002 fd38 	bl	80046a8 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c3e:	f000 f89f 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000720 	.word	0x20000720
 8001c4c:	40004400 	.word	0x40004400

08001c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <MX_USART3_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_USART3_UART_Init+0x4c>)
 8001c88:	f002 fd0e 	bl	80046a8 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c92:	f000 f875 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000768 	.word	0x20000768
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a25      	ldr	r2, [pc, #148]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a17      	ldr	r2, [pc, #92]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <MX_GPIO_Init+0xd0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4812      	ldr	r0, [pc, #72]	@ (8001d78 <MX_GPIO_Init+0xd4>)
 8001d30:	f000 fe94 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <MX_GPIO_Init+0xd8>)
 8001d4c:	f000 fcf2 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d50:	2320      	movs	r3, #32
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <MX_GPIO_Init+0xd4>)
 8001d68:	f000 fce4 	bl	8002734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	@ 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020800 	.word	0x40020800

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <Error_Handler+0x8>

08001d8c <UART_TransmitMessage>:
#include "print_readings.h"

// Define the 'message' variable here
char message[100] = "";

void UART_TransmitMessage(char *message, UART_HandleTypeDef huart2) {
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	f107 0014 	add.w	r0, r7, #20
 8001d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fa36 	bl	8000210 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f107 0014 	add.w	r0, r7, #20
 8001dac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	f002 fcc9 	bl	8004748 <HAL_UART_Transmit>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dc0:	b004      	add	sp, #16
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f000 fb3c 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	@ 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <HAL_I2C_MspInit+0x128>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12d      	bne.n	8001e92 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a40      	ldr	r2, [pc, #256]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e52:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e64:	2304      	movs	r3, #4
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4835      	ldr	r0, [pc, #212]	@ (8001f44 <HAL_I2C_MspInit+0x130>)
 8001e70:	f000 fc60 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a30      	ldr	r2, [pc, #192]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001e7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e84:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e90:	e050      	b.n	8001f34 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a2c      	ldr	r2, [pc, #176]	@ (8001f48 <HAL_I2C_MspInit+0x134>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d14b      	bne.n	8001f34 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	4a26      	ldr	r2, [pc, #152]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	2312      	movs	r3, #18
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4814      	ldr	r0, [pc, #80]	@ (8001f44 <HAL_I2C_MspInit+0x130>)
 8001ef2:	f000 fc1f 	bl	8002734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efc:	2312      	movs	r3, #18
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <HAL_I2C_MspInit+0x138>)
 8001f14:	f000 fc0e 	bl	8002734 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001f22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_I2C_MspInit+0x12c>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
}
 8001f34:	bf00      	nop
 8001f36:	3730      	adds	r7, #48	@ 0x30
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40005800 	.word	0x40005800
 8001f4c:	40020800 	.word	0x40020800

08001f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	@ 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a36      	ldr	r2, [pc, #216]	@ (8002048 <HAL_UART_MspInit+0xf8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12c      	bne.n	8001fcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f82:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001faa:	230c      	movs	r3, #12
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4822      	ldr	r0, [pc, #136]	@ (8002050 <HAL_UART_MspInit+0x100>)
 8001fc6:	f000 fbb5 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fca:	e039      	b.n	8002040 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <HAL_UART_MspInit+0x104>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d134      	bne.n	8002040 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a14      	ldr	r2, [pc, #80]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_UART_MspInit+0xfc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800200e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002020:	2307      	movs	r3, #7
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	480b      	ldr	r0, [pc, #44]	@ (8002058 <HAL_UART_MspInit+0x108>)
 800202c:	f000 fb82 	bl	8002734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2027      	movs	r0, #39	@ 0x27
 8002036:	f000 fa2e 	bl	8002496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800203a:	2027      	movs	r0, #39	@ 0x27
 800203c:	f000 fa47 	bl	80024ce <HAL_NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	@ 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40004400 	.word	0x40004400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40004800 	.word	0x40004800
 8002058:	40020800 	.word	0x40020800

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <NMI_Handler+0x4>

08002064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <MemManage_Handler+0x4>

08002074 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <UsageFault_Handler+0x4>

08002084 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b2:	f000 f8d1 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <USART3_IRQHandler+0x10>)
 80020c2:	f002 fd07 	bl	8004ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000768 	.word	0x20000768

080020d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d8:	4a14      	ldr	r2, [pc, #80]	@ (800212c <_sbrk+0x5c>)
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <_sbrk+0x60>)
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <_sbrk+0x64>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	@ (8002138 <_sbrk+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f2:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d207      	bcs.n	8002110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002100:	f003 fed8 	bl	8005eb4 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e009      	b.n	8002124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20020000 	.word	0x20020000
 8002130:	00000400 	.word	0x00000400
 8002134:	20000838 	.word	0x20000838
 8002138:	20000988 	.word	0x20000988

0800213c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <SystemInit+0x20>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <SystemInit+0x20>)
 8002148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800214c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002164:	f7ff ffea 	bl	800213c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002168:	480c      	ldr	r0, [pc, #48]	@ (800219c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800216a:	490d      	ldr	r1, [pc, #52]	@ (80021a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800216c:	4a0d      	ldr	r2, [pc, #52]	@ (80021a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002180:	4c0a      	ldr	r4, [pc, #40]	@ (80021ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800218e:	f003 fe97 	bl	8005ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002192:	f7ff fb6b 	bl	800186c <main>
  bx  lr    
 8002196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80021a4:	08007ef8 	.word	0x08007ef8
  ldr r2, =_sbss
 80021a8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80021ac:	20000988 	.word	0x20000988

080021b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <HAL_Init+0x40>)
 80021be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_Init+0x40>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <HAL_Init+0x40>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 f94f 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f000 f808 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff fdec 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_InitTick+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_InitTick+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f967 	bl	80024ea <HAL_SYSTICK_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00e      	b.n	8002244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d80a      	bhi.n	8002242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f000 f92f 	bl	8002496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002238:	4a06      	ldr	r2, [pc, #24]	@ (8002254 <HAL_InitTick+0x5c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000001c 	.word	0x2000001c
 8002250:	20000024 	.word	0x20000024
 8002254:	20000020 	.word	0x20000020

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000024 	.word	0x20000024
 800227c:	2000083c 	.word	0x2000083c

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000083c 	.word	0x2000083c

08002298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff ffee 	bl	8002280 <HAL_GetTick>
 80022a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d005      	beq.n	80022be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_Delay+0x44>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022be:	bf00      	nop
 80022c0:	f7ff ffde 	bl	8002280 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8f7      	bhi.n	80022c0 <HAL_Delay+0x28>
  {
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000024 	.word	0x20000024

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	@ (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	@ (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	@ 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	@ 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800244c:	d301      	bcc.n	8002452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244e:	2301      	movs	r3, #1
 8002450:	e00f      	b.n	8002472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <SysTick_Config+0x40>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245a:	210f      	movs	r1, #15
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f7ff ff8e 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <SysTick_Config+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246a:	4b04      	ldr	r3, [pc, #16]	@ (800247c <SysTick_Config+0x40>)
 800246c:	2207      	movs	r2, #7
 800246e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000e010 	.word	0xe000e010

08002480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff29 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a8:	f7ff ff3e 	bl	8002328 <__NVIC_GetPriorityGrouping>
 80024ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7ff ff8e 	bl	80023d4 <NVIC_EncodePriority>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff5d 	bl	8002380 <__NVIC_SetPriority>
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff31 	bl	8002344 <__NVIC_EnableIRQ>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffa2 	bl	800243c <SysTick_Config>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_DMA_Start_IT+0x26>
 8002524:	2302      	movs	r3, #2
 8002526:	e040      	b.n	80025aa <HAL_DMA_Start_IT+0xa8>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d12f      	bne.n	800259c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f8c0 	bl	80026d6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	223f      	movs	r2, #63	@ 0x3f
 800255c:	409a      	lsls	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0216 	orr.w	r2, r2, #22
 8002570:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0208 	orr.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e005      	b.n	80025a8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
 80025a6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fe5e 	bl	8002280 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d008      	beq.n	80025e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2280      	movs	r2, #128	@ 0x80
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e052      	b.n	800268a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0216 	bic.w	r2, r2, #22
 80025f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <HAL_DMA_Abort+0x62>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0208 	bic.w	r2, r2, #8
 8002622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	e013      	b.n	800265e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002636:	f7ff fe23 	bl	8002280 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b05      	cmp	r3, #5
 8002642:	d90c      	bls.n	800265e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e015      	b.n	800268a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e4      	bne.n	8002636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	223f      	movs	r2, #63	@ 0x3f
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d004      	beq.n	80026b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e00c      	b.n	80026ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2205      	movs	r2, #5
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026f2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d108      	bne.n	8002716 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002714:	e007      	b.n	8002726 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e165      	b.n	8002a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 8154 	bne.w	8002a16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d005      	beq.n	8002786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	2b02      	cmp	r3, #2
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d017      	beq.n	8002824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80ae 	beq.w	8002a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b5d      	ldr	r3, [pc, #372]	@ (8002a34 <HAL_GPIO_Init+0x300>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a34 <HAL_GPIO_Init+0x300>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002a34 <HAL_GPIO_Init+0x300>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a58      	ldr	r2, [pc, #352]	@ (8002a38 <HAL_GPIO_Init+0x304>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4f      	ldr	r2, [pc, #316]	@ (8002a3c <HAL_GPIO_Init+0x308>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d025      	beq.n	800294e <HAL_GPIO_Init+0x21a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4e      	ldr	r2, [pc, #312]	@ (8002a40 <HAL_GPIO_Init+0x30c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01f      	beq.n	800294a <HAL_GPIO_Init+0x216>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a44 <HAL_GPIO_Init+0x310>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_GPIO_Init+0x212>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4c      	ldr	r2, [pc, #304]	@ (8002a48 <HAL_GPIO_Init+0x314>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a4c <HAL_GPIO_Init+0x318>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x20a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4a      	ldr	r2, [pc, #296]	@ (8002a50 <HAL_GPIO_Init+0x31c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x206>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a49      	ldr	r2, [pc, #292]	@ (8002a54 <HAL_GPIO_Init+0x320>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x202>
 8002932:	2306      	movs	r3, #6
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 8002936:	2307      	movs	r3, #7
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	@ (8002a38 <HAL_GPIO_Init+0x304>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002992:	4a31      	ldr	r2, [pc, #196]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002998:	4b2f      	ldr	r3, [pc, #188]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029bc:	4a26      	ldr	r2, [pc, #152]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c2:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a10:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae96 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40013c00 	.word	0x40013c00

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12b      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff f9ac 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	@ 0x24
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af4:	f001 f8e2 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 8002af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a81      	ldr	r2, [pc, #516]	@ (8002d04 <HAL_I2C_Init+0x274>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d807      	bhi.n	8002b14 <HAL_I2C_Init+0x84>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a80      	ldr	r2, [pc, #512]	@ (8002d08 <HAL_I2C_Init+0x278>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e006      	b.n	8002b22 <HAL_I2C_Init+0x92>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a7d      	ldr	r2, [pc, #500]	@ (8002d0c <HAL_I2C_Init+0x27c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0e7      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a78      	ldr	r2, [pc, #480]	@ (8002d10 <HAL_I2C_Init+0x280>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	@ (8002d04 <HAL_I2C_Init+0x274>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d802      	bhi.n	8002b64 <HAL_I2C_Init+0xd4>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3301      	adds	r3, #1
 8002b62:	e009      	b.n	8002b78 <HAL_I2C_Init+0xe8>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a69      	ldr	r2, [pc, #420]	@ (8002d14 <HAL_I2C_Init+0x284>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	495c      	ldr	r1, [pc, #368]	@ (8002d04 <HAL_I2C_Init+0x274>)
 8002b94:	428b      	cmp	r3, r1
 8002b96:	d819      	bhi.n	8002bcc <HAL_I2C_Init+0x13c>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e59      	subs	r1, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bac:	400b      	ands	r3, r1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_I2C_Init+0x138>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e59      	subs	r1, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc6:	e051      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e04f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <HAL_I2C_Init+0x168>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e012      	b.n	8002c1e <HAL_I2C_Init+0x18e>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x196>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e022      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_I2C_Init+0x1bc>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1e58      	subs	r0, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	440b      	add	r3, r1
 8002c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4a:	e00f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6809      	ldr	r1, [r1, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6911      	ldr	r1, [r2, #16]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	000186a0 	.word	0x000186a0
 8002d08:	001e847f 	.word	0x001e847f
 8002d0c:	003d08ff 	.word	0x003d08ff
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d32:	f7ff faa5 	bl	8002280 <HAL_GetTick>
 8002d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	f040 80d9 	bne.w	8002ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	496d      	ldr	r1, [pc, #436]	@ (8002f04 <HAL_I2C_Mem_Write+0x1ec>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc8b 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e0cc      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Mem_Write+0x56>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0c5      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d007      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2221      	movs	r2, #33	@ 0x21
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2240      	movs	r2, #64	@ 0x40
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_I2C_Mem_Write+0x1f0>)
 8002dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd6:	88f8      	ldrh	r0, [r7, #6]
 8002dd8:	893a      	ldrh	r2, [r7, #8]
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fac2 	bl	8003370 <I2C_RequestMemoryWrite>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d052      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e081      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fd50 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06b      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d11b      	bne.n	8002e98 <HAL_I2C_Mem_Write+0x180>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d017      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1aa      	bne.n	8002df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fd43 	bl	8003930 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d107      	bne.n	8002ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e016      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	00100002 	.word	0x00100002
 8002f08:	ffff0000 	.word	0xffff0000

08002f0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	@ 0x30
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f26:	f7ff f9ab 	bl	8002280 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	f040 8214 	bne.w	8003362 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2319      	movs	r3, #25
 8002f40:	2201      	movs	r2, #1
 8002f42:	497b      	ldr	r1, [pc, #492]	@ (8003130 <HAL_I2C_Mem_Read+0x224>)
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fb91 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
 8002f52:	e207      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_I2C_Mem_Read+0x56>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e200      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d007      	beq.n	8002f88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2222      	movs	r2, #34	@ 0x22
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003134 <HAL_I2C_Mem_Read+0x228>)
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fca:	88f8      	ldrh	r0, [r7, #6]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	8979      	ldrh	r1, [r7, #10]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa5e 	bl	800349c <I2C_RequestMemoryRead>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1bc      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d113      	bne.n	800301a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	623b      	str	r3, [r7, #32]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e190      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d11b      	bne.n	800305a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e170      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305e:	2b02      	cmp	r3, #2
 8003060:	d11b      	bne.n	800309a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	e150      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030b0:	e144      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	f200 80f1 	bhi.w	800329e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d123      	bne.n	800310c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fc79 	bl	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e145      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800310a:	e117      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	2b02      	cmp	r3, #2
 8003112:	d14e      	bne.n	80031b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311a:	2200      	movs	r2, #0
 800311c:	4906      	ldr	r1, [pc, #24]	@ (8003138 <HAL_I2C_Mem_Read+0x22c>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 faa4 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e11a      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
 800312e:	bf00      	nop
 8003130:	00100002 	.word	0x00100002
 8003134:	ffff0000 	.word	0xffff0000
 8003138:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031b0:	e0c4      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	2200      	movs	r2, #0
 80031ba:	496c      	ldr	r1, [pc, #432]	@ (800336c <HAL_I2C_Mem_Read+0x460>)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa55 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0cb      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	2200      	movs	r2, #0
 8003216:	4955      	ldr	r1, [pc, #340]	@ (800336c <HAL_I2C_Mem_Read+0x460>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fa27 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e09d      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800329c:	e04e      	b.n	800333c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fb8c 	bl	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e058      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d124      	bne.n	800333c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d107      	bne.n	800330a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003308:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	f47f aeb6 	bne.w	80030b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	@ 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	00010004 	.word	0x00010004

08003370 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	461a      	mov	r2, r3
 800337e:	4603      	mov	r3, r0
 8003380:	817b      	strh	r3, [r7, #10]
 8003382:	460b      	mov	r3, r1
 8003384:	813b      	strh	r3, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003398:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f960 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c0:	d103      	bne.n	80033ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e05f      	b.n	800348e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ce:	897b      	ldrh	r3, [r7, #10]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	492d      	ldr	r1, [pc, #180]	@ (8003498 <I2C_RequestMemoryWrite+0x128>)
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f9bb 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e04c      	b.n	800348e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340c:	6a39      	ldr	r1, [r7, #32]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fa46 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	2b04      	cmp	r3, #4
 8003420:	d107      	bne.n	8003432 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003430:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e02b      	b.n	800348e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]
 8003446:	e021      	b.n	800348c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	b29b      	uxth	r3, r3
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa20 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b04      	cmp	r3, #4
 800346c:	d107      	bne.n	800347e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e005      	b.n	800348e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00010002 	.word	0x00010002

0800349c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2200      	movs	r2, #0
 80034de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f8c2 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fc:	d103      	bne.n	8003506 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003504:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0aa      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003518:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	6a3a      	ldr	r2, [r7, #32]
 800351e:	4952      	ldr	r1, [pc, #328]	@ (8003668 <I2C_RequestMemoryRead+0x1cc>)
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f91d 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e097      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	6a39      	ldr	r1, [r7, #32]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f9a8 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b04      	cmp	r3, #4
 800355c:	d107      	bne.n	800356e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e076      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e021      	b.n	80035c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003584:	893b      	ldrh	r3, [r7, #8]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b29b      	uxth	r3, r3
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f982 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e050      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035be:	893b      	ldrh	r3, [r7, #8]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ca:	6a39      	ldr	r1, [r7, #32]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f967 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d107      	bne.n	80035f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e035      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003602:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	2200      	movs	r2, #0
 800360c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f82b 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362a:	d103      	bne.n	8003634 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e013      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003638:	897b      	ldrh	r3, [r7, #10]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	6a3a      	ldr	r2, [r7, #32]
 800364c:	4906      	ldr	r1, [pc, #24]	@ (8003668 <I2C_RequestMemoryRead+0x1cc>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f886 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00010002 	.word	0x00010002

0800366c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800367c:	e048      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d044      	beq.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fe fdfb 	bl	8002280 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d139      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10d      	bne.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	e00c      	b.n	80036dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d116      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e023      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10d      	bne.n	8003736 <I2C_WaitOnFlagUntilTimeout+0xca>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	e00c      	b.n	8003750 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	429a      	cmp	r2, r3
 8003754:	d093      	beq.n	800367e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376e:	e071      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d123      	bne.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e067      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d041      	beq.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d0:	f7fe fd56 	bl	8002280 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d302      	bcc.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d136      	bne.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e00b      	b.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	43da      	mvns	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e021      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10c      	bne.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	43da      	mvns	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e00b      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f af6d 	bne.w	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	e034      	b.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8e3 	bl	8003a7a <I2C_IsAcknowledgeFailed>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e034      	b.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d028      	beq.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fe fcdb 	bl	8002280 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11d      	bne.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b80      	cmp	r3, #128	@ 0x80
 80038e8:	d016      	beq.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003922:	2b80      	cmp	r3, #128	@ 0x80
 8003924:	d1c3      	bne.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800393c:	e034      	b.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f89b 	bl	8003a7a <I2C_IsAcknowledgeFailed>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e034      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d028      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe fc93 	bl	8002280 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d016      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e007      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d1c3      	bne.n	800393e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039cc:	e049      	b.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d119      	bne.n	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0210 	mvn.w	r2, #16
 80039e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e030      	b.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fe fc36 	bl	8002280 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11d      	bne.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	d016      	beq.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e007      	b.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d1ae      	bne.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a90:	d11b      	bne.n	8003aca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0cc      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b68      	ldr	r3, [pc, #416]	@ (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d90c      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b65      	ldr	r3, [pc, #404]	@ (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b63      	ldr	r3, [pc, #396]	@ (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b8      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b2c:	4b59      	ldr	r3, [pc, #356]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a58      	ldr	r2, [pc, #352]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b44:	4b53      	ldr	r3, [pc, #332]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a52      	ldr	r2, [pc, #328]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b50      	ldr	r3, [pc, #320]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	494d      	ldr	r1, [pc, #308]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d044      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b47      	ldr	r3, [pc, #284]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d119      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b3f      	ldr	r3, [pc, #252]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e067      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb6:	4b37      	ldr	r3, [pc, #220]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4934      	ldr	r1, [pc, #208]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7fe fb5a 	bl	8002280 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd0:	f7fe fb56 	bl	8002280 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e04f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 020c 	and.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1eb      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d20c      	bcs.n	8003c20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b22      	ldr	r3, [pc, #136]	@ (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e032      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c2c:	4b19      	ldr	r3, [pc, #100]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4916      	ldr	r1, [pc, #88]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	490e      	ldr	r1, [pc, #56]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c5e:	f000 f855 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003c62:	4602      	mov	r2, r0
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	490a      	ldr	r1, [pc, #40]	@ (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	5ccb      	ldrb	r3, [r1, r3]
 8003c72:	fa22 f303 	lsr.w	r3, r2, r3
 8003c76:	4a09      	ldr	r2, [pc, #36]	@ (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe faba 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023c00 	.word	0x40023c00
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08007cf8 	.word	0x08007cf8
 8003c9c:	2000001c 	.word	0x2000001c
 8003ca0:	20000020 	.word	0x20000020

08003ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	2000001c 	.word	0x2000001c

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc0:	f7ff fff0 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0a9b      	lsrs	r3, r3, #10
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4903      	ldr	r1, [pc, #12]	@ (8003ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08007d08 	.word	0x08007d08

08003ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ce8:	f7ff ffdc 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0b5b      	lsrs	r3, r3, #13
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4903      	ldr	r1, [pc, #12]	@ (8003d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	08007d08 	.word	0x08007d08

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b0ae      	sub	sp, #184	@ 0xb8
 8003d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d32:	4bcb      	ldr	r3, [pc, #812]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	f200 8206 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x440>
 8003d40:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	0800414d 	.word	0x0800414d
 8003d50:	0800414d 	.word	0x0800414d
 8003d54:	0800414d 	.word	0x0800414d
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	0800414d 	.word	0x0800414d
 8003d60:	0800414d 	.word	0x0800414d
 8003d64:	0800414d 	.word	0x0800414d
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	0800414d 	.word	0x0800414d
 8003d70:	0800414d 	.word	0x0800414d
 8003d74:	0800414d 	.word	0x0800414d
 8003d78:	08003f7d 	.word	0x08003f7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d82:	e1e7      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d84:	4bb8      	ldr	r3, [pc, #736]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d8a:	e1e3      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4bb4      	ldr	r3, [pc, #720]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d98:	4bb1      	ldr	r3, [pc, #708]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d071      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4bae      	ldr	r3, [pc, #696]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003db0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	f04f 0000 	mov.w	r0, #0
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	0159      	lsls	r1, r3, #5
 8003dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ddc:	0150      	lsls	r0, r2, #5
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4621      	mov	r1, r4
 8003de4:	1a51      	subs	r1, r2, r1
 8003de6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	018b      	lsls	r3, r1, #6
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e06:	4641      	mov	r1, r8
 8003e08:	018a      	lsls	r2, r1, #6
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e10:	4649      	mov	r1, r9
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e24:	4649      	mov	r1, r9
 8003e26:	00cb      	lsls	r3, r1, #3
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2e:	4641      	mov	r1, r8
 8003e30:	00ca      	lsls	r2, r1, #3
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	4622      	mov	r2, r4
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e3e:	462b      	mov	r3, r5
 8003e40:	460a      	mov	r2, r1
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e54:	4629      	mov	r1, r5
 8003e56:	024b      	lsls	r3, r1, #9
 8003e58:	4621      	mov	r1, r4
 8003e5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e5e:	4621      	mov	r1, r4
 8003e60:	024a      	lsls	r2, r1, #9
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e78:	f7fc ff06 	bl	8000c88 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e86:	e067      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b75      	ldr	r3, [pc, #468]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ebc:	0150      	lsls	r0, r2, #5
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	1a51      	subs	r1, r2, r1
 8003ec6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003edc:	4649      	mov	r1, r9
 8003ede:	018b      	lsls	r3, r1, #6
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	018a      	lsls	r2, r1, #6
 8003eea:	4641      	mov	r1, r8
 8003eec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	4692      	mov	sl, r2
 8003f0c:	469b      	mov	fp, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb1a 0303 	adds.w	r3, sl, r3
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	462b      	mov	r3, r5
 8003f18:	eb4b 0303 	adc.w	r3, fp, r3
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	028b      	lsls	r3, r1, #10
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f34:	4621      	mov	r1, r4
 8003f36:	028a      	lsls	r2, r1, #10
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f40:	2200      	movs	r2, #0
 8003f42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f44:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f4a:	f7fc fe9d 	bl	8000c88 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4613      	mov	r3, r2
 8003f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f58:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7a:	e0eb      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f88:	4b35      	ldr	r3, [pc, #212]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d06b      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4b32      	ldr	r3, [pc, #200]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa8:	2300      	movs	r3, #0
 8003faa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc2:	0150      	lsls	r0, r2, #5
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4621      	mov	r1, r4
 8003fca:	1a51      	subs	r1, r2, r1
 8003fcc:	61b9      	str	r1, [r7, #24]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	018b      	lsls	r3, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fec:	4651      	mov	r1, sl
 8003fee:	018a      	lsls	r2, r1, #6
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ff6:	4659      	mov	r1, fp
 8003ff8:	eb63 0901 	sbc.w	r9, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004008:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004010:	4690      	mov	r8, r2
 8004012:	4699      	mov	r9, r3
 8004014:	4623      	mov	r3, r4
 8004016:	eb18 0303 	adds.w	r3, r8, r3
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	462b      	mov	r3, r5
 800401e:	eb49 0303 	adc.w	r3, r9, r3
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004030:	4629      	mov	r1, r5
 8004032:	024b      	lsls	r3, r1, #9
 8004034:	4621      	mov	r1, r4
 8004036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800403a:	4621      	mov	r1, r4
 800403c:	024a      	lsls	r2, r1, #9
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004046:	2200      	movs	r2, #0
 8004048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800404a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800404c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004050:	f7fc fe1a 	bl	8000c88 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4613      	mov	r3, r2
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405e:	e065      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x420>
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406c:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x458>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	2200      	movs	r2, #0
 8004074:	4618      	mov	r0, r3
 8004076:	4611      	mov	r1, r2
 8004078:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407c:	653b      	str	r3, [r7, #80]	@ 0x50
 800407e:	2300      	movs	r3, #0
 8004080:	657b      	str	r3, [r7, #84]	@ 0x54
 8004082:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004086:	4642      	mov	r2, r8
 8004088:	464b      	mov	r3, r9
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4641      	mov	r1, r8
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	4649      	mov	r1, r9
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040b8:	4659      	mov	r1, fp
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4651      	mov	r1, sl
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4651      	mov	r1, sl
 80040c8:	1a54      	subs	r4, r2, r1
 80040ca:	4659      	mov	r1, fp
 80040cc:	eb63 0501 	sbc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	464b      	mov	r3, r9
 80040ec:	eb45 0303 	adc.w	r3, r5, r3
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fe:	4629      	mov	r1, r5
 8004100:	028b      	lsls	r3, r1, #10
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004108:	4621      	mov	r1, r4
 800410a:	028a      	lsls	r2, r1, #10
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004114:	2200      	movs	r2, #0
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800411a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800411e:	f7fc fdb3 	bl	8000c88 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800412c:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x458>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0f1b      	lsrs	r3, r3, #28
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800413a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800413e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800414a:	e003      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x45c>)
 800414e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004158:	4618      	mov	r0, r3
 800415a:	37b8      	adds	r7, #184	@ 0xb8
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400

0800416c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e28d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8083 	beq.w	8004292 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800418c:	4b94      	ldr	r3, [pc, #592]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b04      	cmp	r3, #4
 8004196:	d019      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004198:	4b91      	ldr	r3, [pc, #580]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
        || \
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041a4:	4b8e      	ldr	r3, [pc, #568]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b0:	d00c      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b2:	4b8b      	ldr	r3, [pc, #556]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b88      	ldr	r3, [pc, #544]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_OscConfig+0x124>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d157      	bne.n	8004290 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e25a      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x90>
 80041ee:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0xb4>
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6e      	ldr	r2, [pc, #440]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe f81e 	bl	8002280 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fe f81a 	bl	8002280 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	@ 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e21f      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xdc>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe f80a 	bl	8002280 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe f806 	bl	8002280 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e20b      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x104>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06f      	beq.n	800437e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042aa:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d105      	bne.n	80042c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042b6:	4b4a      	ldr	r3, [pc, #296]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b44      	ldr	r3, [pc, #272]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1d3      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4937      	ldr	r1, [pc, #220]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b34      	ldr	r3, [pc, #208]	@ (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fd ffb3 	bl	8002280 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd ffaf 	bl	8002280 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1b4      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2b      	ldr	r3, [pc, #172]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4925      	ldr	r1, [pc, #148]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd ff92 	bl	8002280 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fd ff8e 	bl	8002280 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e193      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d036      	beq.n	80043f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd ff72 	bl	8002280 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fd ff6e 	bl	8002280 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e173      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x234>
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fd ff5b 	bl	8002280 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00e      	b.n	80043ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fd ff57 	bl	8002280 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d907      	bls.n	80043ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e15c      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	42470000 	.word	0x42470000
 80043e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ea      	bne.n	80043ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8097 	beq.w	8004534 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4b7f      	ldr	r3, [pc, #508]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a7e      	ldr	r2, [pc, #504]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40
 8004426:	4b7c      	ldr	r3, [pc, #496]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b79      	ldr	r3, [pc, #484]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b76      	ldr	r3, [pc, #472]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fd ff17 	bl	8002280 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fd ff13 	bl	8002280 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e118      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b6c      	ldr	r3, [pc, #432]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x31e>
 800447c:	4b66      	ldr	r3, [pc, #408]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004480:	4a65      	ldr	r2, [pc, #404]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	@ 0x70
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x340>
 8004492:	4b61      	ldr	r3, [pc, #388]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a60      	ldr	r2, [pc, #384]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	@ 0x70
 800449e:	4b5e      	ldr	r3, [pc, #376]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 80044ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	4a59      	ldr	r2, [pc, #356]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b8:	4b57      	ldr	r3, [pc, #348]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044be:	f023 0304 	bic.w	r3, r3, #4
 80044c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd fed8 	bl	8002280 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd fed4 	bl	8002280 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0d7      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ee      	beq.n	80044d4 <HAL_RCC_OscConfig+0x368>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd fec2 	bl	8002280 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fd febe 	bl	8002280 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0c1      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ee      	bne.n	8004500 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80ad 	beq.w	8004698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453e:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d060      	beq.n	800460c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d145      	bne.n	80045de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b33      	ldr	r3, [pc, #204]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fe92 	bl	8002280 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd fe8e 	bl	8002280 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e093      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	491b      	ldr	r1, [pc, #108]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fd fe63 	bl	8002280 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045be:	f7fd fe5f 	bl	8002280 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e064      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x452>
 80045dc:	e05c      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fe4c 	bl	8002280 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fe48 	bl	8002280 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x480>
 800460a:	e045      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e040      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <HAL_RCC_OscConfig+0x538>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d030      	beq.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d129      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d122      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d119      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d10f      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e042      	b.n	8004740 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd fc3e 	bl	8001f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	@ 0x24
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f865 	bl	80057bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b20      	cmp	r3, #32
 8004766:	d175      	bne.n	8004854 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Transmit+0x2c>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e06e      	b.n	8004856 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2221      	movs	r2, #33	@ 0x21
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004786:	f7fd fd7b 	bl	8002280 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a0:	d108      	bne.n	80047b4 <HAL_UART_Transmit+0x6c>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e003      	b.n	80047bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047bc:	e02e      	b.n	800481c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	@ 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fd3d 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e03a      	b.n	8004856 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	3302      	adds	r3, #2
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e007      	b.n	800480e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	3301      	adds	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1cb      	bne.n	80047be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	2140      	movs	r1, #64	@ 0x40
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fd09 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e006      	b.n	8004856 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b08a      	sub	sp, #40	@ 0x28
 8004862:	af02      	add	r7, sp, #8
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	f040 8081 	bne.w	8004982 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_UART_Receive+0x2e>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e079      	b.n	8004984 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2222      	movs	r2, #34	@ 0x22
 800489a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a4:	f7fd fcec 	bl	8002280 <HAL_GetTick>
 80048a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048be:	d108      	bne.n	80048d2 <HAL_UART_Receive+0x74>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e003      	b.n	80048da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048da:	e047      	b.n	800496c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2120      	movs	r1, #32
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fcae 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e042      	b.n	8004984 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10c      	bne.n	800491e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	b29a      	uxth	r2, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	3302      	adds	r3, #2
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e01f      	b.n	800495e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004926:	d007      	beq.n	8004938 <HAL_UART_Receive+0xda>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <HAL_UART_Receive+0xe8>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	e008      	b.n	8004958 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004952:	b2da      	uxtb	r2, r3
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1b2      	bne.n	80048dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d112      	bne.n	80049cc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Receive_DMA+0x26>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e00b      	b.n	80049ce <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	461a      	mov	r2, r3
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fc9a 	bl	80052fc <UART_Start_Receive_DMA>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b090      	sub	sp, #64	@ 0x40
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049de:	2300      	movs	r3, #0
 80049e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b80      	cmp	r3, #128	@ 0x80
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b21      	cmp	r3, #33	@ 0x21
 8004a02:	d128      	bne.n	8004a56 <HAL_UART_DMAStop+0x80>
 8004a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d025      	beq.n	8004a56 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	623b      	str	r3, [r7, #32]
   return(result);
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd fdb1 	bl	80025b2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fced 	bl	8005430 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b22      	cmp	r3, #34	@ 0x22
 8004a76:	d128      	bne.n	8004aca <HAL_UART_DMAStop+0xf4>
 8004a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d025      	beq.n	8004aca <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a9e:	61fa      	str	r2, [r7, #28]
 8004aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	69b9      	ldr	r1, [r7, #24]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd fd77 	bl	80025b2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fcdb 	bl	8005480 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3740      	adds	r7, #64	@ 0x40
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10f      	bne.n	8004b3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <HAL_UART_IRQHandler+0x66>
 8004b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fd83 	bl	800563e <UART_Receive_IT>
      return;
 8004b38:	e25b      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80de 	beq.w	8004d00 <HAL_UART_IRQHandler+0x22c>
 8004b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80d1 	beq.w	8004d00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_UART_IRQHandler+0xae>
 8004b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xd2>
 8004b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f043 0202 	orr.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_UART_IRQHandler+0xf6>
 8004bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	f043 0204 	orr.w	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d011      	beq.n	8004bfa <HAL_UART_IRQHandler+0x126>
 8004bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f043 0208 	orr.w	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 81f2 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_IRQHandler+0x14e>
 8004c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fd0e 	bl	800563e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_UART_IRQHandler+0x17a>
 8004c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d04f      	beq.n	8004cee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fc16 	bl	8005480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5e:	2b40      	cmp	r3, #64	@ 0x40
 8004c60:	d141      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1d9      	bne.n	8004c62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d013      	beq.n	8004cde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cba:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb4 <HAL_UART_IRQHandler+0x3e0>)
 8004cbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fd fce5 	bl	8002692 <HAL_DMA_Abort_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e00e      	b.n	8004cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f99e 	bl	8005020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	e00a      	b.n	8004cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f99a 	bl	8005020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	e006      	b.n	8004cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f996 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cfa:	e175      	b.n	8004fe8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	bf00      	nop
    return;
 8004cfe:	e173      	b.n	8004fe8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 814f 	bne.w	8004fa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8148 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8141 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	f040 80b6 	bne.w	8004eb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8145 	beq.w	8004fec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	f080 813e 	bcs.w	8004fec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d82:	f000 8088 	beq.w	8004e96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004db2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1d9      	bne.n	8004d86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004de2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3314      	adds	r3, #20
 8004df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004df6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e1      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e3      	bne.n	8004e0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e66:	f023 0310 	bic.w	r3, r3, #16
 8004e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e3      	bne.n	8004e54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fd fb8e 	bl	80025b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8c1 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eb2:	e09b      	b.n	8004fec <HAL_UART_IRQHandler+0x518>
 8004eb4:	08005547 	.word	0x08005547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 808e 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8089 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f02:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	623b      	str	r3, [r7, #32]
   return(result);
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f80:	61fa      	str	r2, [r7, #28]
 8004f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e3      	bne.n	8004f5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f847 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fa6:	e023      	b.n	8004ff0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x4f4>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fad4 	bl	800556e <UART_Transmit_IT>
    return;
 8004fc6:	e014      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fb14 	bl	800560e <UART_EndTransmit_IT>
    return;
 8004fe6:	e004      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ff0:	bf00      	nop
  }
}
 8004ff2:	37e8      	adds	r7, #232	@ 0xe8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b09c      	sub	sp, #112	@ 0x70
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d172      	bne.n	800514e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800506a:	2200      	movs	r2, #0
 800506c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800506e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800507e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800508e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005090:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800509c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80050c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80050c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	623b      	str	r3, [r7, #32]
   return(result);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3314      	adds	r3, #20
 80050f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e5      	bne.n	80050d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800510a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	2b01      	cmp	r3, #1
 8005118:	d119      	bne.n	800514e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	60fb      	str	r3, [r7, #12]
   return(result);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 0310 	bic.w	r3, r3, #16
 8005130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	330c      	adds	r3, #12
 8005138:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800513a:	61fa      	str	r2, [r7, #28]
 800513c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	69b9      	ldr	r1, [r7, #24]
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	617b      	str	r3, [r7, #20]
   return(result);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e5      	bne.n	800511a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800514e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005150:	2200      	movs	r2, #0
 8005152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800515e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005160:	4619      	mov	r1, r3
 8005162:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005164:	f7ff ff66 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005168:	e002      	b.n	8005170 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800516a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800516c:	f7fc f948 	bl	8001400 <HAL_UART_RxCpltCallback>
}
 8005170:	bf00      	nop
 8005172:	3770      	adds	r7, #112	@ 0x70
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005184:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d108      	bne.n	80051a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	4619      	mov	r1, r3
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff ff48 	bl	8005034 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051a4:	e002      	b.n	80051ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ff30 	bl	800500c <HAL_UART_RxHalfCpltCallback>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d0:	2b80      	cmp	r3, #128	@ 0x80
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b21      	cmp	r3, #33	@ 0x21
 80051e6:	d108      	bne.n	80051fa <UART_DMAError+0x46>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80051f4:	68b8      	ldr	r0, [r7, #8]
 80051f6:	f000 f91b 	bl	8005430 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b22      	cmp	r3, #34	@ 0x22
 800521a:	d108      	bne.n	800522e <UART_DMAError+0x7a>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f000 f929 	bl	8005480 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f043 0210 	orr.w	r2, r3, #16
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f7ff fef0 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005258:	e03b      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d037      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fd f80d 	bl	8002280 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <UART_WaitOnFlagUntilTimeout+0x30>
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e03a      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d023      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b80      	cmp	r3, #128	@ 0x80
 800528e:	d020      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b40      	cmp	r3, #64	@ 0x40
 8005294:	d01d      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d116      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8e0 	bl	8005480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2208      	movs	r2, #8
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00f      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d0b4      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b098      	sub	sp, #96	@ 0x60
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2222      	movs	r2, #34	@ 0x22
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005328:	4a3e      	ldr	r2, [pc, #248]	@ (8005424 <UART_Start_Receive_DMA+0x128>)
 800532a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	4a3d      	ldr	r2, [pc, #244]	@ (8005428 <UART_Start_Receive_DMA+0x12c>)
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	4a3c      	ldr	r2, [pc, #240]	@ (800542c <UART_Start_Receive_DMA+0x130>)
 800533a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005340:	2200      	movs	r2, #0
 8005342:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005344:	f107 0308 	add.w	r3, r7, #8
 8005348:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	f7fd f8d1 	bl	8002502 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d019      	beq.n	80053b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800539e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80053a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80053a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80053ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	617b      	str	r3, [r7, #20]
   return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3314      	adds	r3, #20
 8005404:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005406:	627a      	str	r2, [r7, #36]	@ 0x24
 8005408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6a39      	ldr	r1, [r7, #32]
 800540c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	61fb      	str	r3, [r7, #28]
   return(result);
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3760      	adds	r7, #96	@ 0x60
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	0800504d 	.word	0x0800504d
 8005428:	08005179 	.word	0x08005179
 800542c:	080051b5 	.word	0x080051b5

08005430 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	@ 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	60bb      	str	r3, [r7, #8]
   return(result);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	61ba      	str	r2, [r7, #24]
 800545a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6979      	ldr	r1, [r7, #20]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	613b      	str	r3, [r7, #16]
   return(result);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005474:	bf00      	nop
 8005476:	3724      	adds	r7, #36	@ 0x24
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005480:	b480      	push	{r7}
 8005482:	b095      	sub	sp, #84	@ 0x54
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800549e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80054aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e5      	bne.n	8005488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3314      	adds	r3, #20
 80054c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d119      	bne.n	800552c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	60bb      	str	r3, [r7, #8]
   return(result);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f023 0310 	bic.w	r3, r3, #16
 800550e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005518:	61ba      	str	r2, [r7, #24]
 800551a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6979      	ldr	r1, [r7, #20]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	613b      	str	r3, [r7, #16]
   return(result);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e5      	bne.n	80054f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800553a:	bf00      	nop
 800553c:	3754      	adds	r7, #84	@ 0x54
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fd5d 	bl	8005020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b21      	cmp	r3, #33	@ 0x21
 8005580:	d13e      	bne.n	8005600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558a:	d114      	bne.n	80055b6 <UART_Transmit_IT+0x48>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d110      	bne.n	80055b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	621a      	str	r2, [r3, #32]
 80055b4:	e008      	b.n	80055c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6211      	str	r1, [r2, #32]
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4619      	mov	r1, r3
 80055d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10f      	bne.n	80055fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e000      	b.n	8005602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005600:	2302      	movs	r3, #2
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fce2 	bl	8004ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08c      	sub	sp, #48	@ 0x30
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b22      	cmp	r3, #34	@ 0x22
 8005650:	f040 80ae 	bne.w	80057b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565c:	d117      	bne.n	800568e <UART_Receive_IT+0x50>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d113      	bne.n	800568e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567c:	b29a      	uxth	r2, r3
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	@ 0x28
 800568c:	e026      	b.n	80056dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a0:	d007      	beq.n	80056b2 <UART_Receive_IT+0x74>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <UART_Receive_IT+0x82>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e008      	b.n	80056d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4619      	mov	r1, r3
 80056ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d15d      	bne.n	80057ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0220 	bic.w	r2, r2, #32
 80056fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800570e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695a      	ldr	r2, [r3, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	2b01      	cmp	r3, #1
 8005734:	d135      	bne.n	80057a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	613b      	str	r3, [r7, #16]
   return(result);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575c:	623a      	str	r2, [r7, #32]
 800575e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	6a3a      	ldr	r2, [r7, #32]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	61bb      	str	r3, [r7, #24]
   return(result);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d10a      	bne.n	8005794 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff fc4a 	bl	8005034 <HAL_UARTEx_RxEventCallback>
 80057a0:	e002      	b.n	80057a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fe2c 	bl	8001400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e002      	b.n	80057b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3730      	adds	r7, #48	@ 0x30
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b0c0      	sub	sp, #256	@ 0x100
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	68d9      	ldr	r1, [r3, #12]
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	ea40 0301 	orr.w	r3, r0, r1
 80057e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005814:	f021 010c 	bic.w	r1, r1, #12
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005822:	430b      	orrs	r3, r1
 8005824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	6999      	ldr	r1, [r3, #24]
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	ea40 0301 	orr.w	r3, r0, r1
 8005842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8f      	ldr	r3, [pc, #572]	@ (8005a88 <UART_SetConfig+0x2cc>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d005      	beq.n	800585c <UART_SetConfig+0xa0>
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b8d      	ldr	r3, [pc, #564]	@ (8005a8c <UART_SetConfig+0x2d0>)
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fe fa42 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 8005860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005864:	e003      	b.n	800586e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fe fa29 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 800586a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005878:	f040 810c 	bne.w	8005a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800587c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005880:	2200      	movs	r2, #0
 8005882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800588a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	1891      	adds	r1, r2, r2
 8005894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005896:	415b      	adcs	r3, r3
 8005898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800589a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800589e:	4621      	mov	r1, r4
 80058a0:	eb12 0801 	adds.w	r8, r2, r1
 80058a4:	4629      	mov	r1, r5
 80058a6:	eb43 0901 	adc.w	r9, r3, r1
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058be:	4690      	mov	r8, r2
 80058c0:	4699      	mov	r9, r3
 80058c2:	4623      	mov	r3, r4
 80058c4:	eb18 0303 	adds.w	r3, r8, r3
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb49 0303 	adc.w	r3, r9, r3
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ea:	460b      	mov	r3, r1
 80058ec:	18db      	adds	r3, r3, r3
 80058ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f0:	4613      	mov	r3, r2
 80058f2:	eb42 0303 	adc.w	r3, r2, r3
 80058f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005900:	f7fb f9c2 	bl	8000c88 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4b61      	ldr	r3, [pc, #388]	@ (8005a90 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2302 	umull	r2, r3, r3, r2
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	011c      	lsls	r4, r3, #4
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800591c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	1891      	adds	r1, r2, r2
 800592a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800592c:	415b      	adcs	r3, r3
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005934:	4641      	mov	r1, r8
 8005936:	eb12 0a01 	adds.w	sl, r2, r1
 800593a:	4649      	mov	r1, r9
 800593c:	eb43 0b01 	adc.w	fp, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800594c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005954:	4692      	mov	sl, r2
 8005956:	469b      	mov	fp, r3
 8005958:	4643      	mov	r3, r8
 800595a:	eb1a 0303 	adds.w	r3, sl, r3
 800595e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005962:	464b      	mov	r3, r9
 8005964:	eb4b 0303 	adc.w	r3, fp, r3
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	647b      	str	r3, [r7, #68]	@ 0x44
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005996:	f7fb f977 	bl	8000c88 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005a90 <UART_SetConfig+0x2d4>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	@ 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059b6:	4b36      	ldr	r3, [pc, #216]	@ (8005a90 <UART_SetConfig+0x2d4>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059c4:	441c      	add	r4, r3
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059e0:	415b      	adcs	r3, r3
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4651      	mov	r1, sl
 8005a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a52:	f7fb f919 	bl	8000c88 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <UART_SetConfig+0x2d4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	@ 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3332      	adds	r3, #50	@ 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	@ (8005a90 <UART_SetConfig+0x2d4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0207 	and.w	r2, r3, #7
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a84:	e106      	b.n	8005c94 <UART_SetConfig+0x4d8>
 8005a86:	bf00      	nop
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	6239      	str	r1, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1854      	adds	r4, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb43 0501 	adc.w	r5, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4643      	mov	r3, r8
 8005ad6:	18e3      	adds	r3, r4, r3
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005adc:	464b      	mov	r3, r9
 8005ade:	eb45 0303 	adc.w	r3, r5, r3
 8005ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b02:	4629      	mov	r1, r5
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b14:	f7fb f8b8 	bl	8000c88 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	011c      	lsls	r4, r3, #4
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b38:	4642      	mov	r2, r8
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	1891      	adds	r1, r2, r2
 8005b3e:	61b9      	str	r1, [r7, #24]
 8005b40:	415b      	adcs	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b48:	4641      	mov	r1, r8
 8005b4a:	1851      	adds	r1, r2, r1
 8005b4c:	6139      	str	r1, [r7, #16]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	414b      	adcs	r3, r1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b60:	4659      	mov	r1, fp
 8005b62:	00cb      	lsls	r3, r1, #3
 8005b64:	4651      	mov	r1, sl
 8005b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	00ca      	lsls	r2, r1, #3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	4642      	mov	r2, r8
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	460a      	mov	r2, r1
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005baa:	4641      	mov	r1, r8
 8005bac:	008a      	lsls	r2, r1, #2
 8005bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bb2:	f7fb f869 	bl	8000c88 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2264      	movs	r2, #100	@ 0x64
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	1acb      	subs	r3, r1, r3
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	3332      	adds	r3, #50	@ 0x32
 8005bd0:	4a33      	ldr	r2, [pc, #204]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bdc:	441c      	add	r4, r3
 8005bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be2:	2200      	movs	r2, #0
 8005be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	1851      	adds	r1, r2, r1
 8005c00:	6039      	str	r1, [r7, #0]
 8005c02:	4649      	mov	r1, r9
 8005c04:	414b      	adcs	r3, r1
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c14:	4659      	mov	r1, fp
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4651      	mov	r1, sl
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4651      	mov	r1, sl
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2e:	464b      	mov	r3, r9
 8005c30:	460a      	mov	r2, r1
 8005c32:	eb42 0303 	adc.w	r3, r2, r3
 8005c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c50:	4649      	mov	r1, r9
 8005c52:	008b      	lsls	r3, r1, #2
 8005c54:	4641      	mov	r1, r8
 8005c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	008a      	lsls	r2, r1, #2
 8005c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c62:	f7fb f811 	bl	8000c88 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	@ 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	3332      	adds	r3, #50	@ 0x32
 8005c7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ca0 <UART_SetConfig+0x4e4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 020f 	and.w	r2, r3, #15
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4422      	add	r2, r4
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca0:	51eb851f 	.word	0x51eb851f

08005ca4 <atoi>:
 8005ca4:	220a      	movs	r2, #10
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f000 b87a 	b.w	8005da0 <strtol>

08005cac <_strtol_l.constprop.0>:
 8005cac:	2b24      	cmp	r3, #36	@ 0x24
 8005cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb2:	4686      	mov	lr, r0
 8005cb4:	4690      	mov	r8, r2
 8005cb6:	d801      	bhi.n	8005cbc <_strtol_l.constprop.0+0x10>
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d106      	bne.n	8005cca <_strtol_l.constprop.0+0x1e>
 8005cbc:	f000 f8fa 	bl	8005eb4 <__errno>
 8005cc0:	2316      	movs	r3, #22
 8005cc2:	6003      	str	r3, [r0, #0]
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cca:	4834      	ldr	r0, [pc, #208]	@ (8005d9c <_strtol_l.constprop.0+0xf0>)
 8005ccc:	460d      	mov	r5, r1
 8005cce:	462a      	mov	r2, r5
 8005cd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cd4:	5d06      	ldrb	r6, [r0, r4]
 8005cd6:	f016 0608 	ands.w	r6, r6, #8
 8005cda:	d1f8      	bne.n	8005cce <_strtol_l.constprop.0+0x22>
 8005cdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8005cde:	d12d      	bne.n	8005d3c <_strtol_l.constprop.0+0x90>
 8005ce0:	782c      	ldrb	r4, [r5, #0]
 8005ce2:	2601      	movs	r6, #1
 8005ce4:	1c95      	adds	r5, r2, #2
 8005ce6:	f033 0210 	bics.w	r2, r3, #16
 8005cea:	d109      	bne.n	8005d00 <_strtol_l.constprop.0+0x54>
 8005cec:	2c30      	cmp	r4, #48	@ 0x30
 8005cee:	d12a      	bne.n	8005d46 <_strtol_l.constprop.0+0x9a>
 8005cf0:	782a      	ldrb	r2, [r5, #0]
 8005cf2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005cf6:	2a58      	cmp	r2, #88	@ 0x58
 8005cf8:	d125      	bne.n	8005d46 <_strtol_l.constprop.0+0x9a>
 8005cfa:	786c      	ldrb	r4, [r5, #1]
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	3502      	adds	r5, #2
 8005d00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005d04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d08:	2200      	movs	r2, #0
 8005d0a:	fbbc f9f3 	udiv	r9, ip, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005d18:	2f09      	cmp	r7, #9
 8005d1a:	d81b      	bhi.n	8005d54 <_strtol_l.constprop.0+0xa8>
 8005d1c:	463c      	mov	r4, r7
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	dd27      	ble.n	8005d72 <_strtol_l.constprop.0+0xc6>
 8005d22:	1c57      	adds	r7, r2, #1
 8005d24:	d007      	beq.n	8005d36 <_strtol_l.constprop.0+0x8a>
 8005d26:	4581      	cmp	r9, r0
 8005d28:	d320      	bcc.n	8005d6c <_strtol_l.constprop.0+0xc0>
 8005d2a:	d101      	bne.n	8005d30 <_strtol_l.constprop.0+0x84>
 8005d2c:	45a2      	cmp	sl, r4
 8005d2e:	db1d      	blt.n	8005d6c <_strtol_l.constprop.0+0xc0>
 8005d30:	fb00 4003 	mla	r0, r0, r3, r4
 8005d34:	2201      	movs	r2, #1
 8005d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d3a:	e7eb      	b.n	8005d14 <_strtol_l.constprop.0+0x68>
 8005d3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8005d3e:	bf04      	itt	eq
 8005d40:	782c      	ldrbeq	r4, [r5, #0]
 8005d42:	1c95      	addeq	r5, r2, #2
 8005d44:	e7cf      	b.n	8005ce6 <_strtol_l.constprop.0+0x3a>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1da      	bne.n	8005d00 <_strtol_l.constprop.0+0x54>
 8005d4a:	2c30      	cmp	r4, #48	@ 0x30
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2308      	moveq	r3, #8
 8005d50:	230a      	movne	r3, #10
 8005d52:	e7d5      	b.n	8005d00 <_strtol_l.constprop.0+0x54>
 8005d54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d58:	2f19      	cmp	r7, #25
 8005d5a:	d801      	bhi.n	8005d60 <_strtol_l.constprop.0+0xb4>
 8005d5c:	3c37      	subs	r4, #55	@ 0x37
 8005d5e:	e7de      	b.n	8005d1e <_strtol_l.constprop.0+0x72>
 8005d60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d64:	2f19      	cmp	r7, #25
 8005d66:	d804      	bhi.n	8005d72 <_strtol_l.constprop.0+0xc6>
 8005d68:	3c57      	subs	r4, #87	@ 0x57
 8005d6a:	e7d8      	b.n	8005d1e <_strtol_l.constprop.0+0x72>
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	e7e1      	b.n	8005d36 <_strtol_l.constprop.0+0x8a>
 8005d72:	1c53      	adds	r3, r2, #1
 8005d74:	d108      	bne.n	8005d88 <_strtol_l.constprop.0+0xdc>
 8005d76:	2322      	movs	r3, #34	@ 0x22
 8005d78:	f8ce 3000 	str.w	r3, [lr]
 8005d7c:	4660      	mov	r0, ip
 8005d7e:	f1b8 0f00 	cmp.w	r8, #0
 8005d82:	d0a0      	beq.n	8005cc6 <_strtol_l.constprop.0+0x1a>
 8005d84:	1e69      	subs	r1, r5, #1
 8005d86:	e006      	b.n	8005d96 <_strtol_l.constprop.0+0xea>
 8005d88:	b106      	cbz	r6, 8005d8c <_strtol_l.constprop.0+0xe0>
 8005d8a:	4240      	negs	r0, r0
 8005d8c:	f1b8 0f00 	cmp.w	r8, #0
 8005d90:	d099      	beq.n	8005cc6 <_strtol_l.constprop.0+0x1a>
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	d1f6      	bne.n	8005d84 <_strtol_l.constprop.0+0xd8>
 8005d96:	f8c8 1000 	str.w	r1, [r8]
 8005d9a:	e794      	b.n	8005cc6 <_strtol_l.constprop.0+0x1a>
 8005d9c:	08007d11 	.word	0x08007d11

08005da0 <strtol>:
 8005da0:	4613      	mov	r3, r2
 8005da2:	460a      	mov	r2, r1
 8005da4:	4601      	mov	r1, r0
 8005da6:	4802      	ldr	r0, [pc, #8]	@ (8005db0 <strtol+0x10>)
 8005da8:	6800      	ldr	r0, [r0, #0]
 8005daa:	f7ff bf7f 	b.w	8005cac <_strtol_l.constprop.0>
 8005dae:	bf00      	nop
 8005db0:	20000028 	.word	0x20000028

08005db4 <sniprintf>:
 8005db4:	b40c      	push	{r2, r3}
 8005db6:	b530      	push	{r4, r5, lr}
 8005db8:	4b17      	ldr	r3, [pc, #92]	@ (8005e18 <sniprintf+0x64>)
 8005dba:	1e0c      	subs	r4, r1, #0
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	b09d      	sub	sp, #116	@ 0x74
 8005dc0:	da08      	bge.n	8005dd4 <sniprintf+0x20>
 8005dc2:	238b      	movs	r3, #139	@ 0x8b
 8005dc4:	602b      	str	r3, [r5, #0]
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	b01d      	add	sp, #116	@ 0x74
 8005dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dd0:	b002      	add	sp, #8
 8005dd2:	4770      	bx	lr
 8005dd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ddc:	bf14      	ite	ne
 8005dde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005de2:	4623      	moveq	r3, r4
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	9307      	str	r3, [sp, #28]
 8005de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005dec:	9002      	str	r0, [sp, #8]
 8005dee:	9006      	str	r0, [sp, #24]
 8005df0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005df4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005df6:	ab21      	add	r3, sp, #132	@ 0x84
 8005df8:	a902      	add	r1, sp, #8
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f000 f9e7 	bl	80061d0 <_svfiprintf_r>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	bfbc      	itt	lt
 8005e06:	238b      	movlt	r3, #139	@ 0x8b
 8005e08:	602b      	strlt	r3, [r5, #0]
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	d0dd      	beq.n	8005dca <sniprintf+0x16>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e7d9      	b.n	8005dca <sniprintf+0x16>
 8005e16:	bf00      	nop
 8005e18:	20000028 	.word	0x20000028

08005e1c <siprintf>:
 8005e1c:	b40e      	push	{r1, r2, r3}
 8005e1e:	b500      	push	{lr}
 8005e20:	b09c      	sub	sp, #112	@ 0x70
 8005e22:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e24:	9002      	str	r0, [sp, #8]
 8005e26:	9006      	str	r0, [sp, #24]
 8005e28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e2c:	4809      	ldr	r0, [pc, #36]	@ (8005e54 <siprintf+0x38>)
 8005e2e:	9107      	str	r1, [sp, #28]
 8005e30:	9104      	str	r1, [sp, #16]
 8005e32:	4909      	ldr	r1, [pc, #36]	@ (8005e58 <siprintf+0x3c>)
 8005e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e38:	9105      	str	r1, [sp, #20]
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	a902      	add	r1, sp, #8
 8005e40:	f000 f9c6 	bl	80061d0 <_svfiprintf_r>
 8005e44:	9b02      	ldr	r3, [sp, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	b01c      	add	sp, #112	@ 0x70
 8005e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e50:	b003      	add	sp, #12
 8005e52:	4770      	bx	lr
 8005e54:	20000028 	.word	0x20000028
 8005e58:	ffff0208 	.word	0xffff0208

08005e5c <memset>:
 8005e5c:	4402      	add	r2, r0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d100      	bne.n	8005e66 <memset+0xa>
 8005e64:	4770      	bx	lr
 8005e66:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6a:	e7f9      	b.n	8005e60 <memset+0x4>

08005e6c <strchr>:
 8005e6c:	b2c9      	uxtb	r1, r1
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e76:	b112      	cbz	r2, 8005e7e <strchr+0x12>
 8005e78:	428a      	cmp	r2, r1
 8005e7a:	d1f9      	bne.n	8005e70 <strchr+0x4>
 8005e7c:	4770      	bx	lr
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	bf18      	it	ne
 8005e82:	2000      	movne	r0, #0
 8005e84:	4770      	bx	lr

08005e86 <strstr>:
 8005e86:	780a      	ldrb	r2, [r1, #0]
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	b96a      	cbnz	r2, 8005ea8 <strstr+0x22>
 8005e8c:	bd70      	pop	{r4, r5, r6, pc}
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d109      	bne.n	8005ea6 <strstr+0x20>
 8005e92:	460c      	mov	r4, r1
 8005e94:	4605      	mov	r5, r0
 8005e96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f6      	beq.n	8005e8c <strstr+0x6>
 8005e9e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005ea2:	429e      	cmp	r6, r3
 8005ea4:	d0f7      	beq.n	8005e96 <strstr+0x10>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	7803      	ldrb	r3, [r0, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ef      	bne.n	8005e8e <strstr+0x8>
 8005eae:	4618      	mov	r0, r3
 8005eb0:	e7ec      	b.n	8005e8c <strstr+0x6>
	...

08005eb4 <__errno>:
 8005eb4:	4b01      	ldr	r3, [pc, #4]	@ (8005ebc <__errno+0x8>)
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000028 	.word	0x20000028

08005ec0 <__libc_init_array>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ef8 <__libc_init_array+0x38>)
 8005ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8005efc <__libc_init_array+0x3c>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	2600      	movs	r6, #0
 8005ecc:	42a6      	cmp	r6, r4
 8005ece:	d109      	bne.n	8005ee4 <__libc_init_array+0x24>
 8005ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f00 <__libc_init_array+0x40>)
 8005ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f04 <__libc_init_array+0x44>)
 8005ed4:	f001 fe54 	bl	8007b80 <_init>
 8005ed8:	1b64      	subs	r4, r4, r5
 8005eda:	10a4      	asrs	r4, r4, #2
 8005edc:	2600      	movs	r6, #0
 8005ede:	42a6      	cmp	r6, r4
 8005ee0:	d105      	bne.n	8005eee <__libc_init_array+0x2e>
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee8:	4798      	blx	r3
 8005eea:	3601      	adds	r6, #1
 8005eec:	e7ee      	b.n	8005ecc <__libc_init_array+0xc>
 8005eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef2:	4798      	blx	r3
 8005ef4:	3601      	adds	r6, #1
 8005ef6:	e7f2      	b.n	8005ede <__libc_init_array+0x1e>
 8005ef8:	08007ef0 	.word	0x08007ef0
 8005efc:	08007ef0 	.word	0x08007ef0
 8005f00:	08007ef0 	.word	0x08007ef0
 8005f04:	08007ef4 	.word	0x08007ef4

08005f08 <__retarget_lock_acquire_recursive>:
 8005f08:	4770      	bx	lr

08005f0a <__retarget_lock_release_recursive>:
 8005f0a:	4770      	bx	lr

08005f0c <memcpy>:
 8005f0c:	440a      	add	r2, r1
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f14:	d100      	bne.n	8005f18 <memcpy+0xc>
 8005f16:	4770      	bx	lr
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f22:	4291      	cmp	r1, r2
 8005f24:	d1f9      	bne.n	8005f1a <memcpy+0xe>
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <_free_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	d041      	beq.n	8005fb4 <_free_r+0x8c>
 8005f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f34:	1f0c      	subs	r4, r1, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfb8      	it	lt
 8005f3a:	18e4      	addlt	r4, r4, r3
 8005f3c:	f000 f8e0 	bl	8006100 <__malloc_lock>
 8005f40:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb8 <_free_r+0x90>)
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	b933      	cbnz	r3, 8005f54 <_free_r+0x2c>
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6014      	str	r4, [r2, #0]
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f50:	f000 b8dc 	b.w	800610c <__malloc_unlock>
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d908      	bls.n	8005f6a <_free_r+0x42>
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	1821      	adds	r1, r4, r0
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf01      	itttt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	1809      	addeq	r1, r1, r0
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	e7ed      	b.n	8005f46 <_free_r+0x1e>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b10b      	cbz	r3, 8005f74 <_free_r+0x4c>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d9fa      	bls.n	8005f6a <_free_r+0x42>
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	1850      	adds	r0, r2, r1
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d10b      	bne.n	8005f94 <_free_r+0x6c>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	4401      	add	r1, r0
 8005f80:	1850      	adds	r0, r2, r1
 8005f82:	4283      	cmp	r3, r0
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	d1e0      	bne.n	8005f4a <_free_r+0x22>
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	6053      	str	r3, [r2, #4]
 8005f8e:	4408      	add	r0, r1
 8005f90:	6010      	str	r0, [r2, #0]
 8005f92:	e7da      	b.n	8005f4a <_free_r+0x22>
 8005f94:	d902      	bls.n	8005f9c <_free_r+0x74>
 8005f96:	230c      	movs	r3, #12
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	e7d6      	b.n	8005f4a <_free_r+0x22>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	1821      	adds	r1, r4, r0
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf04      	itt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	bf04      	itt	eq
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	6054      	str	r4, [r2, #4]
 8005fb2:	e7ca      	b.n	8005f4a <_free_r+0x22>
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000984 	.word	0x20000984

08005fbc <sbrk_aligned>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	4e0f      	ldr	r6, [pc, #60]	@ (8005ffc <sbrk_aligned+0x40>)
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	6831      	ldr	r1, [r6, #0]
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	b911      	cbnz	r1, 8005fce <sbrk_aligned+0x12>
 8005fc8:	f000 fba6 	bl	8006718 <_sbrk_r>
 8005fcc:	6030      	str	r0, [r6, #0]
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f000 fba1 	bl	8006718 <_sbrk_r>
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d103      	bne.n	8005fe2 <sbrk_aligned+0x26>
 8005fda:	f04f 34ff 	mov.w	r4, #4294967295
 8005fde:	4620      	mov	r0, r4
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	1cc4      	adds	r4, r0, #3
 8005fe4:	f024 0403 	bic.w	r4, r4, #3
 8005fe8:	42a0      	cmp	r0, r4
 8005fea:	d0f8      	beq.n	8005fde <sbrk_aligned+0x22>
 8005fec:	1a21      	subs	r1, r4, r0
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 fb92 	bl	8006718 <_sbrk_r>
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d1f2      	bne.n	8005fde <sbrk_aligned+0x22>
 8005ff8:	e7ef      	b.n	8005fda <sbrk_aligned+0x1e>
 8005ffa:	bf00      	nop
 8005ffc:	20000980 	.word	0x20000980

08006000 <_malloc_r>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	1ccd      	adds	r5, r1, #3
 8006006:	f025 0503 	bic.w	r5, r5, #3
 800600a:	3508      	adds	r5, #8
 800600c:	2d0c      	cmp	r5, #12
 800600e:	bf38      	it	cc
 8006010:	250c      	movcc	r5, #12
 8006012:	2d00      	cmp	r5, #0
 8006014:	4606      	mov	r6, r0
 8006016:	db01      	blt.n	800601c <_malloc_r+0x1c>
 8006018:	42a9      	cmp	r1, r5
 800601a:	d904      	bls.n	8006026 <_malloc_r+0x26>
 800601c:	230c      	movs	r3, #12
 800601e:	6033      	str	r3, [r6, #0]
 8006020:	2000      	movs	r0, #0
 8006022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006026:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060fc <_malloc_r+0xfc>
 800602a:	f000 f869 	bl	8006100 <__malloc_lock>
 800602e:	f8d8 3000 	ldr.w	r3, [r8]
 8006032:	461c      	mov	r4, r3
 8006034:	bb44      	cbnz	r4, 8006088 <_malloc_r+0x88>
 8006036:	4629      	mov	r1, r5
 8006038:	4630      	mov	r0, r6
 800603a:	f7ff ffbf 	bl	8005fbc <sbrk_aligned>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	4604      	mov	r4, r0
 8006042:	d158      	bne.n	80060f6 <_malloc_r+0xf6>
 8006044:	f8d8 4000 	ldr.w	r4, [r8]
 8006048:	4627      	mov	r7, r4
 800604a:	2f00      	cmp	r7, #0
 800604c:	d143      	bne.n	80060d6 <_malloc_r+0xd6>
 800604e:	2c00      	cmp	r4, #0
 8006050:	d04b      	beq.n	80060ea <_malloc_r+0xea>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	4639      	mov	r1, r7
 8006056:	4630      	mov	r0, r6
 8006058:	eb04 0903 	add.w	r9, r4, r3
 800605c:	f000 fb5c 	bl	8006718 <_sbrk_r>
 8006060:	4581      	cmp	r9, r0
 8006062:	d142      	bne.n	80060ea <_malloc_r+0xea>
 8006064:	6821      	ldr	r1, [r4, #0]
 8006066:	1a6d      	subs	r5, r5, r1
 8006068:	4629      	mov	r1, r5
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ffa6 	bl	8005fbc <sbrk_aligned>
 8006070:	3001      	adds	r0, #1
 8006072:	d03a      	beq.n	80060ea <_malloc_r+0xea>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	442b      	add	r3, r5
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	f8d8 3000 	ldr.w	r3, [r8]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	bb62      	cbnz	r2, 80060dc <_malloc_r+0xdc>
 8006082:	f8c8 7000 	str.w	r7, [r8]
 8006086:	e00f      	b.n	80060a8 <_malloc_r+0xa8>
 8006088:	6822      	ldr	r2, [r4, #0]
 800608a:	1b52      	subs	r2, r2, r5
 800608c:	d420      	bmi.n	80060d0 <_malloc_r+0xd0>
 800608e:	2a0b      	cmp	r2, #11
 8006090:	d917      	bls.n	80060c2 <_malloc_r+0xc2>
 8006092:	1961      	adds	r1, r4, r5
 8006094:	42a3      	cmp	r3, r4
 8006096:	6025      	str	r5, [r4, #0]
 8006098:	bf18      	it	ne
 800609a:	6059      	strne	r1, [r3, #4]
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	bf08      	it	eq
 80060a0:	f8c8 1000 	streq.w	r1, [r8]
 80060a4:	5162      	str	r2, [r4, r5]
 80060a6:	604b      	str	r3, [r1, #4]
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 f82f 	bl	800610c <__malloc_unlock>
 80060ae:	f104 000b 	add.w	r0, r4, #11
 80060b2:	1d23      	adds	r3, r4, #4
 80060b4:	f020 0007 	bic.w	r0, r0, #7
 80060b8:	1ac2      	subs	r2, r0, r3
 80060ba:	bf1c      	itt	ne
 80060bc:	1a1b      	subne	r3, r3, r0
 80060be:	50a3      	strne	r3, [r4, r2]
 80060c0:	e7af      	b.n	8006022 <_malloc_r+0x22>
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	bf0c      	ite	eq
 80060c8:	f8c8 2000 	streq.w	r2, [r8]
 80060cc:	605a      	strne	r2, [r3, #4]
 80060ce:	e7eb      	b.n	80060a8 <_malloc_r+0xa8>
 80060d0:	4623      	mov	r3, r4
 80060d2:	6864      	ldr	r4, [r4, #4]
 80060d4:	e7ae      	b.n	8006034 <_malloc_r+0x34>
 80060d6:	463c      	mov	r4, r7
 80060d8:	687f      	ldr	r7, [r7, #4]
 80060da:	e7b6      	b.n	800604a <_malloc_r+0x4a>
 80060dc:	461a      	mov	r2, r3
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d1fb      	bne.n	80060dc <_malloc_r+0xdc>
 80060e4:	2300      	movs	r3, #0
 80060e6:	6053      	str	r3, [r2, #4]
 80060e8:	e7de      	b.n	80060a8 <_malloc_r+0xa8>
 80060ea:	230c      	movs	r3, #12
 80060ec:	6033      	str	r3, [r6, #0]
 80060ee:	4630      	mov	r0, r6
 80060f0:	f000 f80c 	bl	800610c <__malloc_unlock>
 80060f4:	e794      	b.n	8006020 <_malloc_r+0x20>
 80060f6:	6005      	str	r5, [r0, #0]
 80060f8:	e7d6      	b.n	80060a8 <_malloc_r+0xa8>
 80060fa:	bf00      	nop
 80060fc:	20000984 	.word	0x20000984

08006100 <__malloc_lock>:
 8006100:	4801      	ldr	r0, [pc, #4]	@ (8006108 <__malloc_lock+0x8>)
 8006102:	f7ff bf01 	b.w	8005f08 <__retarget_lock_acquire_recursive>
 8006106:	bf00      	nop
 8006108:	2000097c 	.word	0x2000097c

0800610c <__malloc_unlock>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__malloc_unlock+0x8>)
 800610e:	f7ff befc 	b.w	8005f0a <__retarget_lock_release_recursive>
 8006112:	bf00      	nop
 8006114:	2000097c 	.word	0x2000097c

08006118 <__ssputs_r>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	688e      	ldr	r6, [r1, #8]
 800611e:	461f      	mov	r7, r3
 8006120:	42be      	cmp	r6, r7
 8006122:	680b      	ldr	r3, [r1, #0]
 8006124:	4682      	mov	sl, r0
 8006126:	460c      	mov	r4, r1
 8006128:	4690      	mov	r8, r2
 800612a:	d82d      	bhi.n	8006188 <__ssputs_r+0x70>
 800612c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006130:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006134:	d026      	beq.n	8006184 <__ssputs_r+0x6c>
 8006136:	6965      	ldr	r5, [r4, #20]
 8006138:	6909      	ldr	r1, [r1, #16]
 800613a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800613e:	eba3 0901 	sub.w	r9, r3, r1
 8006142:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006146:	1c7b      	adds	r3, r7, #1
 8006148:	444b      	add	r3, r9
 800614a:	106d      	asrs	r5, r5, #1
 800614c:	429d      	cmp	r5, r3
 800614e:	bf38      	it	cc
 8006150:	461d      	movcc	r5, r3
 8006152:	0553      	lsls	r3, r2, #21
 8006154:	d527      	bpl.n	80061a6 <__ssputs_r+0x8e>
 8006156:	4629      	mov	r1, r5
 8006158:	f7ff ff52 	bl	8006000 <_malloc_r>
 800615c:	4606      	mov	r6, r0
 800615e:	b360      	cbz	r0, 80061ba <__ssputs_r+0xa2>
 8006160:	6921      	ldr	r1, [r4, #16]
 8006162:	464a      	mov	r2, r9
 8006164:	f7ff fed2 	bl	8005f0c <memcpy>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800616e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	6126      	str	r6, [r4, #16]
 8006176:	6165      	str	r5, [r4, #20]
 8006178:	444e      	add	r6, r9
 800617a:	eba5 0509 	sub.w	r5, r5, r9
 800617e:	6026      	str	r6, [r4, #0]
 8006180:	60a5      	str	r5, [r4, #8]
 8006182:	463e      	mov	r6, r7
 8006184:	42be      	cmp	r6, r7
 8006186:	d900      	bls.n	800618a <__ssputs_r+0x72>
 8006188:	463e      	mov	r6, r7
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	4632      	mov	r2, r6
 800618e:	4641      	mov	r1, r8
 8006190:	f000 faa8 	bl	80066e4 <memmove>
 8006194:	68a3      	ldr	r3, [r4, #8]
 8006196:	1b9b      	subs	r3, r3, r6
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	4433      	add	r3, r6
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	2000      	movs	r0, #0
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	462a      	mov	r2, r5
 80061a8:	f000 fac6 	bl	8006738 <_realloc_r>
 80061ac:	4606      	mov	r6, r0
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d1e0      	bne.n	8006174 <__ssputs_r+0x5c>
 80061b2:	6921      	ldr	r1, [r4, #16]
 80061b4:	4650      	mov	r0, sl
 80061b6:	f7ff feb7 	bl	8005f28 <_free_r>
 80061ba:	230c      	movs	r3, #12
 80061bc:	f8ca 3000 	str.w	r3, [sl]
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	e7e9      	b.n	80061a2 <__ssputs_r+0x8a>
	...

080061d0 <_svfiprintf_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	4698      	mov	r8, r3
 80061d6:	898b      	ldrh	r3, [r1, #12]
 80061d8:	061b      	lsls	r3, r3, #24
 80061da:	b09d      	sub	sp, #116	@ 0x74
 80061dc:	4607      	mov	r7, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	4614      	mov	r4, r2
 80061e2:	d510      	bpl.n	8006206 <_svfiprintf_r+0x36>
 80061e4:	690b      	ldr	r3, [r1, #16]
 80061e6:	b973      	cbnz	r3, 8006206 <_svfiprintf_r+0x36>
 80061e8:	2140      	movs	r1, #64	@ 0x40
 80061ea:	f7ff ff09 	bl	8006000 <_malloc_r>
 80061ee:	6028      	str	r0, [r5, #0]
 80061f0:	6128      	str	r0, [r5, #16]
 80061f2:	b930      	cbnz	r0, 8006202 <_svfiprintf_r+0x32>
 80061f4:	230c      	movs	r3, #12
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	b01d      	add	sp, #116	@ 0x74
 80061fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006202:	2340      	movs	r3, #64	@ 0x40
 8006204:	616b      	str	r3, [r5, #20]
 8006206:	2300      	movs	r3, #0
 8006208:	9309      	str	r3, [sp, #36]	@ 0x24
 800620a:	2320      	movs	r3, #32
 800620c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006210:	f8cd 800c 	str.w	r8, [sp, #12]
 8006214:	2330      	movs	r3, #48	@ 0x30
 8006216:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063b4 <_svfiprintf_r+0x1e4>
 800621a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800621e:	f04f 0901 	mov.w	r9, #1
 8006222:	4623      	mov	r3, r4
 8006224:	469a      	mov	sl, r3
 8006226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800622a:	b10a      	cbz	r2, 8006230 <_svfiprintf_r+0x60>
 800622c:	2a25      	cmp	r2, #37	@ 0x25
 800622e:	d1f9      	bne.n	8006224 <_svfiprintf_r+0x54>
 8006230:	ebba 0b04 	subs.w	fp, sl, r4
 8006234:	d00b      	beq.n	800624e <_svfiprintf_r+0x7e>
 8006236:	465b      	mov	r3, fp
 8006238:	4622      	mov	r2, r4
 800623a:	4629      	mov	r1, r5
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff ff6b 	bl	8006118 <__ssputs_r>
 8006242:	3001      	adds	r0, #1
 8006244:	f000 80a7 	beq.w	8006396 <_svfiprintf_r+0x1c6>
 8006248:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800624a:	445a      	add	r2, fp
 800624c:	9209      	str	r2, [sp, #36]	@ 0x24
 800624e:	f89a 3000 	ldrb.w	r3, [sl]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 809f 	beq.w	8006396 <_svfiprintf_r+0x1c6>
 8006258:	2300      	movs	r3, #0
 800625a:	f04f 32ff 	mov.w	r2, #4294967295
 800625e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006262:	f10a 0a01 	add.w	sl, sl, #1
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	9307      	str	r3, [sp, #28]
 800626a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800626e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006270:	4654      	mov	r4, sl
 8006272:	2205      	movs	r2, #5
 8006274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006278:	484e      	ldr	r0, [pc, #312]	@ (80063b4 <_svfiprintf_r+0x1e4>)
 800627a:	f7f9 ffd1 	bl	8000220 <memchr>
 800627e:	9a04      	ldr	r2, [sp, #16]
 8006280:	b9d8      	cbnz	r0, 80062ba <_svfiprintf_r+0xea>
 8006282:	06d0      	lsls	r0, r2, #27
 8006284:	bf44      	itt	mi
 8006286:	2320      	movmi	r3, #32
 8006288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800628c:	0711      	lsls	r1, r2, #28
 800628e:	bf44      	itt	mi
 8006290:	232b      	movmi	r3, #43	@ 0x2b
 8006292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006296:	f89a 3000 	ldrb.w	r3, [sl]
 800629a:	2b2a      	cmp	r3, #42	@ 0x2a
 800629c:	d015      	beq.n	80062ca <_svfiprintf_r+0xfa>
 800629e:	9a07      	ldr	r2, [sp, #28]
 80062a0:	4654      	mov	r4, sl
 80062a2:	2000      	movs	r0, #0
 80062a4:	f04f 0c0a 	mov.w	ip, #10
 80062a8:	4621      	mov	r1, r4
 80062aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ae:	3b30      	subs	r3, #48	@ 0x30
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d94b      	bls.n	800634c <_svfiprintf_r+0x17c>
 80062b4:	b1b0      	cbz	r0, 80062e4 <_svfiprintf_r+0x114>
 80062b6:	9207      	str	r2, [sp, #28]
 80062b8:	e014      	b.n	80062e4 <_svfiprintf_r+0x114>
 80062ba:	eba0 0308 	sub.w	r3, r0, r8
 80062be:	fa09 f303 	lsl.w	r3, r9, r3
 80062c2:	4313      	orrs	r3, r2
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	46a2      	mov	sl, r4
 80062c8:	e7d2      	b.n	8006270 <_svfiprintf_r+0xa0>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	1d19      	adds	r1, r3, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	9103      	str	r1, [sp, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfbb      	ittet	lt
 80062d6:	425b      	neglt	r3, r3
 80062d8:	f042 0202 	orrlt.w	r2, r2, #2
 80062dc:	9307      	strge	r3, [sp, #28]
 80062de:	9307      	strlt	r3, [sp, #28]
 80062e0:	bfb8      	it	lt
 80062e2:	9204      	strlt	r2, [sp, #16]
 80062e4:	7823      	ldrb	r3, [r4, #0]
 80062e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062e8:	d10a      	bne.n	8006300 <_svfiprintf_r+0x130>
 80062ea:	7863      	ldrb	r3, [r4, #1]
 80062ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ee:	d132      	bne.n	8006356 <_svfiprintf_r+0x186>
 80062f0:	9b03      	ldr	r3, [sp, #12]
 80062f2:	1d1a      	adds	r2, r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	9203      	str	r2, [sp, #12]
 80062f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062fc:	3402      	adds	r4, #2
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80063c4 <_svfiprintf_r+0x1f4>
 8006304:	7821      	ldrb	r1, [r4, #0]
 8006306:	2203      	movs	r2, #3
 8006308:	4650      	mov	r0, sl
 800630a:	f7f9 ff89 	bl	8000220 <memchr>
 800630e:	b138      	cbz	r0, 8006320 <_svfiprintf_r+0x150>
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	eba0 000a 	sub.w	r0, r0, sl
 8006316:	2240      	movs	r2, #64	@ 0x40
 8006318:	4082      	lsls	r2, r0
 800631a:	4313      	orrs	r3, r2
 800631c:	3401      	adds	r4, #1
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	4824      	ldr	r0, [pc, #144]	@ (80063b8 <_svfiprintf_r+0x1e8>)
 8006326:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800632a:	2206      	movs	r2, #6
 800632c:	f7f9 ff78 	bl	8000220 <memchr>
 8006330:	2800      	cmp	r0, #0
 8006332:	d036      	beq.n	80063a2 <_svfiprintf_r+0x1d2>
 8006334:	4b21      	ldr	r3, [pc, #132]	@ (80063bc <_svfiprintf_r+0x1ec>)
 8006336:	bb1b      	cbnz	r3, 8006380 <_svfiprintf_r+0x1b0>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	3307      	adds	r3, #7
 800633c:	f023 0307 	bic.w	r3, r3, #7
 8006340:	3308      	adds	r3, #8
 8006342:	9303      	str	r3, [sp, #12]
 8006344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006346:	4433      	add	r3, r6
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
 800634a:	e76a      	b.n	8006222 <_svfiprintf_r+0x52>
 800634c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006350:	460c      	mov	r4, r1
 8006352:	2001      	movs	r0, #1
 8006354:	e7a8      	b.n	80062a8 <_svfiprintf_r+0xd8>
 8006356:	2300      	movs	r3, #0
 8006358:	3401      	adds	r4, #1
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	4619      	mov	r1, r3
 800635e:	f04f 0c0a 	mov.w	ip, #10
 8006362:	4620      	mov	r0, r4
 8006364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006368:	3a30      	subs	r2, #48	@ 0x30
 800636a:	2a09      	cmp	r2, #9
 800636c:	d903      	bls.n	8006376 <_svfiprintf_r+0x1a6>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0c6      	beq.n	8006300 <_svfiprintf_r+0x130>
 8006372:	9105      	str	r1, [sp, #20]
 8006374:	e7c4      	b.n	8006300 <_svfiprintf_r+0x130>
 8006376:	fb0c 2101 	mla	r1, ip, r1, r2
 800637a:	4604      	mov	r4, r0
 800637c:	2301      	movs	r3, #1
 800637e:	e7f0      	b.n	8006362 <_svfiprintf_r+0x192>
 8006380:	ab03      	add	r3, sp, #12
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	462a      	mov	r2, r5
 8006386:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <_svfiprintf_r+0x1f0>)
 8006388:	a904      	add	r1, sp, #16
 800638a:	4638      	mov	r0, r7
 800638c:	f3af 8000 	nop.w
 8006390:	1c42      	adds	r2, r0, #1
 8006392:	4606      	mov	r6, r0
 8006394:	d1d6      	bne.n	8006344 <_svfiprintf_r+0x174>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	065b      	lsls	r3, r3, #25
 800639a:	f53f af2d 	bmi.w	80061f8 <_svfiprintf_r+0x28>
 800639e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063a0:	e72c      	b.n	80061fc <_svfiprintf_r+0x2c>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <_svfiprintf_r+0x1f0>)
 80063aa:	a904      	add	r1, sp, #16
 80063ac:	4638      	mov	r0, r7
 80063ae:	f000 f879 	bl	80064a4 <_printf_i>
 80063b2:	e7ed      	b.n	8006390 <_svfiprintf_r+0x1c0>
 80063b4:	08007e11 	.word	0x08007e11
 80063b8:	08007e1b 	.word	0x08007e1b
 80063bc:	00000000 	.word	0x00000000
 80063c0:	08006119 	.word	0x08006119
 80063c4:	08007e17 	.word	0x08007e17

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4616      	mov	r6, r2
 80063ce:	4698      	mov	r8, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfb8      	it	lt
 80063dc:	4613      	movlt	r3, r2
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063e4:	4607      	mov	r7, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b10a      	cbz	r2, 80063ee <_printf_common+0x26>
 80063ea:	3301      	adds	r3, #1
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	0699      	lsls	r1, r3, #26
 80063f2:	bf42      	ittt	mi
 80063f4:	6833      	ldrmi	r3, [r6, #0]
 80063f6:	3302      	addmi	r3, #2
 80063f8:	6033      	strmi	r3, [r6, #0]
 80063fa:	6825      	ldr	r5, [r4, #0]
 80063fc:	f015 0506 	ands.w	r5, r5, #6
 8006400:	d106      	bne.n	8006410 <_printf_common+0x48>
 8006402:	f104 0a19 	add.w	sl, r4, #25
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	6832      	ldr	r2, [r6, #0]
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	42ab      	cmp	r3, r5
 800640e:	dc26      	bgt.n	800645e <_printf_common+0x96>
 8006410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006414:	6822      	ldr	r2, [r4, #0]
 8006416:	3b00      	subs	r3, #0
 8006418:	bf18      	it	ne
 800641a:	2301      	movne	r3, #1
 800641c:	0692      	lsls	r2, r2, #26
 800641e:	d42b      	bmi.n	8006478 <_printf_common+0xb0>
 8006420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006424:	4641      	mov	r1, r8
 8006426:	4638      	mov	r0, r7
 8006428:	47c8      	blx	r9
 800642a:	3001      	adds	r0, #1
 800642c:	d01e      	beq.n	800646c <_printf_common+0xa4>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	6922      	ldr	r2, [r4, #16]
 8006432:	f003 0306 	and.w	r3, r3, #6
 8006436:	2b04      	cmp	r3, #4
 8006438:	bf02      	ittt	eq
 800643a:	68e5      	ldreq	r5, [r4, #12]
 800643c:	6833      	ldreq	r3, [r6, #0]
 800643e:	1aed      	subeq	r5, r5, r3
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	bf0c      	ite	eq
 8006444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006448:	2500      	movne	r5, #0
 800644a:	4293      	cmp	r3, r2
 800644c:	bfc4      	itt	gt
 800644e:	1a9b      	subgt	r3, r3, r2
 8006450:	18ed      	addgt	r5, r5, r3
 8006452:	2600      	movs	r6, #0
 8006454:	341a      	adds	r4, #26
 8006456:	42b5      	cmp	r5, r6
 8006458:	d11a      	bne.n	8006490 <_printf_common+0xc8>
 800645a:	2000      	movs	r0, #0
 800645c:	e008      	b.n	8006470 <_printf_common+0xa8>
 800645e:	2301      	movs	r3, #1
 8006460:	4652      	mov	r2, sl
 8006462:	4641      	mov	r1, r8
 8006464:	4638      	mov	r0, r7
 8006466:	47c8      	blx	r9
 8006468:	3001      	adds	r0, #1
 800646a:	d103      	bne.n	8006474 <_printf_common+0xac>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	3501      	adds	r5, #1
 8006476:	e7c6      	b.n	8006406 <_printf_common+0x3e>
 8006478:	18e1      	adds	r1, r4, r3
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	2030      	movs	r0, #48	@ 0x30
 800647e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006482:	4422      	add	r2, r4
 8006484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800648c:	3302      	adds	r3, #2
 800648e:	e7c7      	b.n	8006420 <_printf_common+0x58>
 8006490:	2301      	movs	r3, #1
 8006492:	4622      	mov	r2, r4
 8006494:	4641      	mov	r1, r8
 8006496:	4638      	mov	r0, r7
 8006498:	47c8      	blx	r9
 800649a:	3001      	adds	r0, #1
 800649c:	d0e6      	beq.n	800646c <_printf_common+0xa4>
 800649e:	3601      	adds	r6, #1
 80064a0:	e7d9      	b.n	8006456 <_printf_common+0x8e>
	...

080064a4 <_printf_i>:
 80064a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	7e0f      	ldrb	r7, [r1, #24]
 80064aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064ac:	2f78      	cmp	r7, #120	@ 0x78
 80064ae:	4691      	mov	r9, r2
 80064b0:	4680      	mov	r8, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	469a      	mov	sl, r3
 80064b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ba:	d807      	bhi.n	80064cc <_printf_i+0x28>
 80064bc:	2f62      	cmp	r7, #98	@ 0x62
 80064be:	d80a      	bhi.n	80064d6 <_printf_i+0x32>
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	f000 80d2 	beq.w	800666a <_printf_i+0x1c6>
 80064c6:	2f58      	cmp	r7, #88	@ 0x58
 80064c8:	f000 80b9 	beq.w	800663e <_printf_i+0x19a>
 80064cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064d4:	e03a      	b.n	800654c <_printf_i+0xa8>
 80064d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064da:	2b15      	cmp	r3, #21
 80064dc:	d8f6      	bhi.n	80064cc <_printf_i+0x28>
 80064de:	a101      	add	r1, pc, #4	@ (adr r1, 80064e4 <_printf_i+0x40>)
 80064e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	08006551 	.word	0x08006551
 80064ec:	080064cd 	.word	0x080064cd
 80064f0:	080064cd 	.word	0x080064cd
 80064f4:	080064cd 	.word	0x080064cd
 80064f8:	080064cd 	.word	0x080064cd
 80064fc:	08006551 	.word	0x08006551
 8006500:	080064cd 	.word	0x080064cd
 8006504:	080064cd 	.word	0x080064cd
 8006508:	080064cd 	.word	0x080064cd
 800650c:	080064cd 	.word	0x080064cd
 8006510:	08006651 	.word	0x08006651
 8006514:	0800657b 	.word	0x0800657b
 8006518:	0800660b 	.word	0x0800660b
 800651c:	080064cd 	.word	0x080064cd
 8006520:	080064cd 	.word	0x080064cd
 8006524:	08006673 	.word	0x08006673
 8006528:	080064cd 	.word	0x080064cd
 800652c:	0800657b 	.word	0x0800657b
 8006530:	080064cd 	.word	0x080064cd
 8006534:	080064cd 	.word	0x080064cd
 8006538:	08006613 	.word	0x08006613
 800653c:	6833      	ldr	r3, [r6, #0]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6032      	str	r2, [r6, #0]
 8006544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800654c:	2301      	movs	r3, #1
 800654e:	e09d      	b.n	800668c <_printf_i+0x1e8>
 8006550:	6833      	ldr	r3, [r6, #0]
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	1d19      	adds	r1, r3, #4
 8006556:	6031      	str	r1, [r6, #0]
 8006558:	0606      	lsls	r6, r0, #24
 800655a:	d501      	bpl.n	8006560 <_printf_i+0xbc>
 800655c:	681d      	ldr	r5, [r3, #0]
 800655e:	e003      	b.n	8006568 <_printf_i+0xc4>
 8006560:	0645      	lsls	r5, r0, #25
 8006562:	d5fb      	bpl.n	800655c <_printf_i+0xb8>
 8006564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006568:	2d00      	cmp	r5, #0
 800656a:	da03      	bge.n	8006574 <_printf_i+0xd0>
 800656c:	232d      	movs	r3, #45	@ 0x2d
 800656e:	426d      	negs	r5, r5
 8006570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006574:	4859      	ldr	r0, [pc, #356]	@ (80066dc <_printf_i+0x238>)
 8006576:	230a      	movs	r3, #10
 8006578:	e011      	b.n	800659e <_printf_i+0xfa>
 800657a:	6821      	ldr	r1, [r4, #0]
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	0608      	lsls	r0, r1, #24
 8006580:	f853 5b04 	ldr.w	r5, [r3], #4
 8006584:	d402      	bmi.n	800658c <_printf_i+0xe8>
 8006586:	0649      	lsls	r1, r1, #25
 8006588:	bf48      	it	mi
 800658a:	b2ad      	uxthmi	r5, r5
 800658c:	2f6f      	cmp	r7, #111	@ 0x6f
 800658e:	4853      	ldr	r0, [pc, #332]	@ (80066dc <_printf_i+0x238>)
 8006590:	6033      	str	r3, [r6, #0]
 8006592:	bf14      	ite	ne
 8006594:	230a      	movne	r3, #10
 8006596:	2308      	moveq	r3, #8
 8006598:	2100      	movs	r1, #0
 800659a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800659e:	6866      	ldr	r6, [r4, #4]
 80065a0:	60a6      	str	r6, [r4, #8]
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	bfa2      	ittt	ge
 80065a6:	6821      	ldrge	r1, [r4, #0]
 80065a8:	f021 0104 	bicge.w	r1, r1, #4
 80065ac:	6021      	strge	r1, [r4, #0]
 80065ae:	b90d      	cbnz	r5, 80065b4 <_printf_i+0x110>
 80065b0:	2e00      	cmp	r6, #0
 80065b2:	d04b      	beq.n	800664c <_printf_i+0x1a8>
 80065b4:	4616      	mov	r6, r2
 80065b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ba:	fb03 5711 	mls	r7, r3, r1, r5
 80065be:	5dc7      	ldrb	r7, [r0, r7]
 80065c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065c4:	462f      	mov	r7, r5
 80065c6:	42bb      	cmp	r3, r7
 80065c8:	460d      	mov	r5, r1
 80065ca:	d9f4      	bls.n	80065b6 <_printf_i+0x112>
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d10b      	bne.n	80065e8 <_printf_i+0x144>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	07df      	lsls	r7, r3, #31
 80065d4:	d508      	bpl.n	80065e8 <_printf_i+0x144>
 80065d6:	6923      	ldr	r3, [r4, #16]
 80065d8:	6861      	ldr	r1, [r4, #4]
 80065da:	4299      	cmp	r1, r3
 80065dc:	bfde      	ittt	le
 80065de:	2330      	movle	r3, #48	@ 0x30
 80065e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065e8:	1b92      	subs	r2, r2, r6
 80065ea:	6122      	str	r2, [r4, #16]
 80065ec:	f8cd a000 	str.w	sl, [sp]
 80065f0:	464b      	mov	r3, r9
 80065f2:	aa03      	add	r2, sp, #12
 80065f4:	4621      	mov	r1, r4
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7ff fee6 	bl	80063c8 <_printf_common>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d14a      	bne.n	8006696 <_printf_i+0x1f2>
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	b004      	add	sp, #16
 8006606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f043 0320 	orr.w	r3, r3, #32
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	4833      	ldr	r0, [pc, #204]	@ (80066e0 <_printf_i+0x23c>)
 8006614:	2778      	movs	r7, #120	@ 0x78
 8006616:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	6831      	ldr	r1, [r6, #0]
 800661e:	061f      	lsls	r7, r3, #24
 8006620:	f851 5b04 	ldr.w	r5, [r1], #4
 8006624:	d402      	bmi.n	800662c <_printf_i+0x188>
 8006626:	065f      	lsls	r7, r3, #25
 8006628:	bf48      	it	mi
 800662a:	b2ad      	uxthmi	r5, r5
 800662c:	6031      	str	r1, [r6, #0]
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	bf44      	itt	mi
 8006632:	f043 0320 	orrmi.w	r3, r3, #32
 8006636:	6023      	strmi	r3, [r4, #0]
 8006638:	b11d      	cbz	r5, 8006642 <_printf_i+0x19e>
 800663a:	2310      	movs	r3, #16
 800663c:	e7ac      	b.n	8006598 <_printf_i+0xf4>
 800663e:	4827      	ldr	r0, [pc, #156]	@ (80066dc <_printf_i+0x238>)
 8006640:	e7e9      	b.n	8006616 <_printf_i+0x172>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f023 0320 	bic.w	r3, r3, #32
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	e7f6      	b.n	800663a <_printf_i+0x196>
 800664c:	4616      	mov	r6, r2
 800664e:	e7bd      	b.n	80065cc <_printf_i+0x128>
 8006650:	6833      	ldr	r3, [r6, #0]
 8006652:	6825      	ldr	r5, [r4, #0]
 8006654:	6961      	ldr	r1, [r4, #20]
 8006656:	1d18      	adds	r0, r3, #4
 8006658:	6030      	str	r0, [r6, #0]
 800665a:	062e      	lsls	r6, r5, #24
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	d501      	bpl.n	8006664 <_printf_i+0x1c0>
 8006660:	6019      	str	r1, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0x1c6>
 8006664:	0668      	lsls	r0, r5, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0x1bc>
 8006668:	8019      	strh	r1, [r3, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	4616      	mov	r6, r2
 8006670:	e7bc      	b.n	80065ec <_printf_i+0x148>
 8006672:	6833      	ldr	r3, [r6, #0]
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	6032      	str	r2, [r6, #0]
 8006678:	681e      	ldr	r6, [r3, #0]
 800667a:	6862      	ldr	r2, [r4, #4]
 800667c:	2100      	movs	r1, #0
 800667e:	4630      	mov	r0, r6
 8006680:	f7f9 fdce 	bl	8000220 <memchr>
 8006684:	b108      	cbz	r0, 800668a <_printf_i+0x1e6>
 8006686:	1b80      	subs	r0, r0, r6
 8006688:	6060      	str	r0, [r4, #4]
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	2300      	movs	r3, #0
 8006690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006694:	e7aa      	b.n	80065ec <_printf_i+0x148>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	4632      	mov	r2, r6
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	47d0      	blx	sl
 80066a0:	3001      	adds	r0, #1
 80066a2:	d0ad      	beq.n	8006600 <_printf_i+0x15c>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	079b      	lsls	r3, r3, #30
 80066a8:	d413      	bmi.n	80066d2 <_printf_i+0x22e>
 80066aa:	68e0      	ldr	r0, [r4, #12]
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	4298      	cmp	r0, r3
 80066b0:	bfb8      	it	lt
 80066b2:	4618      	movlt	r0, r3
 80066b4:	e7a6      	b.n	8006604 <_printf_i+0x160>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4632      	mov	r2, r6
 80066ba:	4649      	mov	r1, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	47d0      	blx	sl
 80066c0:	3001      	adds	r0, #1
 80066c2:	d09d      	beq.n	8006600 <_printf_i+0x15c>
 80066c4:	3501      	adds	r5, #1
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	9903      	ldr	r1, [sp, #12]
 80066ca:	1a5b      	subs	r3, r3, r1
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	dcf2      	bgt.n	80066b6 <_printf_i+0x212>
 80066d0:	e7eb      	b.n	80066aa <_printf_i+0x206>
 80066d2:	2500      	movs	r5, #0
 80066d4:	f104 0619 	add.w	r6, r4, #25
 80066d8:	e7f5      	b.n	80066c6 <_printf_i+0x222>
 80066da:	bf00      	nop
 80066dc:	08007e22 	.word	0x08007e22
 80066e0:	08007e33 	.word	0x08007e33

080066e4 <memmove>:
 80066e4:	4288      	cmp	r0, r1
 80066e6:	b510      	push	{r4, lr}
 80066e8:	eb01 0402 	add.w	r4, r1, r2
 80066ec:	d902      	bls.n	80066f4 <memmove+0x10>
 80066ee:	4284      	cmp	r4, r0
 80066f0:	4623      	mov	r3, r4
 80066f2:	d807      	bhi.n	8006704 <memmove+0x20>
 80066f4:	1e43      	subs	r3, r0, #1
 80066f6:	42a1      	cmp	r1, r4
 80066f8:	d008      	beq.n	800670c <memmove+0x28>
 80066fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006702:	e7f8      	b.n	80066f6 <memmove+0x12>
 8006704:	4402      	add	r2, r0
 8006706:	4601      	mov	r1, r0
 8006708:	428a      	cmp	r2, r1
 800670a:	d100      	bne.n	800670e <memmove+0x2a>
 800670c:	bd10      	pop	{r4, pc}
 800670e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006716:	e7f7      	b.n	8006708 <memmove+0x24>

08006718 <_sbrk_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	@ (8006734 <_sbrk_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fb fcd4 	bl	80020d0 <_sbrk>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_sbrk_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_sbrk_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20000978 	.word	0x20000978

08006738 <_realloc_r>:
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673c:	4680      	mov	r8, r0
 800673e:	4615      	mov	r5, r2
 8006740:	460c      	mov	r4, r1
 8006742:	b921      	cbnz	r1, 800674e <_realloc_r+0x16>
 8006744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4611      	mov	r1, r2
 800674a:	f7ff bc59 	b.w	8006000 <_malloc_r>
 800674e:	b92a      	cbnz	r2, 800675c <_realloc_r+0x24>
 8006750:	f7ff fbea 	bl	8005f28 <_free_r>
 8006754:	2400      	movs	r4, #0
 8006756:	4620      	mov	r0, r4
 8006758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800675c:	f000 f81a 	bl	8006794 <_malloc_usable_size_r>
 8006760:	4285      	cmp	r5, r0
 8006762:	4606      	mov	r6, r0
 8006764:	d802      	bhi.n	800676c <_realloc_r+0x34>
 8006766:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800676a:	d8f4      	bhi.n	8006756 <_realloc_r+0x1e>
 800676c:	4629      	mov	r1, r5
 800676e:	4640      	mov	r0, r8
 8006770:	f7ff fc46 	bl	8006000 <_malloc_r>
 8006774:	4607      	mov	r7, r0
 8006776:	2800      	cmp	r0, #0
 8006778:	d0ec      	beq.n	8006754 <_realloc_r+0x1c>
 800677a:	42b5      	cmp	r5, r6
 800677c:	462a      	mov	r2, r5
 800677e:	4621      	mov	r1, r4
 8006780:	bf28      	it	cs
 8006782:	4632      	movcs	r2, r6
 8006784:	f7ff fbc2 	bl	8005f0c <memcpy>
 8006788:	4621      	mov	r1, r4
 800678a:	4640      	mov	r0, r8
 800678c:	f7ff fbcc 	bl	8005f28 <_free_r>
 8006790:	463c      	mov	r4, r7
 8006792:	e7e0      	b.n	8006756 <_realloc_r+0x1e>

08006794 <_malloc_usable_size_r>:
 8006794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006798:	1f18      	subs	r0, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbc      	itt	lt
 800679e:	580b      	ldrlt	r3, [r1, r0]
 80067a0:	18c0      	addlt	r0, r0, r3
 80067a2:	4770      	bx	lr

080067a4 <atan2>:
 80067a4:	f000 b984 	b.w	8006ab0 <__ieee754_atan2>

080067a8 <pow>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	ed2d 8b02 	vpush	{d8}
 80067ae:	eeb0 8a40 	vmov.f32	s16, s0
 80067b2:	eef0 8a60 	vmov.f32	s17, s1
 80067b6:	ec55 4b11 	vmov	r4, r5, d1
 80067ba:	f000 fa41 	bl	8006c40 <__ieee754_pow>
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	ec57 6b10 	vmov	r6, r7, d0
 80067ca:	f7fa f9cf 	bl	8000b6c <__aeabi_dcmpun>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d13b      	bne.n	800684a <pow+0xa2>
 80067d2:	ec51 0b18 	vmov	r0, r1, d8
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	f7fa f995 	bl	8000b08 <__aeabi_dcmpeq>
 80067de:	b1b8      	cbz	r0, 8006810 <pow+0x68>
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7fa f98e 	bl	8000b08 <__aeabi_dcmpeq>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d146      	bne.n	800687e <pow+0xd6>
 80067f0:	ec45 4b10 	vmov	d0, r4, r5
 80067f4:	f000 f874 	bl	80068e0 <finite>
 80067f8:	b338      	cbz	r0, 800684a <pow+0xa2>
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f98b 	bl	8000b1c <__aeabi_dcmplt>
 8006806:	b300      	cbz	r0, 800684a <pow+0xa2>
 8006808:	f7ff fb54 	bl	8005eb4 <__errno>
 800680c:	2322      	movs	r3, #34	@ 0x22
 800680e:	e01b      	b.n	8006848 <pow+0xa0>
 8006810:	ec47 6b10 	vmov	d0, r6, r7
 8006814:	f000 f864 	bl	80068e0 <finite>
 8006818:	b9e0      	cbnz	r0, 8006854 <pow+0xac>
 800681a:	eeb0 0a48 	vmov.f32	s0, s16
 800681e:	eef0 0a68 	vmov.f32	s1, s17
 8006822:	f000 f85d 	bl	80068e0 <finite>
 8006826:	b1a8      	cbz	r0, 8006854 <pow+0xac>
 8006828:	ec45 4b10 	vmov	d0, r4, r5
 800682c:	f000 f858 	bl	80068e0 <finite>
 8006830:	b180      	cbz	r0, 8006854 <pow+0xac>
 8006832:	4632      	mov	r2, r6
 8006834:	463b      	mov	r3, r7
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7fa f997 	bl	8000b6c <__aeabi_dcmpun>
 800683e:	2800      	cmp	r0, #0
 8006840:	d0e2      	beq.n	8006808 <pow+0x60>
 8006842:	f7ff fb37 	bl	8005eb4 <__errno>
 8006846:	2321      	movs	r3, #33	@ 0x21
 8006848:	6003      	str	r3, [r0, #0]
 800684a:	ecbd 8b02 	vpop	{d8}
 800684e:	ec47 6b10 	vmov	d0, r6, r7
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	2200      	movs	r2, #0
 8006856:	2300      	movs	r3, #0
 8006858:	4630      	mov	r0, r6
 800685a:	4639      	mov	r1, r7
 800685c:	f7fa f954 	bl	8000b08 <__aeabi_dcmpeq>
 8006860:	2800      	cmp	r0, #0
 8006862:	d0f2      	beq.n	800684a <pow+0xa2>
 8006864:	eeb0 0a48 	vmov.f32	s0, s16
 8006868:	eef0 0a68 	vmov.f32	s1, s17
 800686c:	f000 f838 	bl	80068e0 <finite>
 8006870:	2800      	cmp	r0, #0
 8006872:	d0ea      	beq.n	800684a <pow+0xa2>
 8006874:	ec45 4b10 	vmov	d0, r4, r5
 8006878:	f000 f832 	bl	80068e0 <finite>
 800687c:	e7c3      	b.n	8006806 <pow+0x5e>
 800687e:	4f01      	ldr	r7, [pc, #4]	@ (8006884 <pow+0xdc>)
 8006880:	2600      	movs	r6, #0
 8006882:	e7e2      	b.n	800684a <pow+0xa2>
 8006884:	3ff00000 	.word	0x3ff00000

08006888 <sqrt>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	ed2d 8b02 	vpush	{d8}
 800688e:	ec55 4b10 	vmov	r4, r5, d0
 8006892:	f000 f831 	bl	80068f8 <__ieee754_sqrt>
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	4620      	mov	r0, r4
 800689c:	4629      	mov	r1, r5
 800689e:	eeb0 8a40 	vmov.f32	s16, s0
 80068a2:	eef0 8a60 	vmov.f32	s17, s1
 80068a6:	f7fa f961 	bl	8000b6c <__aeabi_dcmpun>
 80068aa:	b990      	cbnz	r0, 80068d2 <sqrt+0x4a>
 80068ac:	2200      	movs	r2, #0
 80068ae:	2300      	movs	r3, #0
 80068b0:	4620      	mov	r0, r4
 80068b2:	4629      	mov	r1, r5
 80068b4:	f7fa f932 	bl	8000b1c <__aeabi_dcmplt>
 80068b8:	b158      	cbz	r0, 80068d2 <sqrt+0x4a>
 80068ba:	f7ff fafb 	bl	8005eb4 <__errno>
 80068be:	2321      	movs	r3, #33	@ 0x21
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	4610      	mov	r0, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	f7f9 ffdf 	bl	800088c <__aeabi_ddiv>
 80068ce:	ec41 0b18 	vmov	d8, r0, r1
 80068d2:	eeb0 0a48 	vmov.f32	s0, s16
 80068d6:	eef0 0a68 	vmov.f32	s1, s17
 80068da:	ecbd 8b02 	vpop	{d8}
 80068de:	bd38      	pop	{r3, r4, r5, pc}

080068e0 <finite>:
 80068e0:	b082      	sub	sp, #8
 80068e2:	ed8d 0b00 	vstr	d0, [sp]
 80068e6:	9801      	ldr	r0, [sp, #4]
 80068e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80068ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80068f0:	0fc0      	lsrs	r0, r0, #31
 80068f2:	b002      	add	sp, #8
 80068f4:	4770      	bx	lr
	...

080068f8 <__ieee754_sqrt>:
 80068f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	4a68      	ldr	r2, [pc, #416]	@ (8006aa0 <__ieee754_sqrt+0x1a8>)
 80068fe:	ec55 4b10 	vmov	r4, r5, d0
 8006902:	43aa      	bics	r2, r5
 8006904:	462b      	mov	r3, r5
 8006906:	4621      	mov	r1, r4
 8006908:	d110      	bne.n	800692c <__ieee754_sqrt+0x34>
 800690a:	4622      	mov	r2, r4
 800690c:	4620      	mov	r0, r4
 800690e:	4629      	mov	r1, r5
 8006910:	f7f9 fe92 	bl	8000638 <__aeabi_dmul>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4620      	mov	r0, r4
 800691a:	4629      	mov	r1, r5
 800691c:	f7f9 fcd6 	bl	80002cc <__adddf3>
 8006920:	4604      	mov	r4, r0
 8006922:	460d      	mov	r5, r1
 8006924:	ec45 4b10 	vmov	d0, r4, r5
 8006928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	2d00      	cmp	r5, #0
 800692e:	dc0e      	bgt.n	800694e <__ieee754_sqrt+0x56>
 8006930:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006934:	4322      	orrs	r2, r4
 8006936:	d0f5      	beq.n	8006924 <__ieee754_sqrt+0x2c>
 8006938:	b19d      	cbz	r5, 8006962 <__ieee754_sqrt+0x6a>
 800693a:	4622      	mov	r2, r4
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7f9 fcc2 	bl	80002c8 <__aeabi_dsub>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	f7f9 ffa0 	bl	800088c <__aeabi_ddiv>
 800694c:	e7e8      	b.n	8006920 <__ieee754_sqrt+0x28>
 800694e:	152a      	asrs	r2, r5, #20
 8006950:	d115      	bne.n	800697e <__ieee754_sqrt+0x86>
 8006952:	2000      	movs	r0, #0
 8006954:	e009      	b.n	800696a <__ieee754_sqrt+0x72>
 8006956:	0acb      	lsrs	r3, r1, #11
 8006958:	3a15      	subs	r2, #21
 800695a:	0549      	lsls	r1, r1, #21
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0fa      	beq.n	8006956 <__ieee754_sqrt+0x5e>
 8006960:	e7f7      	b.n	8006952 <__ieee754_sqrt+0x5a>
 8006962:	462a      	mov	r2, r5
 8006964:	e7fa      	b.n	800695c <__ieee754_sqrt+0x64>
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	3001      	adds	r0, #1
 800696a:	02dc      	lsls	r4, r3, #11
 800696c:	d5fb      	bpl.n	8006966 <__ieee754_sqrt+0x6e>
 800696e:	1e44      	subs	r4, r0, #1
 8006970:	1b12      	subs	r2, r2, r4
 8006972:	f1c0 0420 	rsb	r4, r0, #32
 8006976:	fa21 f404 	lsr.w	r4, r1, r4
 800697a:	4323      	orrs	r3, r4
 800697c:	4081      	lsls	r1, r0
 800697e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006982:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800698a:	07d2      	lsls	r2, r2, #31
 800698c:	bf5c      	itt	pl
 800698e:	005b      	lslpl	r3, r3, #1
 8006990:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006998:	bf58      	it	pl
 800699a:	0049      	lslpl	r1, r1, #1
 800699c:	2600      	movs	r6, #0
 800699e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80069a2:	106d      	asrs	r5, r5, #1
 80069a4:	0049      	lsls	r1, r1, #1
 80069a6:	2016      	movs	r0, #22
 80069a8:	4632      	mov	r2, r6
 80069aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80069ae:	1917      	adds	r7, r2, r4
 80069b0:	429f      	cmp	r7, r3
 80069b2:	bfde      	ittt	le
 80069b4:	193a      	addle	r2, r7, r4
 80069b6:	1bdb      	suble	r3, r3, r7
 80069b8:	1936      	addle	r6, r6, r4
 80069ba:	0fcf      	lsrs	r7, r1, #31
 80069bc:	3801      	subs	r0, #1
 80069be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80069c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80069ca:	d1f0      	bne.n	80069ae <__ieee754_sqrt+0xb6>
 80069cc:	4604      	mov	r4, r0
 80069ce:	2720      	movs	r7, #32
 80069d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80069d4:	429a      	cmp	r2, r3
 80069d6:	eb00 0e0c 	add.w	lr, r0, ip
 80069da:	db02      	blt.n	80069e2 <__ieee754_sqrt+0xea>
 80069dc:	d113      	bne.n	8006a06 <__ieee754_sqrt+0x10e>
 80069de:	458e      	cmp	lr, r1
 80069e0:	d811      	bhi.n	8006a06 <__ieee754_sqrt+0x10e>
 80069e2:	f1be 0f00 	cmp.w	lr, #0
 80069e6:	eb0e 000c 	add.w	r0, lr, ip
 80069ea:	da42      	bge.n	8006a72 <__ieee754_sqrt+0x17a>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	db40      	blt.n	8006a72 <__ieee754_sqrt+0x17a>
 80069f0:	f102 0801 	add.w	r8, r2, #1
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	458e      	cmp	lr, r1
 80069f8:	bf88      	it	hi
 80069fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069fe:	eba1 010e 	sub.w	r1, r1, lr
 8006a02:	4464      	add	r4, ip
 8006a04:	4642      	mov	r2, r8
 8006a06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006a0a:	3f01      	subs	r7, #1
 8006a0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006a10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006a14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006a18:	d1dc      	bne.n	80069d4 <__ieee754_sqrt+0xdc>
 8006a1a:	4319      	orrs	r1, r3
 8006a1c:	d01b      	beq.n	8006a56 <__ieee754_sqrt+0x15e>
 8006a1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006aa4 <__ieee754_sqrt+0x1ac>
 8006a22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006aa8 <__ieee754_sqrt+0x1b0>
 8006a26:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a2e:	f7f9 fc4b 	bl	80002c8 <__aeabi_dsub>
 8006a32:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7fa f877 	bl	8000b30 <__aeabi_dcmple>
 8006a42:	b140      	cbz	r0, 8006a56 <__ieee754_sqrt+0x15e>
 8006a44:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a48:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a50:	d111      	bne.n	8006a76 <__ieee754_sqrt+0x17e>
 8006a52:	3601      	adds	r6, #1
 8006a54:	463c      	mov	r4, r7
 8006a56:	1072      	asrs	r2, r6, #1
 8006a58:	0863      	lsrs	r3, r4, #1
 8006a5a:	07f1      	lsls	r1, r6, #31
 8006a5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006a60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006a64:	bf48      	it	mi
 8006a66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006a6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006a6e:	4618      	mov	r0, r3
 8006a70:	e756      	b.n	8006920 <__ieee754_sqrt+0x28>
 8006a72:	4690      	mov	r8, r2
 8006a74:	e7be      	b.n	80069f4 <__ieee754_sqrt+0xfc>
 8006a76:	f7f9 fc29 	bl	80002cc <__adddf3>
 8006a7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4640      	mov	r0, r8
 8006a84:	4649      	mov	r1, r9
 8006a86:	f7fa f849 	bl	8000b1c <__aeabi_dcmplt>
 8006a8a:	b120      	cbz	r0, 8006a96 <__ieee754_sqrt+0x19e>
 8006a8c:	1ca0      	adds	r0, r4, #2
 8006a8e:	bf08      	it	eq
 8006a90:	3601      	addeq	r6, #1
 8006a92:	3402      	adds	r4, #2
 8006a94:	e7df      	b.n	8006a56 <__ieee754_sqrt+0x15e>
 8006a96:	1c63      	adds	r3, r4, #1
 8006a98:	f023 0401 	bic.w	r4, r3, #1
 8006a9c:	e7db      	b.n	8006a56 <__ieee754_sqrt+0x15e>
 8006a9e:	bf00      	nop
 8006aa0:	7ff00000 	.word	0x7ff00000
 8006aa4:	20000080 	.word	0x20000080
 8006aa8:	20000078 	.word	0x20000078
 8006aac:	00000000 	.word	0x00000000

08006ab0 <__ieee754_atan2>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	ec57 6b11 	vmov	r6, r7, d1
 8006ab8:	4273      	negs	r3, r6
 8006aba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8006c38 <__ieee754_atan2+0x188>
 8006abe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8006ac2:	4333      	orrs	r3, r6
 8006ac4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006ac8:	4543      	cmp	r3, r8
 8006aca:	ec51 0b10 	vmov	r0, r1, d0
 8006ace:	4635      	mov	r5, r6
 8006ad0:	d809      	bhi.n	8006ae6 <__ieee754_atan2+0x36>
 8006ad2:	4244      	negs	r4, r0
 8006ad4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006ad8:	4304      	orrs	r4, r0
 8006ada:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006ade:	4544      	cmp	r4, r8
 8006ae0:	468e      	mov	lr, r1
 8006ae2:	4681      	mov	r9, r0
 8006ae4:	d907      	bls.n	8006af6 <__ieee754_atan2+0x46>
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	463b      	mov	r3, r7
 8006aea:	f7f9 fbef 	bl	80002cc <__adddf3>
 8006aee:	ec41 0b10 	vmov	d0, r0, r1
 8006af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8006afa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8006afe:	4334      	orrs	r4, r6
 8006b00:	d103      	bne.n	8006b0a <__ieee754_atan2+0x5a>
 8006b02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b06:	f000 bddf 	b.w	80076c8 <atan>
 8006b0a:	17bc      	asrs	r4, r7, #30
 8006b0c:	f004 0402 	and.w	r4, r4, #2
 8006b10:	ea53 0909 	orrs.w	r9, r3, r9
 8006b14:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006b18:	d107      	bne.n	8006b2a <__ieee754_atan2+0x7a>
 8006b1a:	2c02      	cmp	r4, #2
 8006b1c:	d05f      	beq.n	8006bde <__ieee754_atan2+0x12e>
 8006b1e:	2c03      	cmp	r4, #3
 8006b20:	d1e5      	bne.n	8006aee <__ieee754_atan2+0x3e>
 8006b22:	a141      	add	r1, pc, #260	@ (adr r1, 8006c28 <__ieee754_atan2+0x178>)
 8006b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b28:	e7e1      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006b2a:	4315      	orrs	r5, r2
 8006b2c:	d106      	bne.n	8006b3c <__ieee754_atan2+0x8c>
 8006b2e:	f1be 0f00 	cmp.w	lr, #0
 8006b32:	da5f      	bge.n	8006bf4 <__ieee754_atan2+0x144>
 8006b34:	a13e      	add	r1, pc, #248	@ (adr r1, 8006c30 <__ieee754_atan2+0x180>)
 8006b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b3a:	e7d8      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006b3c:	4542      	cmp	r2, r8
 8006b3e:	d10f      	bne.n	8006b60 <__ieee754_atan2+0xb0>
 8006b40:	4293      	cmp	r3, r2
 8006b42:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b46:	d107      	bne.n	8006b58 <__ieee754_atan2+0xa8>
 8006b48:	2c02      	cmp	r4, #2
 8006b4a:	d84c      	bhi.n	8006be6 <__ieee754_atan2+0x136>
 8006b4c:	4b34      	ldr	r3, [pc, #208]	@ (8006c20 <__ieee754_atan2+0x170>)
 8006b4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b56:	e7ca      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006b58:	2c02      	cmp	r4, #2
 8006b5a:	d848      	bhi.n	8006bee <__ieee754_atan2+0x13e>
 8006b5c:	4b31      	ldr	r3, [pc, #196]	@ (8006c24 <__ieee754_atan2+0x174>)
 8006b5e:	e7f6      	b.n	8006b4e <__ieee754_atan2+0x9e>
 8006b60:	4543      	cmp	r3, r8
 8006b62:	d0e4      	beq.n	8006b2e <__ieee754_atan2+0x7e>
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006b6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b6e:	da1e      	bge.n	8006bae <__ieee754_atan2+0xfe>
 8006b70:	2f00      	cmp	r7, #0
 8006b72:	da01      	bge.n	8006b78 <__ieee754_atan2+0xc8>
 8006b74:	323c      	adds	r2, #60	@ 0x3c
 8006b76:	db1e      	blt.n	8006bb6 <__ieee754_atan2+0x106>
 8006b78:	4632      	mov	r2, r6
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	f7f9 fe86 	bl	800088c <__aeabi_ddiv>
 8006b80:	ec41 0b10 	vmov	d0, r0, r1
 8006b84:	f000 ff38 	bl	80079f8 <fabs>
 8006b88:	f000 fd9e 	bl	80076c8 <atan>
 8006b8c:	ec51 0b10 	vmov	r0, r1, d0
 8006b90:	2c01      	cmp	r4, #1
 8006b92:	d013      	beq.n	8006bbc <__ieee754_atan2+0x10c>
 8006b94:	2c02      	cmp	r4, #2
 8006b96:	d015      	beq.n	8006bc4 <__ieee754_atan2+0x114>
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	d0a8      	beq.n	8006aee <__ieee754_atan2+0x3e>
 8006b9c:	a318      	add	r3, pc, #96	@ (adr r3, 8006c00 <__ieee754_atan2+0x150>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb91 	bl	80002c8 <__aeabi_dsub>
 8006ba6:	a318      	add	r3, pc, #96	@ (adr r3, 8006c08 <__ieee754_atan2+0x158>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	e014      	b.n	8006bd8 <__ieee754_atan2+0x128>
 8006bae:	a118      	add	r1, pc, #96	@ (adr r1, 8006c10 <__ieee754_atan2+0x160>)
 8006bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb4:	e7ec      	b.n	8006b90 <__ieee754_atan2+0xe0>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	e7e9      	b.n	8006b90 <__ieee754_atan2+0xe0>
 8006bbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	e794      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006bc4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c00 <__ieee754_atan2+0x150>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7f9 fb7d 	bl	80002c8 <__aeabi_dsub>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	a10d      	add	r1, pc, #52	@ (adr r1, 8006c08 <__ieee754_atan2+0x158>)
 8006bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd8:	f7f9 fb76 	bl	80002c8 <__aeabi_dsub>
 8006bdc:	e787      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006bde:	a10a      	add	r1, pc, #40	@ (adr r1, 8006c08 <__ieee754_atan2+0x158>)
 8006be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be4:	e783      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006be6:	a10c      	add	r1, pc, #48	@ (adr r1, 8006c18 <__ieee754_atan2+0x168>)
 8006be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bec:	e77f      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	e77c      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006bf4:	a106      	add	r1, pc, #24	@ (adr r1, 8006c10 <__ieee754_atan2+0x160>)
 8006bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bfa:	e778      	b.n	8006aee <__ieee754_atan2+0x3e>
 8006bfc:	f3af 8000 	nop.w
 8006c00:	33145c07 	.word	0x33145c07
 8006c04:	3ca1a626 	.word	0x3ca1a626
 8006c08:	54442d18 	.word	0x54442d18
 8006c0c:	400921fb 	.word	0x400921fb
 8006c10:	54442d18 	.word	0x54442d18
 8006c14:	3ff921fb 	.word	0x3ff921fb
 8006c18:	54442d18 	.word	0x54442d18
 8006c1c:	3fe921fb 	.word	0x3fe921fb
 8006c20:	08007e60 	.word	0x08007e60
 8006c24:	08007e48 	.word	0x08007e48
 8006c28:	54442d18 	.word	0x54442d18
 8006c2c:	c00921fb 	.word	0xc00921fb
 8006c30:	54442d18 	.word	0x54442d18
 8006c34:	bff921fb 	.word	0xbff921fb
 8006c38:	7ff00000 	.word	0x7ff00000
 8006c3c:	00000000 	.word	0x00000000

08006c40 <__ieee754_pow>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	b091      	sub	sp, #68	@ 0x44
 8006c46:	ed8d 1b00 	vstr	d1, [sp]
 8006c4a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006c4e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006c52:	ea5a 0001 	orrs.w	r0, sl, r1
 8006c56:	ec57 6b10 	vmov	r6, r7, d0
 8006c5a:	d113      	bne.n	8006c84 <__ieee754_pow+0x44>
 8006c5c:	19b3      	adds	r3, r6, r6
 8006c5e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006c62:	4152      	adcs	r2, r2
 8006c64:	4298      	cmp	r0, r3
 8006c66:	4b98      	ldr	r3, [pc, #608]	@ (8006ec8 <__ieee754_pow+0x288>)
 8006c68:	4193      	sbcs	r3, r2
 8006c6a:	f080 84ea 	bcs.w	8007642 <__ieee754_pow+0xa02>
 8006c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c72:	4630      	mov	r0, r6
 8006c74:	4639      	mov	r1, r7
 8006c76:	f7f9 fb29 	bl	80002cc <__adddf3>
 8006c7a:	ec41 0b10 	vmov	d0, r0, r1
 8006c7e:	b011      	add	sp, #68	@ 0x44
 8006c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c84:	4a91      	ldr	r2, [pc, #580]	@ (8006ecc <__ieee754_pow+0x28c>)
 8006c86:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006c8a:	4590      	cmp	r8, r2
 8006c8c:	463d      	mov	r5, r7
 8006c8e:	4633      	mov	r3, r6
 8006c90:	d806      	bhi.n	8006ca0 <__ieee754_pow+0x60>
 8006c92:	d101      	bne.n	8006c98 <__ieee754_pow+0x58>
 8006c94:	2e00      	cmp	r6, #0
 8006c96:	d1ea      	bne.n	8006c6e <__ieee754_pow+0x2e>
 8006c98:	4592      	cmp	sl, r2
 8006c9a:	d801      	bhi.n	8006ca0 <__ieee754_pow+0x60>
 8006c9c:	d10e      	bne.n	8006cbc <__ieee754_pow+0x7c>
 8006c9e:	b169      	cbz	r1, 8006cbc <__ieee754_pow+0x7c>
 8006ca0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006ca4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006ca8:	431d      	orrs	r5, r3
 8006caa:	d1e0      	bne.n	8006c6e <__ieee754_pow+0x2e>
 8006cac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006cb0:	18db      	adds	r3, r3, r3
 8006cb2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006cb6:	4152      	adcs	r2, r2
 8006cb8:	429d      	cmp	r5, r3
 8006cba:	e7d4      	b.n	8006c66 <__ieee754_pow+0x26>
 8006cbc:	2d00      	cmp	r5, #0
 8006cbe:	46c3      	mov	fp, r8
 8006cc0:	da3a      	bge.n	8006d38 <__ieee754_pow+0xf8>
 8006cc2:	4a83      	ldr	r2, [pc, #524]	@ (8006ed0 <__ieee754_pow+0x290>)
 8006cc4:	4592      	cmp	sl, r2
 8006cc6:	d84d      	bhi.n	8006d64 <__ieee754_pow+0x124>
 8006cc8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006ccc:	4592      	cmp	sl, r2
 8006cce:	f240 84c7 	bls.w	8007660 <__ieee754_pow+0xa20>
 8006cd2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006cd6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006cda:	2a14      	cmp	r2, #20
 8006cdc:	dd0f      	ble.n	8006cfe <__ieee754_pow+0xbe>
 8006cde:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006ce2:	fa21 f402 	lsr.w	r4, r1, r2
 8006ce6:	fa04 f202 	lsl.w	r2, r4, r2
 8006cea:	428a      	cmp	r2, r1
 8006cec:	f040 84b8 	bne.w	8007660 <__ieee754_pow+0xa20>
 8006cf0:	f004 0401 	and.w	r4, r4, #1
 8006cf4:	f1c4 0402 	rsb	r4, r4, #2
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	d158      	bne.n	8006dae <__ieee754_pow+0x16e>
 8006cfc:	e00e      	b.n	8006d1c <__ieee754_pow+0xdc>
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	d154      	bne.n	8006dac <__ieee754_pow+0x16c>
 8006d02:	f1c2 0214 	rsb	r2, r2, #20
 8006d06:	fa4a f402 	asr.w	r4, sl, r2
 8006d0a:	fa04 f202 	lsl.w	r2, r4, r2
 8006d0e:	4552      	cmp	r2, sl
 8006d10:	f040 84a3 	bne.w	800765a <__ieee754_pow+0xa1a>
 8006d14:	f004 0401 	and.w	r4, r4, #1
 8006d18:	f1c4 0402 	rsb	r4, r4, #2
 8006d1c:	4a6d      	ldr	r2, [pc, #436]	@ (8006ed4 <__ieee754_pow+0x294>)
 8006d1e:	4592      	cmp	sl, r2
 8006d20:	d12e      	bne.n	8006d80 <__ieee754_pow+0x140>
 8006d22:	f1b9 0f00 	cmp.w	r9, #0
 8006d26:	f280 8494 	bge.w	8007652 <__ieee754_pow+0xa12>
 8006d2a:	496a      	ldr	r1, [pc, #424]	@ (8006ed4 <__ieee754_pow+0x294>)
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	463b      	mov	r3, r7
 8006d30:	2000      	movs	r0, #0
 8006d32:	f7f9 fdab 	bl	800088c <__aeabi_ddiv>
 8006d36:	e7a0      	b.n	8006c7a <__ieee754_pow+0x3a>
 8006d38:	2400      	movs	r4, #0
 8006d3a:	bbc1      	cbnz	r1, 8006dae <__ieee754_pow+0x16e>
 8006d3c:	4a63      	ldr	r2, [pc, #396]	@ (8006ecc <__ieee754_pow+0x28c>)
 8006d3e:	4592      	cmp	sl, r2
 8006d40:	d1ec      	bne.n	8006d1c <__ieee754_pow+0xdc>
 8006d42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8006d46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	f000 8479 	beq.w	8007642 <__ieee754_pow+0xa02>
 8006d50:	4b61      	ldr	r3, [pc, #388]	@ (8006ed8 <__ieee754_pow+0x298>)
 8006d52:	4598      	cmp	r8, r3
 8006d54:	d908      	bls.n	8006d68 <__ieee754_pow+0x128>
 8006d56:	f1b9 0f00 	cmp.w	r9, #0
 8006d5a:	f2c0 8476 	blt.w	800764a <__ieee754_pow+0xa0a>
 8006d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d62:	e78a      	b.n	8006c7a <__ieee754_pow+0x3a>
 8006d64:	2402      	movs	r4, #2
 8006d66:	e7e8      	b.n	8006d3a <__ieee754_pow+0xfa>
 8006d68:	f1b9 0f00 	cmp.w	r9, #0
 8006d6c:	f04f 0000 	mov.w	r0, #0
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	da81      	bge.n	8006c7a <__ieee754_pow+0x3a>
 8006d76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006d7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006d7e:	e77c      	b.n	8006c7a <__ieee754_pow+0x3a>
 8006d80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006d84:	d106      	bne.n	8006d94 <__ieee754_pow+0x154>
 8006d86:	4632      	mov	r2, r6
 8006d88:	463b      	mov	r3, r7
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fc53 	bl	8000638 <__aeabi_dmul>
 8006d92:	e772      	b.n	8006c7a <__ieee754_pow+0x3a>
 8006d94:	4a51      	ldr	r2, [pc, #324]	@ (8006edc <__ieee754_pow+0x29c>)
 8006d96:	4591      	cmp	r9, r2
 8006d98:	d109      	bne.n	8006dae <__ieee754_pow+0x16e>
 8006d9a:	2d00      	cmp	r5, #0
 8006d9c:	db07      	blt.n	8006dae <__ieee754_pow+0x16e>
 8006d9e:	ec47 6b10 	vmov	d0, r6, r7
 8006da2:	b011      	add	sp, #68	@ 0x44
 8006da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	f7ff bda6 	b.w	80068f8 <__ieee754_sqrt>
 8006dac:	2400      	movs	r4, #0
 8006dae:	ec47 6b10 	vmov	d0, r6, r7
 8006db2:	9302      	str	r3, [sp, #8]
 8006db4:	f000 fe20 	bl	80079f8 <fabs>
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	ec51 0b10 	vmov	r0, r1, d0
 8006dbe:	bb53      	cbnz	r3, 8006e16 <__ieee754_pow+0x1d6>
 8006dc0:	4b44      	ldr	r3, [pc, #272]	@ (8006ed4 <__ieee754_pow+0x294>)
 8006dc2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d002      	beq.n	8006dd0 <__ieee754_pow+0x190>
 8006dca:	f1b8 0f00 	cmp.w	r8, #0
 8006dce:	d122      	bne.n	8006e16 <__ieee754_pow+0x1d6>
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	da05      	bge.n	8006de2 <__ieee754_pow+0x1a2>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	2000      	movs	r0, #0
 8006ddc:	493d      	ldr	r1, [pc, #244]	@ (8006ed4 <__ieee754_pow+0x294>)
 8006dde:	f7f9 fd55 	bl	800088c <__aeabi_ddiv>
 8006de2:	2d00      	cmp	r5, #0
 8006de4:	f6bf af49 	bge.w	8006c7a <__ieee754_pow+0x3a>
 8006de8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006dec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006df0:	ea58 0804 	orrs.w	r8, r8, r4
 8006df4:	d108      	bne.n	8006e08 <__ieee754_pow+0x1c8>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f7f9 fa63 	bl	80002c8 <__aeabi_dsub>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	e794      	b.n	8006d32 <__ieee754_pow+0xf2>
 8006e08:	2c01      	cmp	r4, #1
 8006e0a:	f47f af36 	bne.w	8006c7a <__ieee754_pow+0x3a>
 8006e0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e12:	4619      	mov	r1, r3
 8006e14:	e731      	b.n	8006c7a <__ieee754_pow+0x3a>
 8006e16:	0feb      	lsrs	r3, r5, #31
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	ea53 0204 	orrs.w	r2, r3, r4
 8006e1e:	d102      	bne.n	8006e26 <__ieee754_pow+0x1e6>
 8006e20:	4632      	mov	r2, r6
 8006e22:	463b      	mov	r3, r7
 8006e24:	e7e9      	b.n	8006dfa <__ieee754_pow+0x1ba>
 8006e26:	3c01      	subs	r4, #1
 8006e28:	431c      	orrs	r4, r3
 8006e2a:	d016      	beq.n	8006e5a <__ieee754_pow+0x21a>
 8006e2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006eb8 <__ieee754_pow+0x278>
 8006e30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8006e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e38:	f240 8112 	bls.w	8007060 <__ieee754_pow+0x420>
 8006e3c:	4b28      	ldr	r3, [pc, #160]	@ (8006ee0 <__ieee754_pow+0x2a0>)
 8006e3e:	459a      	cmp	sl, r3
 8006e40:	4b25      	ldr	r3, [pc, #148]	@ (8006ed8 <__ieee754_pow+0x298>)
 8006e42:	d916      	bls.n	8006e72 <__ieee754_pow+0x232>
 8006e44:	4598      	cmp	r8, r3
 8006e46:	d80b      	bhi.n	8006e60 <__ieee754_pow+0x220>
 8006e48:	f1b9 0f00 	cmp.w	r9, #0
 8006e4c:	da0b      	bge.n	8006e66 <__ieee754_pow+0x226>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	b011      	add	sp, #68	@ 0x44
 8006e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e56:	f000 be8b 	b.w	8007b70 <__math_oflow>
 8006e5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8006ec0 <__ieee754_pow+0x280>
 8006e5e:	e7e7      	b.n	8006e30 <__ieee754_pow+0x1f0>
 8006e60:	f1b9 0f00 	cmp.w	r9, #0
 8006e64:	dcf3      	bgt.n	8006e4e <__ieee754_pow+0x20e>
 8006e66:	2000      	movs	r0, #0
 8006e68:	b011      	add	sp, #68	@ 0x44
 8006e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6e:	f000 be77 	b.w	8007b60 <__math_uflow>
 8006e72:	4598      	cmp	r8, r3
 8006e74:	d20c      	bcs.n	8006e90 <__ieee754_pow+0x250>
 8006e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f7f9 fe4d 	bl	8000b1c <__aeabi_dcmplt>
 8006e82:	3800      	subs	r0, #0
 8006e84:	bf18      	it	ne
 8006e86:	2001      	movne	r0, #1
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	daec      	bge.n	8006e68 <__ieee754_pow+0x228>
 8006e8e:	e7df      	b.n	8006e50 <__ieee754_pow+0x210>
 8006e90:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <__ieee754_pow+0x294>)
 8006e92:	4598      	cmp	r8, r3
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	d924      	bls.n	8006ee4 <__ieee754_pow+0x2a4>
 8006e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f7f9 fe3c 	bl	8000b1c <__aeabi_dcmplt>
 8006ea4:	3800      	subs	r0, #0
 8006ea6:	bf18      	it	ne
 8006ea8:	2001      	movne	r0, #1
 8006eaa:	f1b9 0f00 	cmp.w	r9, #0
 8006eae:	dccf      	bgt.n	8006e50 <__ieee754_pow+0x210>
 8006eb0:	e7da      	b.n	8006e68 <__ieee754_pow+0x228>
 8006eb2:	bf00      	nop
 8006eb4:	f3af 8000 	nop.w
 8006eb8:	00000000 	.word	0x00000000
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	bff00000 	.word	0xbff00000
 8006ec8:	fff00000 	.word	0xfff00000
 8006ecc:	7ff00000 	.word	0x7ff00000
 8006ed0:	433fffff 	.word	0x433fffff
 8006ed4:	3ff00000 	.word	0x3ff00000
 8006ed8:	3fefffff 	.word	0x3fefffff
 8006edc:	3fe00000 	.word	0x3fe00000
 8006ee0:	43f00000 	.word	0x43f00000
 8006ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8007050 <__ieee754_pow+0x410>)
 8006ee6:	f7f9 f9ef 	bl	80002c8 <__aeabi_dsub>
 8006eea:	a351      	add	r3, pc, #324	@ (adr r3, 8007030 <__ieee754_pow+0x3f0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	f7f9 fba0 	bl	8000638 <__aeabi_dmul>
 8006ef8:	a34f      	add	r3, pc, #316	@ (adr r3, 8007038 <__ieee754_pow+0x3f8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f7f9 fb97 	bl	8000638 <__aeabi_dmul>
 8006f0a:	4b52      	ldr	r3, [pc, #328]	@ (8007054 <__ieee754_pow+0x414>)
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	468b      	mov	fp, r1
 8006f10:	2200      	movs	r2, #0
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 fb8f 	bl	8000638 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	a148      	add	r1, pc, #288	@ (adr r1, 8007040 <__ieee754_pow+0x400>)
 8006f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f24:	f7f9 f9d0 	bl	80002c8 <__aeabi_dsub>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	f7f9 fb84 	bl	8000638 <__aeabi_dmul>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	2000      	movs	r0, #0
 8006f36:	4948      	ldr	r1, [pc, #288]	@ (8007058 <__ieee754_pow+0x418>)
 8006f38:	f7f9 f9c6 	bl	80002c8 <__aeabi_dsub>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4689      	mov	r9, r1
 8006f42:	462b      	mov	r3, r5
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fb76 	bl	8000638 <__aeabi_dmul>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fb70 	bl	8000638 <__aeabi_dmul>
 8006f58:	a33b      	add	r3, pc, #236	@ (adr r3, 8007048 <__ieee754_pow+0x408>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fb6b 	bl	8000638 <__aeabi_dmul>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4650      	mov	r0, sl
 8006f68:	4659      	mov	r1, fp
 8006f6a:	f7f9 f9ad 	bl	80002c8 <__aeabi_dsub>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f7f9 f9a7 	bl	80002cc <__adddf3>
 8006f7e:	2400      	movs	r4, #0
 8006f80:	4632      	mov	r2, r6
 8006f82:	463b      	mov	r3, r7
 8006f84:	4620      	mov	r0, r4
 8006f86:	460d      	mov	r5, r1
 8006f88:	f7f9 f99e 	bl	80002c8 <__aeabi_dsub>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 f998 	bl	80002c8 <__aeabi_dsub>
 8006f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	4652      	mov	r2, sl
 8006fae:	465b      	mov	r3, fp
 8006fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb4:	f7f9 f988 	bl	80002c8 <__aeabi_dsub>
 8006fb8:	4622      	mov	r2, r4
 8006fba:	462b      	mov	r3, r5
 8006fbc:	f7f9 fb3c 	bl	8000638 <__aeabi_dmul>
 8006fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 fb34 	bl	8000638 <__aeabi_dmul>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 f978 	bl	80002cc <__adddf3>
 8006fdc:	4652      	mov	r2, sl
 8006fde:	465b      	mov	r3, fp
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	f7f9 fb26 	bl	8000638 <__aeabi_dmul>
 8006fec:	460b      	mov	r3, r1
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	4689      	mov	r9, r1
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	f7f9 f968 	bl	80002cc <__adddf3>
 8006ffc:	4b17      	ldr	r3, [pc, #92]	@ (800705c <__ieee754_pow+0x41c>)
 8006ffe:	4299      	cmp	r1, r3
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	468a      	mov	sl, r1
 8007006:	468b      	mov	fp, r1
 8007008:	f340 82ef 	ble.w	80075ea <__ieee754_pow+0x9aa>
 800700c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007010:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007014:	4303      	orrs	r3, r0
 8007016:	f000 81e8 	beq.w	80073ea <__ieee754_pow+0x7aa>
 800701a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800701e:	2200      	movs	r2, #0
 8007020:	2300      	movs	r3, #0
 8007022:	f7f9 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 8007026:	3800      	subs	r0, #0
 8007028:	bf18      	it	ne
 800702a:	2001      	movne	r0, #1
 800702c:	e710      	b.n	8006e50 <__ieee754_pow+0x210>
 800702e:	bf00      	nop
 8007030:	60000000 	.word	0x60000000
 8007034:	3ff71547 	.word	0x3ff71547
 8007038:	f85ddf44 	.word	0xf85ddf44
 800703c:	3e54ae0b 	.word	0x3e54ae0b
 8007040:	55555555 	.word	0x55555555
 8007044:	3fd55555 	.word	0x3fd55555
 8007048:	652b82fe 	.word	0x652b82fe
 800704c:	3ff71547 	.word	0x3ff71547
 8007050:	3ff00000 	.word	0x3ff00000
 8007054:	3fd00000 	.word	0x3fd00000
 8007058:	3fe00000 	.word	0x3fe00000
 800705c:	408fffff 	.word	0x408fffff
 8007060:	4bd5      	ldr	r3, [pc, #852]	@ (80073b8 <__ieee754_pow+0x778>)
 8007062:	402b      	ands	r3, r5
 8007064:	2200      	movs	r2, #0
 8007066:	b92b      	cbnz	r3, 8007074 <__ieee754_pow+0x434>
 8007068:	4bd4      	ldr	r3, [pc, #848]	@ (80073bc <__ieee754_pow+0x77c>)
 800706a:	f7f9 fae5 	bl	8000638 <__aeabi_dmul>
 800706e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007072:	468b      	mov	fp, r1
 8007074:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007078:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800707c:	4413      	add	r3, r2
 800707e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007080:	4bcf      	ldr	r3, [pc, #828]	@ (80073c0 <__ieee754_pow+0x780>)
 8007082:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007086:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800708a:	459b      	cmp	fp, r3
 800708c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007090:	dd08      	ble.n	80070a4 <__ieee754_pow+0x464>
 8007092:	4bcc      	ldr	r3, [pc, #816]	@ (80073c4 <__ieee754_pow+0x784>)
 8007094:	459b      	cmp	fp, r3
 8007096:	f340 81a5 	ble.w	80073e4 <__ieee754_pow+0x7a4>
 800709a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800709c:	3301      	adds	r3, #1
 800709e:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80070a4:	f04f 0a00 	mov.w	sl, #0
 80070a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80070ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ae:	4bc6      	ldr	r3, [pc, #792]	@ (80073c8 <__ieee754_pow+0x788>)
 80070b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070b4:	ed93 7b00 	vldr	d7, [r3]
 80070b8:	4629      	mov	r1, r5
 80070ba:	ec53 2b17 	vmov	r2, r3, d7
 80070be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070c6:	f7f9 f8ff 	bl	80002c8 <__aeabi_dsub>
 80070ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80070ce:	4606      	mov	r6, r0
 80070d0:	460f      	mov	r7, r1
 80070d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070d6:	f7f9 f8f9 	bl	80002cc <__adddf3>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	2000      	movs	r0, #0
 80070e0:	49ba      	ldr	r1, [pc, #744]	@ (80073cc <__ieee754_pow+0x78c>)
 80070e2:	f7f9 fbd3 	bl	800088c <__aeabi_ddiv>
 80070e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 faa1 	bl	8000638 <__aeabi_dmul>
 80070f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070fa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80070fe:	106d      	asrs	r5, r5, #1
 8007100:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007104:	f04f 0b00 	mov.w	fp, #0
 8007108:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800710c:	4661      	mov	r1, ip
 800710e:	2200      	movs	r2, #0
 8007110:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007114:	4658      	mov	r0, fp
 8007116:	46e1      	mov	r9, ip
 8007118:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	f7f9 fa8a 	bl	8000638 <__aeabi_dmul>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 f8cc 	bl	80002c8 <__aeabi_dsub>
 8007130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	4620      	mov	r0, r4
 800713a:	4629      	mov	r1, r5
 800713c:	f7f9 f8c4 	bl	80002c8 <__aeabi_dsub>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007148:	f7f9 f8be 	bl	80002c8 <__aeabi_dsub>
 800714c:	465a      	mov	r2, fp
 800714e:	464b      	mov	r3, r9
 8007150:	f7f9 fa72 	bl	8000638 <__aeabi_dmul>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 f8b4 	bl	80002c8 <__aeabi_dsub>
 8007160:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007164:	f7f9 fa68 	bl	8000638 <__aeabi_dmul>
 8007168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800716c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	f7f9 fa60 	bl	8000638 <__aeabi_dmul>
 8007178:	a37d      	add	r3, pc, #500	@ (adr r3, 8007370 <__ieee754_pow+0x730>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	f7f9 fa59 	bl	8000638 <__aeabi_dmul>
 8007186:	a37c      	add	r3, pc, #496	@ (adr r3, 8007378 <__ieee754_pow+0x738>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f9 f89e 	bl	80002cc <__adddf3>
 8007190:	4622      	mov	r2, r4
 8007192:	462b      	mov	r3, r5
 8007194:	f7f9 fa50 	bl	8000638 <__aeabi_dmul>
 8007198:	a379      	add	r3, pc, #484	@ (adr r3, 8007380 <__ieee754_pow+0x740>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 f895 	bl	80002cc <__adddf3>
 80071a2:	4622      	mov	r2, r4
 80071a4:	462b      	mov	r3, r5
 80071a6:	f7f9 fa47 	bl	8000638 <__aeabi_dmul>
 80071aa:	a377      	add	r3, pc, #476	@ (adr r3, 8007388 <__ieee754_pow+0x748>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 f88c 	bl	80002cc <__adddf3>
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	f7f9 fa3e 	bl	8000638 <__aeabi_dmul>
 80071bc:	a374      	add	r3, pc, #464	@ (adr r3, 8007390 <__ieee754_pow+0x750>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 f883 	bl	80002cc <__adddf3>
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	f7f9 fa35 	bl	8000638 <__aeabi_dmul>
 80071ce:	a372      	add	r3, pc, #456	@ (adr r3, 8007398 <__ieee754_pow+0x758>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f7f9 f87a 	bl	80002cc <__adddf3>
 80071d8:	4622      	mov	r2, r4
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	462b      	mov	r3, r5
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 fa28 	bl	8000638 <__aeabi_dmul>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 fa22 	bl	8000638 <__aeabi_dmul>
 80071f4:	465a      	mov	r2, fp
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	464b      	mov	r3, r9
 80071fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007200:	f7f9 f864 	bl	80002cc <__adddf3>
 8007204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007208:	f7f9 fa16 	bl	8000638 <__aeabi_dmul>
 800720c:	4622      	mov	r2, r4
 800720e:	462b      	mov	r3, r5
 8007210:	f7f9 f85c 	bl	80002cc <__adddf3>
 8007214:	465a      	mov	r2, fp
 8007216:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800721a:	464b      	mov	r3, r9
 800721c:	4658      	mov	r0, fp
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 fa0a 	bl	8000638 <__aeabi_dmul>
 8007224:	4b6a      	ldr	r3, [pc, #424]	@ (80073d0 <__ieee754_pow+0x790>)
 8007226:	2200      	movs	r2, #0
 8007228:	4606      	mov	r6, r0
 800722a:	460f      	mov	r7, r1
 800722c:	f7f9 f84e 	bl	80002cc <__adddf3>
 8007230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007234:	f7f9 f84a 	bl	80002cc <__adddf3>
 8007238:	46d8      	mov	r8, fp
 800723a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800723e:	460d      	mov	r5, r1
 8007240:	465a      	mov	r2, fp
 8007242:	460b      	mov	r3, r1
 8007244:	4640      	mov	r0, r8
 8007246:	4649      	mov	r1, r9
 8007248:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800724c:	f7f9 f9f4 	bl	8000638 <__aeabi_dmul>
 8007250:	465c      	mov	r4, fp
 8007252:	4680      	mov	r8, r0
 8007254:	4689      	mov	r9, r1
 8007256:	4b5e      	ldr	r3, [pc, #376]	@ (80073d0 <__ieee754_pow+0x790>)
 8007258:	2200      	movs	r2, #0
 800725a:	4620      	mov	r0, r4
 800725c:	4629      	mov	r1, r5
 800725e:	f7f9 f833 	bl	80002c8 <__aeabi_dsub>
 8007262:	4632      	mov	r2, r6
 8007264:	463b      	mov	r3, r7
 8007266:	f7f9 f82f 	bl	80002c8 <__aeabi_dsub>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007272:	f7f9 f829 	bl	80002c8 <__aeabi_dsub>
 8007276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800727a:	f7f9 f9dd 	bl	8000638 <__aeabi_dmul>
 800727e:	4622      	mov	r2, r4
 8007280:	4606      	mov	r6, r0
 8007282:	460f      	mov	r7, r1
 8007284:	462b      	mov	r3, r5
 8007286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800728a:	f7f9 f9d5 	bl	8000638 <__aeabi_dmul>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f9 f819 	bl	80002cc <__adddf3>
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	f7f9 f811 	bl	80002cc <__adddf3>
 80072aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80072ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80073a0 <__ieee754_pow+0x760>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	4658      	mov	r0, fp
 80072b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80072ba:	460d      	mov	r5, r1
 80072bc:	f7f9 f9bc 	bl	8000638 <__aeabi_dmul>
 80072c0:	465c      	mov	r4, fp
 80072c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072c6:	4642      	mov	r2, r8
 80072c8:	464b      	mov	r3, r9
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f8 fffb 	bl	80002c8 <__aeabi_dsub>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f8 fff5 	bl	80002c8 <__aeabi_dsub>
 80072de:	a332      	add	r3, pc, #200	@ (adr r3, 80073a8 <__ieee754_pow+0x768>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f9 f9a8 	bl	8000638 <__aeabi_dmul>
 80072e8:	a331      	add	r3, pc, #196	@ (adr r3, 80073b0 <__ieee754_pow+0x770>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	4606      	mov	r6, r0
 80072f0:	460f      	mov	r7, r1
 80072f2:	4620      	mov	r0, r4
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7f9 f99f 	bl	8000638 <__aeabi_dmul>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f8 ffe3 	bl	80002cc <__adddf3>
 8007306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007308:	4b32      	ldr	r3, [pc, #200]	@ (80073d4 <__ieee754_pow+0x794>)
 800730a:	4413      	add	r3, r2
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f8 ffdc 	bl	80002cc <__adddf3>
 8007314:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007318:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800731a:	f7f9 f923 	bl	8000564 <__aeabi_i2d>
 800731e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007320:	4b2d      	ldr	r3, [pc, #180]	@ (80073d8 <__ieee754_pow+0x798>)
 8007322:	4413      	add	r3, r2
 8007324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007328:	4606      	mov	r6, r0
 800732a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800732e:	460f      	mov	r7, r1
 8007330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007334:	f7f8 ffca 	bl	80002cc <__adddf3>
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	f7f8 ffc6 	bl	80002cc <__adddf3>
 8007340:	4632      	mov	r2, r6
 8007342:	463b      	mov	r3, r7
 8007344:	f7f8 ffc2 	bl	80002cc <__adddf3>
 8007348:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800734c:	4632      	mov	r2, r6
 800734e:	463b      	mov	r3, r7
 8007350:	4658      	mov	r0, fp
 8007352:	460d      	mov	r5, r1
 8007354:	f7f8 ffb8 	bl	80002c8 <__aeabi_dsub>
 8007358:	4642      	mov	r2, r8
 800735a:	464b      	mov	r3, r9
 800735c:	f7f8 ffb4 	bl	80002c8 <__aeabi_dsub>
 8007360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007364:	f7f8 ffb0 	bl	80002c8 <__aeabi_dsub>
 8007368:	465c      	mov	r4, fp
 800736a:	4602      	mov	r2, r0
 800736c:	e036      	b.n	80073dc <__ieee754_pow+0x79c>
 800736e:	bf00      	nop
 8007370:	4a454eef 	.word	0x4a454eef
 8007374:	3fca7e28 	.word	0x3fca7e28
 8007378:	93c9db65 	.word	0x93c9db65
 800737c:	3fcd864a 	.word	0x3fcd864a
 8007380:	a91d4101 	.word	0xa91d4101
 8007384:	3fd17460 	.word	0x3fd17460
 8007388:	518f264d 	.word	0x518f264d
 800738c:	3fd55555 	.word	0x3fd55555
 8007390:	db6fabff 	.word	0xdb6fabff
 8007394:	3fdb6db6 	.word	0x3fdb6db6
 8007398:	33333303 	.word	0x33333303
 800739c:	3fe33333 	.word	0x3fe33333
 80073a0:	e0000000 	.word	0xe0000000
 80073a4:	3feec709 	.word	0x3feec709
 80073a8:	dc3a03fd 	.word	0xdc3a03fd
 80073ac:	3feec709 	.word	0x3feec709
 80073b0:	145b01f5 	.word	0x145b01f5
 80073b4:	be3e2fe0 	.word	0xbe3e2fe0
 80073b8:	7ff00000 	.word	0x7ff00000
 80073bc:	43400000 	.word	0x43400000
 80073c0:	0003988e 	.word	0x0003988e
 80073c4:	000bb679 	.word	0x000bb679
 80073c8:	08007e98 	.word	0x08007e98
 80073cc:	3ff00000 	.word	0x3ff00000
 80073d0:	40080000 	.word	0x40080000
 80073d4:	08007e78 	.word	0x08007e78
 80073d8:	08007e88 	.word	0x08007e88
 80073dc:	460b      	mov	r3, r1
 80073de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073e2:	e5d7      	b.n	8006f94 <__ieee754_pow+0x354>
 80073e4:	f04f 0a01 	mov.w	sl, #1
 80073e8:	e65e      	b.n	80070a8 <__ieee754_pow+0x468>
 80073ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 80076bc <__ieee754_pow+0xa7c>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f8 ff6a 	bl	80002cc <__adddf3>
 80073f8:	4642      	mov	r2, r8
 80073fa:	e9cd 0100 	strd	r0, r1, [sp]
 80073fe:	464b      	mov	r3, r9
 8007400:	4620      	mov	r0, r4
 8007402:	4629      	mov	r1, r5
 8007404:	f7f8 ff60 	bl	80002c8 <__aeabi_dsub>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007410:	f7f9 fba2 	bl	8000b58 <__aeabi_dcmpgt>
 8007414:	2800      	cmp	r0, #0
 8007416:	f47f ae00 	bne.w	800701a <__ieee754_pow+0x3da>
 800741a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800741e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007422:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007426:	fa43 fa0a 	asr.w	sl, r3, sl
 800742a:	44da      	add	sl, fp
 800742c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007430:	489d      	ldr	r0, [pc, #628]	@ (80076a8 <__ieee754_pow+0xa68>)
 8007432:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007436:	4108      	asrs	r0, r1
 8007438:	ea00 030a 	and.w	r3, r0, sl
 800743c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007440:	f1c1 0114 	rsb	r1, r1, #20
 8007444:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007448:	fa4a fa01 	asr.w	sl, sl, r1
 800744c:	f1bb 0f00 	cmp.w	fp, #0
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	bfb8      	it	lt
 800745a:	f1ca 0a00 	rsblt	sl, sl, #0
 800745e:	f7f8 ff33 	bl	80002c8 <__aeabi_dsub>
 8007462:	4680      	mov	r8, r0
 8007464:	4689      	mov	r9, r1
 8007466:	4632      	mov	r2, r6
 8007468:	463b      	mov	r3, r7
 800746a:	4640      	mov	r0, r8
 800746c:	4649      	mov	r1, r9
 800746e:	f7f8 ff2d 	bl	80002cc <__adddf3>
 8007472:	2400      	movs	r4, #0
 8007474:	a37c      	add	r3, pc, #496	@ (adr r3, 8007668 <__ieee754_pow+0xa28>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	4620      	mov	r0, r4
 800747c:	460d      	mov	r5, r1
 800747e:	f7f9 f8db 	bl	8000638 <__aeabi_dmul>
 8007482:	4642      	mov	r2, r8
 8007484:	e9cd 0100 	strd	r0, r1, [sp]
 8007488:	464b      	mov	r3, r9
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f8 ff1b 	bl	80002c8 <__aeabi_dsub>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4630      	mov	r0, r6
 8007498:	4639      	mov	r1, r7
 800749a:	f7f8 ff15 	bl	80002c8 <__aeabi_dsub>
 800749e:	a374      	add	r3, pc, #464	@ (adr r3, 8007670 <__ieee754_pow+0xa30>)
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f7f9 f8c8 	bl	8000638 <__aeabi_dmul>
 80074a8:	a373      	add	r3, pc, #460	@ (adr r3, 8007678 <__ieee754_pow+0xa38>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	4620      	mov	r0, r4
 80074b4:	4629      	mov	r1, r5
 80074b6:	f7f9 f8bf 	bl	8000638 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4640      	mov	r0, r8
 80074c0:	4649      	mov	r1, r9
 80074c2:	f7f8 ff03 	bl	80002cc <__adddf3>
 80074c6:	4604      	mov	r4, r0
 80074c8:	460d      	mov	r5, r1
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074d2:	f7f8 fefb 	bl	80002cc <__adddf3>
 80074d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074da:	4680      	mov	r8, r0
 80074dc:	4689      	mov	r9, r1
 80074de:	f7f8 fef3 	bl	80002c8 <__aeabi_dsub>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f8 feed 	bl	80002c8 <__aeabi_dsub>
 80074ee:	4642      	mov	r2, r8
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	464b      	mov	r3, r9
 80074f6:	4640      	mov	r0, r8
 80074f8:	4649      	mov	r1, r9
 80074fa:	f7f9 f89d 	bl	8000638 <__aeabi_dmul>
 80074fe:	a360      	add	r3, pc, #384	@ (adr r3, 8007680 <__ieee754_pow+0xa40>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	4604      	mov	r4, r0
 8007506:	460d      	mov	r5, r1
 8007508:	f7f9 f896 	bl	8000638 <__aeabi_dmul>
 800750c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007688 <__ieee754_pow+0xa48>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f7f8 fed9 	bl	80002c8 <__aeabi_dsub>
 8007516:	4622      	mov	r2, r4
 8007518:	462b      	mov	r3, r5
 800751a:	f7f9 f88d 	bl	8000638 <__aeabi_dmul>
 800751e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007690 <__ieee754_pow+0xa50>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f7f8 fed2 	bl	80002cc <__adddf3>
 8007528:	4622      	mov	r2, r4
 800752a:	462b      	mov	r3, r5
 800752c:	f7f9 f884 	bl	8000638 <__aeabi_dmul>
 8007530:	a359      	add	r3, pc, #356	@ (adr r3, 8007698 <__ieee754_pow+0xa58>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f7f8 fec7 	bl	80002c8 <__aeabi_dsub>
 800753a:	4622      	mov	r2, r4
 800753c:	462b      	mov	r3, r5
 800753e:	f7f9 f87b 	bl	8000638 <__aeabi_dmul>
 8007542:	a357      	add	r3, pc, #348	@ (adr r3, 80076a0 <__ieee754_pow+0xa60>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f8 fec0 	bl	80002cc <__adddf3>
 800754c:	4622      	mov	r2, r4
 800754e:	462b      	mov	r3, r5
 8007550:	f7f9 f872 	bl	8000638 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4640      	mov	r0, r8
 800755a:	4649      	mov	r1, r9
 800755c:	f7f8 feb4 	bl	80002c8 <__aeabi_dsub>
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f9 f864 	bl	8000638 <__aeabi_dmul>
 8007570:	2200      	movs	r2, #0
 8007572:	e9cd 0100 	strd	r0, r1, [sp]
 8007576:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f7f8 fea3 	bl	80002c8 <__aeabi_dsub>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9dd 0100 	ldrd	r0, r1, [sp]
 800758a:	f7f9 f97f 	bl	800088c <__aeabi_ddiv>
 800758e:	4632      	mov	r2, r6
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	463b      	mov	r3, r7
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	f7f9 f84d 	bl	8000638 <__aeabi_dmul>
 800759e:	4632      	mov	r2, r6
 80075a0:	463b      	mov	r3, r7
 80075a2:	f7f8 fe93 	bl	80002cc <__adddf3>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 fe8b 	bl	80002c8 <__aeabi_dsub>
 80075b2:	4642      	mov	r2, r8
 80075b4:	464b      	mov	r3, r9
 80075b6:	f7f8 fe87 	bl	80002c8 <__aeabi_dsub>
 80075ba:	460b      	mov	r3, r1
 80075bc:	4602      	mov	r2, r0
 80075be:	493b      	ldr	r1, [pc, #236]	@ (80076ac <__ieee754_pow+0xa6c>)
 80075c0:	2000      	movs	r0, #0
 80075c2:	f7f8 fe81 	bl	80002c8 <__aeabi_dsub>
 80075c6:	ec41 0b10 	vmov	d0, r0, r1
 80075ca:	ee10 3a90 	vmov	r3, s1
 80075ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80075d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d6:	da30      	bge.n	800763a <__ieee754_pow+0x9fa>
 80075d8:	4650      	mov	r0, sl
 80075da:	f000 fa15 	bl	8007a08 <scalbn>
 80075de:	ec51 0b10 	vmov	r0, r1, d0
 80075e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e6:	f7ff bbd2 	b.w	8006d8e <__ieee754_pow+0x14e>
 80075ea:	4c31      	ldr	r4, [pc, #196]	@ (80076b0 <__ieee754_pow+0xa70>)
 80075ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d91a      	bls.n	800762a <__ieee754_pow+0x9ea>
 80075f4:	4b2f      	ldr	r3, [pc, #188]	@ (80076b4 <__ieee754_pow+0xa74>)
 80075f6:	440b      	add	r3, r1
 80075f8:	4303      	orrs	r3, r0
 80075fa:	d009      	beq.n	8007610 <__ieee754_pow+0x9d0>
 80075fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	2300      	movs	r3, #0
 8007604:	f7f9 fa8a 	bl	8000b1c <__aeabi_dcmplt>
 8007608:	3800      	subs	r0, #0
 800760a:	bf18      	it	ne
 800760c:	2001      	movne	r0, #1
 800760e:	e42b      	b.n	8006e68 <__ieee754_pow+0x228>
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	f7f8 fe58 	bl	80002c8 <__aeabi_dsub>
 8007618:	4632      	mov	r2, r6
 800761a:	463b      	mov	r3, r7
 800761c:	f7f9 fa92 	bl	8000b44 <__aeabi_dcmpge>
 8007620:	2800      	cmp	r0, #0
 8007622:	d1eb      	bne.n	80075fc <__ieee754_pow+0x9bc>
 8007624:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80076c4 <__ieee754_pow+0xa84>
 8007628:	e6f7      	b.n	800741a <__ieee754_pow+0x7da>
 800762a:	469a      	mov	sl, r3
 800762c:	4b22      	ldr	r3, [pc, #136]	@ (80076b8 <__ieee754_pow+0xa78>)
 800762e:	459a      	cmp	sl, r3
 8007630:	f63f aef3 	bhi.w	800741a <__ieee754_pow+0x7da>
 8007634:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007638:	e715      	b.n	8007466 <__ieee754_pow+0x826>
 800763a:	ec51 0b10 	vmov	r0, r1, d0
 800763e:	4619      	mov	r1, r3
 8007640:	e7cf      	b.n	80075e2 <__ieee754_pow+0x9a2>
 8007642:	491a      	ldr	r1, [pc, #104]	@ (80076ac <__ieee754_pow+0xa6c>)
 8007644:	2000      	movs	r0, #0
 8007646:	f7ff bb18 	b.w	8006c7a <__ieee754_pow+0x3a>
 800764a:	2000      	movs	r0, #0
 800764c:	2100      	movs	r1, #0
 800764e:	f7ff bb14 	b.w	8006c7a <__ieee754_pow+0x3a>
 8007652:	4630      	mov	r0, r6
 8007654:	4639      	mov	r1, r7
 8007656:	f7ff bb10 	b.w	8006c7a <__ieee754_pow+0x3a>
 800765a:	460c      	mov	r4, r1
 800765c:	f7ff bb5e 	b.w	8006d1c <__ieee754_pow+0xdc>
 8007660:	2400      	movs	r4, #0
 8007662:	f7ff bb49 	b.w	8006cf8 <__ieee754_pow+0xb8>
 8007666:	bf00      	nop
 8007668:	00000000 	.word	0x00000000
 800766c:	3fe62e43 	.word	0x3fe62e43
 8007670:	fefa39ef 	.word	0xfefa39ef
 8007674:	3fe62e42 	.word	0x3fe62e42
 8007678:	0ca86c39 	.word	0x0ca86c39
 800767c:	be205c61 	.word	0xbe205c61
 8007680:	72bea4d0 	.word	0x72bea4d0
 8007684:	3e663769 	.word	0x3e663769
 8007688:	c5d26bf1 	.word	0xc5d26bf1
 800768c:	3ebbbd41 	.word	0x3ebbbd41
 8007690:	af25de2c 	.word	0xaf25de2c
 8007694:	3f11566a 	.word	0x3f11566a
 8007698:	16bebd93 	.word	0x16bebd93
 800769c:	3f66c16c 	.word	0x3f66c16c
 80076a0:	5555553e 	.word	0x5555553e
 80076a4:	3fc55555 	.word	0x3fc55555
 80076a8:	fff00000 	.word	0xfff00000
 80076ac:	3ff00000 	.word	0x3ff00000
 80076b0:	4090cbff 	.word	0x4090cbff
 80076b4:	3f6f3400 	.word	0x3f6f3400
 80076b8:	3fe00000 	.word	0x3fe00000
 80076bc:	652b82fe 	.word	0x652b82fe
 80076c0:	3c971547 	.word	0x3c971547
 80076c4:	4090cc00 	.word	0x4090cc00

080076c8 <atan>:
 80076c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	ec55 4b10 	vmov	r4, r5, d0
 80076d0:	4bbf      	ldr	r3, [pc, #764]	@ (80079d0 <atan+0x308>)
 80076d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80076d6:	429e      	cmp	r6, r3
 80076d8:	46ab      	mov	fp, r5
 80076da:	d918      	bls.n	800770e <atan+0x46>
 80076dc:	4bbd      	ldr	r3, [pc, #756]	@ (80079d4 <atan+0x30c>)
 80076de:	429e      	cmp	r6, r3
 80076e0:	d801      	bhi.n	80076e6 <atan+0x1e>
 80076e2:	d109      	bne.n	80076f8 <atan+0x30>
 80076e4:	b144      	cbz	r4, 80076f8 <atan+0x30>
 80076e6:	4622      	mov	r2, r4
 80076e8:	462b      	mov	r3, r5
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f8 fded 	bl	80002cc <__adddf3>
 80076f2:	4604      	mov	r4, r0
 80076f4:	460d      	mov	r5, r1
 80076f6:	e006      	b.n	8007706 <atan+0x3e>
 80076f8:	f1bb 0f00 	cmp.w	fp, #0
 80076fc:	f340 812b 	ble.w	8007956 <atan+0x28e>
 8007700:	a597      	add	r5, pc, #604	@ (adr r5, 8007960 <atan+0x298>)
 8007702:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007706:	ec45 4b10 	vmov	d0, r4, r5
 800770a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	4bb2      	ldr	r3, [pc, #712]	@ (80079d8 <atan+0x310>)
 8007710:	429e      	cmp	r6, r3
 8007712:	d813      	bhi.n	800773c <atan+0x74>
 8007714:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007718:	429e      	cmp	r6, r3
 800771a:	d80c      	bhi.n	8007736 <atan+0x6e>
 800771c:	a392      	add	r3, pc, #584	@ (adr r3, 8007968 <atan+0x2a0>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fdd1 	bl	80002cc <__adddf3>
 800772a:	4bac      	ldr	r3, [pc, #688]	@ (80079dc <atan+0x314>)
 800772c:	2200      	movs	r2, #0
 800772e:	f7f9 fa13 	bl	8000b58 <__aeabi_dcmpgt>
 8007732:	2800      	cmp	r0, #0
 8007734:	d1e7      	bne.n	8007706 <atan+0x3e>
 8007736:	f04f 3aff 	mov.w	sl, #4294967295
 800773a:	e029      	b.n	8007790 <atan+0xc8>
 800773c:	f000 f95c 	bl	80079f8 <fabs>
 8007740:	4ba7      	ldr	r3, [pc, #668]	@ (80079e0 <atan+0x318>)
 8007742:	429e      	cmp	r6, r3
 8007744:	ec55 4b10 	vmov	r4, r5, d0
 8007748:	f200 80bc 	bhi.w	80078c4 <atan+0x1fc>
 800774c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007750:	429e      	cmp	r6, r3
 8007752:	f200 809e 	bhi.w	8007892 <atan+0x1ca>
 8007756:	4622      	mov	r2, r4
 8007758:	462b      	mov	r3, r5
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f8 fdb5 	bl	80002cc <__adddf3>
 8007762:	4b9e      	ldr	r3, [pc, #632]	@ (80079dc <atan+0x314>)
 8007764:	2200      	movs	r2, #0
 8007766:	f7f8 fdaf 	bl	80002c8 <__aeabi_dsub>
 800776a:	2200      	movs	r2, #0
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f8 fda8 	bl	80002cc <__adddf3>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4630      	mov	r0, r6
 8007782:	4639      	mov	r1, r7
 8007784:	f7f9 f882 	bl	800088c <__aeabi_ddiv>
 8007788:	f04f 0a00 	mov.w	sl, #0
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	4622      	mov	r2, r4
 8007792:	462b      	mov	r3, r5
 8007794:	4620      	mov	r0, r4
 8007796:	4629      	mov	r1, r5
 8007798:	f7f8 ff4e 	bl	8000638 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4680      	mov	r8, r0
 80077a2:	4689      	mov	r9, r1
 80077a4:	f7f8 ff48 	bl	8000638 <__aeabi_dmul>
 80077a8:	a371      	add	r3, pc, #452	@ (adr r3, 8007970 <atan+0x2a8>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	4606      	mov	r6, r0
 80077b0:	460f      	mov	r7, r1
 80077b2:	f7f8 ff41 	bl	8000638 <__aeabi_dmul>
 80077b6:	a370      	add	r3, pc, #448	@ (adr r3, 8007978 <atan+0x2b0>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 fd86 	bl	80002cc <__adddf3>
 80077c0:	4632      	mov	r2, r6
 80077c2:	463b      	mov	r3, r7
 80077c4:	f7f8 ff38 	bl	8000638 <__aeabi_dmul>
 80077c8:	a36d      	add	r3, pc, #436	@ (adr r3, 8007980 <atan+0x2b8>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f7f8 fd7d 	bl	80002cc <__adddf3>
 80077d2:	4632      	mov	r2, r6
 80077d4:	463b      	mov	r3, r7
 80077d6:	f7f8 ff2f 	bl	8000638 <__aeabi_dmul>
 80077da:	a36b      	add	r3, pc, #428	@ (adr r3, 8007988 <atan+0x2c0>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 fd74 	bl	80002cc <__adddf3>
 80077e4:	4632      	mov	r2, r6
 80077e6:	463b      	mov	r3, r7
 80077e8:	f7f8 ff26 	bl	8000638 <__aeabi_dmul>
 80077ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007990 <atan+0x2c8>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f7f8 fd6b 	bl	80002cc <__adddf3>
 80077f6:	4632      	mov	r2, r6
 80077f8:	463b      	mov	r3, r7
 80077fa:	f7f8 ff1d 	bl	8000638 <__aeabi_dmul>
 80077fe:	a366      	add	r3, pc, #408	@ (adr r3, 8007998 <atan+0x2d0>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f7f8 fd62 	bl	80002cc <__adddf3>
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	f7f8 ff14 	bl	8000638 <__aeabi_dmul>
 8007810:	a363      	add	r3, pc, #396	@ (adr r3, 80079a0 <atan+0x2d8>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	4630      	mov	r0, r6
 800781c:	4639      	mov	r1, r7
 800781e:	f7f8 ff0b 	bl	8000638 <__aeabi_dmul>
 8007822:	a361      	add	r3, pc, #388	@ (adr r3, 80079a8 <atan+0x2e0>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fd4e 	bl	80002c8 <__aeabi_dsub>
 800782c:	4632      	mov	r2, r6
 800782e:	463b      	mov	r3, r7
 8007830:	f7f8 ff02 	bl	8000638 <__aeabi_dmul>
 8007834:	a35e      	add	r3, pc, #376	@ (adr r3, 80079b0 <atan+0x2e8>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fd45 	bl	80002c8 <__aeabi_dsub>
 800783e:	4632      	mov	r2, r6
 8007840:	463b      	mov	r3, r7
 8007842:	f7f8 fef9 	bl	8000638 <__aeabi_dmul>
 8007846:	a35c      	add	r3, pc, #368	@ (adr r3, 80079b8 <atan+0x2f0>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fd3c 	bl	80002c8 <__aeabi_dsub>
 8007850:	4632      	mov	r2, r6
 8007852:	463b      	mov	r3, r7
 8007854:	f7f8 fef0 	bl	8000638 <__aeabi_dmul>
 8007858:	a359      	add	r3, pc, #356	@ (adr r3, 80079c0 <atan+0x2f8>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fd33 	bl	80002c8 <__aeabi_dsub>
 8007862:	4632      	mov	r2, r6
 8007864:	463b      	mov	r3, r7
 8007866:	f7f8 fee7 	bl	8000638 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f8 fd2b 	bl	80002cc <__adddf3>
 8007876:	4622      	mov	r2, r4
 8007878:	462b      	mov	r3, r5
 800787a:	f7f8 fedd 	bl	8000638 <__aeabi_dmul>
 800787e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	d148      	bne.n	800791a <atan+0x252>
 8007888:	4620      	mov	r0, r4
 800788a:	4629      	mov	r1, r5
 800788c:	f7f8 fd1c 	bl	80002c8 <__aeabi_dsub>
 8007890:	e72f      	b.n	80076f2 <atan+0x2a>
 8007892:	4b52      	ldr	r3, [pc, #328]	@ (80079dc <atan+0x314>)
 8007894:	2200      	movs	r2, #0
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f8 fd15 	bl	80002c8 <__aeabi_dsub>
 800789e:	4b4f      	ldr	r3, [pc, #316]	@ (80079dc <atan+0x314>)
 80078a0:	4606      	mov	r6, r0
 80078a2:	460f      	mov	r7, r1
 80078a4:	2200      	movs	r2, #0
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f8 fd0f 	bl	80002cc <__adddf3>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4630      	mov	r0, r6
 80078b4:	4639      	mov	r1, r7
 80078b6:	f7f8 ffe9 	bl	800088c <__aeabi_ddiv>
 80078ba:	f04f 0a01 	mov.w	sl, #1
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	e765      	b.n	8007790 <atan+0xc8>
 80078c4:	4b47      	ldr	r3, [pc, #284]	@ (80079e4 <atan+0x31c>)
 80078c6:	429e      	cmp	r6, r3
 80078c8:	d21c      	bcs.n	8007904 <atan+0x23c>
 80078ca:	4b47      	ldr	r3, [pc, #284]	@ (80079e8 <atan+0x320>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 fcf9 	bl	80002c8 <__aeabi_dsub>
 80078d6:	4b44      	ldr	r3, [pc, #272]	@ (80079e8 <atan+0x320>)
 80078d8:	4606      	mov	r6, r0
 80078da:	460f      	mov	r7, r1
 80078dc:	2200      	movs	r2, #0
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f8 fea9 	bl	8000638 <__aeabi_dmul>
 80078e6:	4b3d      	ldr	r3, [pc, #244]	@ (80079dc <atan+0x314>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	f7f8 fcef 	bl	80002cc <__adddf3>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 ffc9 	bl	800088c <__aeabi_ddiv>
 80078fa:	f04f 0a02 	mov.w	sl, #2
 80078fe:	4604      	mov	r4, r0
 8007900:	460d      	mov	r5, r1
 8007902:	e745      	b.n	8007790 <atan+0xc8>
 8007904:	4622      	mov	r2, r4
 8007906:	462b      	mov	r3, r5
 8007908:	4938      	ldr	r1, [pc, #224]	@ (80079ec <atan+0x324>)
 800790a:	2000      	movs	r0, #0
 800790c:	f7f8 ffbe 	bl	800088c <__aeabi_ddiv>
 8007910:	f04f 0a03 	mov.w	sl, #3
 8007914:	4604      	mov	r4, r0
 8007916:	460d      	mov	r5, r1
 8007918:	e73a      	b.n	8007790 <atan+0xc8>
 800791a:	4b35      	ldr	r3, [pc, #212]	@ (80079f0 <atan+0x328>)
 800791c:	4e35      	ldr	r6, [pc, #212]	@ (80079f4 <atan+0x32c>)
 800791e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 fccf 	bl	80002c8 <__aeabi_dsub>
 800792a:	4622      	mov	r2, r4
 800792c:	462b      	mov	r3, r5
 800792e:	f7f8 fccb 	bl	80002c8 <__aeabi_dsub>
 8007932:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800793e:	f7f8 fcc3 	bl	80002c8 <__aeabi_dsub>
 8007942:	f1bb 0f00 	cmp.w	fp, #0
 8007946:	4604      	mov	r4, r0
 8007948:	460d      	mov	r5, r1
 800794a:	f6bf aedc 	bge.w	8007706 <atan+0x3e>
 800794e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007952:	461d      	mov	r5, r3
 8007954:	e6d7      	b.n	8007706 <atan+0x3e>
 8007956:	a51c      	add	r5, pc, #112	@ (adr r5, 80079c8 <atan+0x300>)
 8007958:	e9d5 4500 	ldrd	r4, r5, [r5]
 800795c:	e6d3      	b.n	8007706 <atan+0x3e>
 800795e:	bf00      	nop
 8007960:	54442d18 	.word	0x54442d18
 8007964:	3ff921fb 	.word	0x3ff921fb
 8007968:	8800759c 	.word	0x8800759c
 800796c:	7e37e43c 	.word	0x7e37e43c
 8007970:	e322da11 	.word	0xe322da11
 8007974:	3f90ad3a 	.word	0x3f90ad3a
 8007978:	24760deb 	.word	0x24760deb
 800797c:	3fa97b4b 	.word	0x3fa97b4b
 8007980:	a0d03d51 	.word	0xa0d03d51
 8007984:	3fb10d66 	.word	0x3fb10d66
 8007988:	c54c206e 	.word	0xc54c206e
 800798c:	3fb745cd 	.word	0x3fb745cd
 8007990:	920083ff 	.word	0x920083ff
 8007994:	3fc24924 	.word	0x3fc24924
 8007998:	5555550d 	.word	0x5555550d
 800799c:	3fd55555 	.word	0x3fd55555
 80079a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80079a4:	bfa2b444 	.word	0xbfa2b444
 80079a8:	52defd9a 	.word	0x52defd9a
 80079ac:	3fadde2d 	.word	0x3fadde2d
 80079b0:	af749a6d 	.word	0xaf749a6d
 80079b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80079b8:	fe231671 	.word	0xfe231671
 80079bc:	3fbc71c6 	.word	0x3fbc71c6
 80079c0:	9998ebc4 	.word	0x9998ebc4
 80079c4:	3fc99999 	.word	0x3fc99999
 80079c8:	54442d18 	.word	0x54442d18
 80079cc:	bff921fb 	.word	0xbff921fb
 80079d0:	440fffff 	.word	0x440fffff
 80079d4:	7ff00000 	.word	0x7ff00000
 80079d8:	3fdbffff 	.word	0x3fdbffff
 80079dc:	3ff00000 	.word	0x3ff00000
 80079e0:	3ff2ffff 	.word	0x3ff2ffff
 80079e4:	40038000 	.word	0x40038000
 80079e8:	3ff80000 	.word	0x3ff80000
 80079ec:	bff00000 	.word	0xbff00000
 80079f0:	08007ea8 	.word	0x08007ea8
 80079f4:	08007ec8 	.word	0x08007ec8

080079f8 <fabs>:
 80079f8:	ec51 0b10 	vmov	r0, r1, d0
 80079fc:	4602      	mov	r2, r0
 80079fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007a02:	ec43 2b10 	vmov	d0, r2, r3
 8007a06:	4770      	bx	lr

08007a08 <scalbn>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	ec55 4b10 	vmov	r4, r5, d0
 8007a0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007a12:	4606      	mov	r6, r0
 8007a14:	462b      	mov	r3, r5
 8007a16:	b991      	cbnz	r1, 8007a3e <scalbn+0x36>
 8007a18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007a1c:	4323      	orrs	r3, r4
 8007a1e:	d03d      	beq.n	8007a9c <scalbn+0x94>
 8007a20:	4b35      	ldr	r3, [pc, #212]	@ (8007af8 <scalbn+0xf0>)
 8007a22:	4620      	mov	r0, r4
 8007a24:	4629      	mov	r1, r5
 8007a26:	2200      	movs	r2, #0
 8007a28:	f7f8 fe06 	bl	8000638 <__aeabi_dmul>
 8007a2c:	4b33      	ldr	r3, [pc, #204]	@ (8007afc <scalbn+0xf4>)
 8007a2e:	429e      	cmp	r6, r3
 8007a30:	4604      	mov	r4, r0
 8007a32:	460d      	mov	r5, r1
 8007a34:	da0f      	bge.n	8007a56 <scalbn+0x4e>
 8007a36:	a328      	add	r3, pc, #160	@ (adr r3, 8007ad8 <scalbn+0xd0>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	e01e      	b.n	8007a7c <scalbn+0x74>
 8007a3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007a42:	4291      	cmp	r1, r2
 8007a44:	d10b      	bne.n	8007a5e <scalbn+0x56>
 8007a46:	4622      	mov	r2, r4
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7f8 fc3e 	bl	80002cc <__adddf3>
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	e022      	b.n	8007a9c <scalbn+0x94>
 8007a56:	460b      	mov	r3, r1
 8007a58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007a5c:	3936      	subs	r1, #54	@ 0x36
 8007a5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007a62:	4296      	cmp	r6, r2
 8007a64:	dd0d      	ble.n	8007a82 <scalbn+0x7a>
 8007a66:	2d00      	cmp	r5, #0
 8007a68:	a11d      	add	r1, pc, #116	@ (adr r1, 8007ae0 <scalbn+0xd8>)
 8007a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6e:	da02      	bge.n	8007a76 <scalbn+0x6e>
 8007a70:	a11d      	add	r1, pc, #116	@ (adr r1, 8007ae8 <scalbn+0xe0>)
 8007a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a76:	a31a      	add	r3, pc, #104	@ (adr r3, 8007ae0 <scalbn+0xd8>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 fddc 	bl	8000638 <__aeabi_dmul>
 8007a80:	e7e6      	b.n	8007a50 <scalbn+0x48>
 8007a82:	1872      	adds	r2, r6, r1
 8007a84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007a88:	428a      	cmp	r2, r1
 8007a8a:	dcec      	bgt.n	8007a66 <scalbn+0x5e>
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	dd08      	ble.n	8007aa2 <scalbn+0x9a>
 8007a90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007a94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007a98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a9c:	ec45 4b10 	vmov	d0, r4, r5
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007aa6:	da08      	bge.n	8007aba <scalbn+0xb2>
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	a10b      	add	r1, pc, #44	@ (adr r1, 8007ad8 <scalbn+0xd0>)
 8007aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab0:	dac1      	bge.n	8007a36 <scalbn+0x2e>
 8007ab2:	a10f      	add	r1, pc, #60	@ (adr r1, 8007af0 <scalbn+0xe8>)
 8007ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab8:	e7bd      	b.n	8007a36 <scalbn+0x2e>
 8007aba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007abe:	3236      	adds	r2, #54	@ 0x36
 8007ac0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007ac4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <scalbn+0xf8>)
 8007acc:	4629      	mov	r1, r5
 8007ace:	2200      	movs	r2, #0
 8007ad0:	e7d4      	b.n	8007a7c <scalbn+0x74>
 8007ad2:	bf00      	nop
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	c2f8f359 	.word	0xc2f8f359
 8007adc:	01a56e1f 	.word	0x01a56e1f
 8007ae0:	8800759c 	.word	0x8800759c
 8007ae4:	7e37e43c 	.word	0x7e37e43c
 8007ae8:	8800759c 	.word	0x8800759c
 8007aec:	fe37e43c 	.word	0xfe37e43c
 8007af0:	c2f8f359 	.word	0xc2f8f359
 8007af4:	81a56e1f 	.word	0x81a56e1f
 8007af8:	43500000 	.word	0x43500000
 8007afc:	ffff3cb0 	.word	0xffff3cb0
 8007b00:	3c900000 	.word	0x3c900000

08007b04 <with_errno>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	ed2d 8b02 	vpush	{d8}
 8007b0a:	eeb0 8a40 	vmov.f32	s16, s0
 8007b0e:	eef0 8a60 	vmov.f32	s17, s1
 8007b12:	4604      	mov	r4, r0
 8007b14:	f7fe f9ce 	bl	8005eb4 <__errno>
 8007b18:	eeb0 0a48 	vmov.f32	s0, s16
 8007b1c:	eef0 0a68 	vmov.f32	s1, s17
 8007b20:	ecbd 8b02 	vpop	{d8}
 8007b24:	6004      	str	r4, [r0, #0]
 8007b26:	bd10      	pop	{r4, pc}

08007b28 <xflow>:
 8007b28:	4603      	mov	r3, r0
 8007b2a:	b507      	push	{r0, r1, r2, lr}
 8007b2c:	ec51 0b10 	vmov	r0, r1, d0
 8007b30:	b183      	cbz	r3, 8007b54 <xflow+0x2c>
 8007b32:	4602      	mov	r2, r0
 8007b34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b38:	e9cd 2300 	strd	r2, r3, [sp]
 8007b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b40:	f7f8 fd7a 	bl	8000638 <__aeabi_dmul>
 8007b44:	ec41 0b10 	vmov	d0, r0, r1
 8007b48:	2022      	movs	r0, #34	@ 0x22
 8007b4a:	b003      	add	sp, #12
 8007b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b50:	f7ff bfd8 	b.w	8007b04 <with_errno>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	e7ee      	b.n	8007b38 <xflow+0x10>
 8007b5a:	0000      	movs	r0, r0
 8007b5c:	0000      	movs	r0, r0
	...

08007b60 <__math_uflow>:
 8007b60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b68 <__math_uflow+0x8>
 8007b64:	f7ff bfe0 	b.w	8007b28 <xflow>
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	10000000 	.word	0x10000000

08007b70 <__math_oflow>:
 8007b70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b78 <__math_oflow+0x8>
 8007b74:	f7ff bfd8 	b.w	8007b28 <xflow>
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	70000000 	.word	0x70000000

08007b80 <_init>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr

08007b8c <_fini>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr
